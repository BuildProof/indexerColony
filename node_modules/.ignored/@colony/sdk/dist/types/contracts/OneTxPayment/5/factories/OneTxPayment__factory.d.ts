import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { OneTxPayment, OneTxPaymentInterface } from "../OneTxPayment.js";
export declare class OneTxPayment__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "ExtensionInitialised";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "authority";
            readonly type: "address";
        }];
        readonly name: "LogSetAuthority";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "LogSetOwner";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address payable";
            readonly name: "relayerAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "functionSignature";
            readonly type: "bytes";
        }];
        readonly name: "MetaTransactionExecuted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "agent";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fundamentalId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "nPayouts";
            readonly type: "uint256";
        }];
        readonly name: "OneTxPaymentMade";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly internalType: "contract DSAuthority";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_user";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sigR";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sigS";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_sigV";
            readonly type: "uint8";
        }];
        readonly name: "executeMetaTransaction";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getChainId";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getColony";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDeprecated";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "data";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "results";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract DSAuthority";
            readonly name: "authority_";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner_";
            readonly type: "address";
        }];
        readonly name: "setOwner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_owner";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_nonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sigR";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sigS";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_sigV";
            readonly type: "uint8";
        }];
        readonly name: "verify";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "userAddress";
            readonly type: "address";
        }];
        readonly name: "getMetatransactionNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nonce";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "identifier";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_identifier";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_version";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_colony";
            readonly type: "address";
        }];
        readonly name: "install";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "finishUpgrade";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_deprecated";
            readonly type: "bool";
        }];
        readonly name: "deprecate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "uninstall";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_sig";
            readonly type: "bytes4";
        }];
        readonly name: "getCapabilityRoles";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_roles";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_permissionDomainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_childSkillIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callerPermissionDomainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callerChildSkillIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "address payable[]";
            readonly name: "_workers";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "_tokens";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "_domainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_skillId";
            readonly type: "uint256";
        }];
        readonly name: "makePayment";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_permissionDomainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_childSkillIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callerPermissionDomainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callerChildSkillIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "address payable[]";
            readonly name: "_workers";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "_tokens";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "_amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "_domainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_skillId";
            readonly type: "uint256";
        }];
        readonly name: "makePaymentFundedFromDomain";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): OneTxPaymentInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OneTxPayment;
}
