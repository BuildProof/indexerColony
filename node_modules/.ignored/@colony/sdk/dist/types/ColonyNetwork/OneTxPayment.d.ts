import { type OneTxPaymentVersion, Extension } from '@colony/core';
import { type BigNumber, type BigNumberish } from 'ethers';
import { type OneTxPayment as OneTxPaymentContract3, OneTxPayment__factory as OneTxPaymentFactory3 } from '../contracts/OneTxPayment/3/index.js';
import { type OneTxPayment as OneTxPaymentContract4, OneTxPayment__factory as OneTxPaymentFactory4 } from '../contracts/OneTxPayment/4/index.js';
import { type OneTxPayment as OneTxPaymentContract5 } from '../contracts/OneTxPayment/5/index.js';
import { type Colony } from './Colony.js';
export type SupportedOneTxPaymentContract = OneTxPaymentContract3 | OneTxPaymentContract4 | OneTxPaymentContract5;
/**
 * ## `OneTxPayment` (One Transaction Payment)
 *
 * Ordinarily payments require more than one transaction, because the payment lifecycle requires more than one permissioned role.
 *
 * In some use cases, there might be a need for one authorized individual to be able to create, funds, and finalize a payment within a single transaction.
 *
 * The OneTxPayment extension adds this functionality by adding a makePayment function which requires the caller to have both Funding and administration ability within the domain of the payment.
 *
 * Extension therefore requires Administration and Funding roles to function.
 *
 * Note: if you deployed your Colony using the Dapp, the OneTxPayment extension is already installed for you
 */
export declare class OneTxPayment {
    /**
     * The currently supported OneTXPayment contract version. If the extension contract is not on this version it has to be upgraded.
     */
    static supportedVersions: ({
        version: number;
        factory: typeof OneTxPaymentFactory3;
    } | {
        version: number;
        factory: typeof OneTxPaymentFactory4;
    })[];
    static extensionType: Extension.OneTxPayment;
    /**
     * Create an instance of a OneTxPayment extension client and connect the Colony to it
     *
     * Only supports the latest version of the OneTxPayment contract
     *
     * @param colony - The Colony instance
     *
     * @returns A connected OneTxPayment instance
     */
    static connect(colony: Colony): Promise<OneTxPayment>;
    private colony;
    private oneTxPaymentContract;
    /** The extension contract's address */
    address: string;
    /** The extension contract's version */
    version: OneTxPaymentVersion;
    static getLatestSupportedVersion(): 2 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
    /**
     * Creates a new instance to connect to an existing OneTxPayment extension contract
     *
     * @internal
     *
     * @remarks
     * Do not use this method directly but use {@link OneTxPayment.connect}
     */
    constructor(colony: Colony, oneTxPaymentContract: SupportedOneTxPaymentContract, deployedVersion: OneTxPaymentVersion);
    /**
     * Provide direct access to the internally used OneTxPayment contract. Only use when you know what you're doing
     * @internal
     *
     * @returns The internally used OneTxPaymentContract
     */
    getInternalVotingReputationContract(): SupportedOneTxPaymentContract;
    /**
     * Make a payment to a single or multiple addresses using one or more tokens
     *
     * @remarks Requires the `OneTxPayment` extension to be installed for the Colony (this is usually the case for Colonies created via the Dapp). Note that most tokens use 18 decimals, so add a bunch of zeros or use our `w` or `toWei` functions (see example)
     *
     * @example
     * ```typescript
     * import { Id, Tokens, w } from '@colony/sdk';
     *
     * // Immediately executing async function
     * (async function() {
     *   // Pay 10 CLNY (on ArbitrumOne chain) from the root domain to the following address
     *   // (forced transaction example)
     *   await colony.ext.oneTx.pay(
     *      '0xb77D57F4959eAfA0339424b83FcFaf9c15407461',
     *      w`10`,
     *      Id.RootDomain,
     *      Tokens.ArbitrumOne.CLNY,
     *   ).tx().mined();
     * })();
     * ```
     *
     * @param recipient - Wallet address of account to send the funds to (also awarded reputation when sending the native token) - can also be an array of addresses to pay
     * @param amount - Amount to pay in wei - can also be an array of amounts for the different tokens
     * @param tokenAddress - The address of the token to make the payment in. Default is the Colony's native token - can also be an array of token addresses (needs to be the same length as `amount`)
     * @param teamId - The team to use to send the funds from. Has to have funding of at least the amount you need to send. See {@link Colony.moveFundsToTeam}. Defaults to the Colony's root team
     * @returns A transaction creator
     *
     * #### Required permissions for forced transaction:
     *
     * * {@link ColonyRole.Administration}, {@link ColonyRole.Funding}
     *
     * #### Event data
     *
     * | Property | Type | Description |
     * | :------ | :------ | :------ |
     * | `agent` | string | The address that is responsible for triggering this event |
     * | `fundamentalId` | BigNumber | The newly added payment id |
     * | `nPayouts` | BigNumber | Number of payouts in total |
     */
    pay(recipient: string | string[], amount: BigNumberish | BigNumberish[], teamId?: BigNumberish, tokenAddress?: string | string[]): import("../index.js").ColonyTxCreator<SupportedOneTxPaymentContract, "makePaymentFundedFromDomain", {
        agent?: string | undefined;
        fundamentalId?: BigNumber | undefined;
        nPayouts?: BigNumber | undefined;
    }, import("@colony/events").MetadataType>;
    /**
     * Upgrade this extension to the next or a custom version
     *
     * This method upgrades this extension to a specified version or, if no version is provided to the next higher version.
     *
     * @remarks
     * * Only users with *Root* role are allowed to upgrade an extension (or another extension with appropriate permissions)
     * * Downgrading of extensions is not possible
     *
     * @param toVersion - Specify a custom version to upgrade the extension to
     *
     * @returns A transaction creator
     *
     * #### Event data
     *
     * | Property | Type | Description |
     * | :------ | :------ | :------ |
     * | `extensionId` | string | Extension id (name of the extension) that was upgraded |
     * | `oldVersion` | BigNumber | Version of the extension before the upgrade |
     * | `newVersion` | BigNumber | Version of the extension after the upgrade |
     */
    upgrade(toVersion?: BigNumberish): import("../index.js").ColonyTxCreator<import("./Colony.js").SupportedColonyContract, "upgradeExtension", {
        extensionId?: string | undefined;
        colony?: string | undefined;
        version?: BigNumber | undefined;
    }, import("@colony/events").MetadataType>;
}
