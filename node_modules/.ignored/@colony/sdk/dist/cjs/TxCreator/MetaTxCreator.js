"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaTxCreator = void 0;
const ethers_1 = require("ethers");
const core_1 = require("@colony/core");
const TxCreator_js_1 = require("./TxCreator.js");
const { arrayify, solidityKeccak256, splitSignature } = ethers_1.utils;
/**
 * An umbrella API for all kinds of transactions
 *
 * The `MetaTxCreator` allows for a simple API to cover all the different cases of transactions within the Colony Network. The `MetaTxCreator` supports sending a standard transaction ({@link MetaTxCreator.tx}) as well as metatransactions ({@link MetaTxCreator.metaTx}).
 *
 * ## Create a standard transaction ("force" in dApp)
 *
 * - {@link MetaTxCreator.tx}: force a Colony transaction, knowing you have the permissions to do so
 * - {@link MetaTxCreator.metaTx}: same as `tx()`, but send as a gasless metatransaction
 *
 * Learn more about these functions in their individual documentation
 */
class MetaTxCreator extends TxCreator_js_1.TxCreator {
    sendMetaTransaction(encodedTransaction, target) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.config.metaTxBroadcasterEndpoint) {
                throw new Error(`No metatransaction broadcaster endpoint found for network ${this.config.network}`);
            }
            const signer = this.config.getSigner();
            const { provider } = signer;
            if (!provider) {
                throw new Error('No provider found');
            }
            let chainId;
            if (this.config.network === core_1.Network.Custom) {
                chainId = 1;
            }
            else {
                const networkInfo = yield provider.getNetwork();
                chainId = networkInfo.chainId;
            }
            const userAddress = yield signer.getAddress();
            const nonce = yield this.contract.functions.getMetatransactionNonce(userAddress);
            const message = solidityKeccak256(['uint256', 'address', 'uint256', 'bytes'], [nonce.toString(), target, chainId, encodedTransaction]);
            const buf = arrayify(message);
            const signature = yield signer.signMessage(buf);
            const { r, s, v } = splitSignature(signature);
            const broadcastData = {
                target,
                payload: encodedTransaction,
                userAddress,
                r,
                s,
                v,
            };
            return this.broadcastMetaTx(broadcastData);
        });
    }
    getMetaTx() {
        return __awaiter(this, void 0, void 0, function* () {
            const args = yield this.getArgs();
            const encodedTransaction = this.contract.interface.encodeFunctionData(this.method, args);
            return this.sendMetaTransaction(encodedTransaction, this.contract.address);
        });
    }
    getMetaMined(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            const receipt = yield this.waitForMetaTx(tx);
            return this.getEventData(receipt);
        });
    }
    /**
     * Create a gasless MetaTransaction ("force" in dApp)
     *
     * After creation, you can then `send` the transaction or wait for it to be `mined`.
     * See also {@link TxCreator.tx} and https://docs.colony.io/colonysdk/guides/transactions for more information
     *
     * @remarks The user sending this transaction has to have the appropriate permissions to do so. Learn more about permissions in Colony [here](/develop/dev-learning/permissions).
     *
     * @returns A transaction that can be `send` or `mined`.
     */
    metaTx() {
        return {
            send: () => __awaiter(this, void 0, void 0, function* () {
                const tx = yield this.getMetaTx();
                return [tx, this.getMetaMined.bind(this, tx)];
            }),
            mined: () => __awaiter(this, void 0, void 0, function* () {
                const tx = yield this.getMetaTx();
                return this.getMetaMined(tx);
            }),
        };
    }
}
exports.MetaTxCreator = MetaTxCreator;
