import { parseLogs } from '@colony/core';
import { IpfsMetadataEvents, } from '@colony/events';
/**
 * An umbrella API for all kinds of transactions
 *
 * The `TxCreator` allows for a simple API to cover all the different cases of transactions within the Colony Network. This is the base class of the TxCreator that only supports the `tx()` action and no metatransactions.
 *
 * ## Create a standard transaction ("force" in dApp)
 *
 * - {@link TxCreator.tx}: force a Colony transaction, knowing you have the permissions to do so
 *
 * Learn more about these functions in their individual documentation
 */
export class TxCreator {
    contract;
    config;
    method;
    args;
    eventData;
    txConfig;
    constructor({ contract, config, method, args, eventData, txConfig, }) {
        this.config = config;
        this.contract = contract;
        this.method = method;
        this.args = args;
        this.eventData = eventData;
        this.txConfig = txConfig;
    }
    async getArgs(overrides) {
        let args = [];
        if (typeof this.args == 'function') {
            args = await this.args();
        }
        else {
            args = this.args;
        }
        if (overrides) {
            args.push(overrides);
        }
        return args;
    }
    async getTx(overrides) {
        const args = await this.getArgs(overrides);
        const tx = (await this.contract.functions[this.method].apply(this.contract, args));
        return tx;
    }
    async getMined(tx) {
        const receipt = await tx.wait();
        return this.getEventData(receipt);
    }
    async getEventData(receipt) {
        if (this.eventData) {
            const data = await this.eventData(receipt);
            if (this.txConfig?.metadataType && data.metadata) {
                const getMetadata = this.config.ipfs.getMetadataForEvent.bind(this.config.ipfs, IpfsMetadataEvents[this.txConfig.metadataType], data.metadata);
                return [data, receipt, getMetadata];
            }
            return [data, receipt];
        }
        return [{}, receipt];
    }
    async broadcastMetaTx(broadcastData) {
        const { provider } = this.config.getSigner();
        if (!provider) {
            throw new Error('No provider found');
        }
        const res = await fetch(`${this.config.metaTxBroadcasterEndpoint}/broadcast`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(broadcastData),
        });
        const parsed = await res.json();
        if (parsed.status !== 'success') {
            throw new Error(`Could not send Metatransaction. Reason given: ${parsed.data.reason}`);
        }
        if (!parsed.data?.txHash) {
            throw new Error('Could not get transaction hash from broadcaster response');
        }
        return provider.getTransaction(parsed.data.txHash);
    }
    async waitForMetaTx(tx) {
        const receipt = (await tx.wait());
        receipt.parsedLogs = parseLogs(receipt.logs, this.contract.interface);
        return receipt;
    }
    /**
     * Create a standard transaction ("force" in dApp)
     *
     * See also {@link ColonyTransaction} or https://docs.colony.io/colonysdk/guides/transactions for more information
     *
     * @remarks The user sending this transaction has to have the appropriate permissions to do so. Learn more about permissions in Colony [here](/develop/dev-learning/permissions).
     *
     * @returns A transaction that can be `send`, `mined` or `encode`d.
     */
    tx() {
        return {
            send: async (overrides) => {
                const tx = await this.getTx(overrides);
                return [tx, this.getMined.bind(this, tx)];
            },
            mined: async (overrides) => {
                const tx = await this.getTx(overrides);
                return this.getMined(tx);
            },
            encode: async () => {
                const args = await this.getArgs();
                return this.contract.interface.encodeFunctionData(this.method, args);
            },
        };
    }
}
