import { utils } from 'ethers';
import { Network } from '@colony/core';
import { TxCreator, } from './TxCreator.js';
const { arrayify, solidityKeccak256, splitSignature } = utils;
/**
 * An umbrella API for all kinds of transactions
 *
 * The `MetaTxCreator` allows for a simple API to cover all the different cases of transactions within the Colony Network. The `MetaTxCreator` supports sending a standard transaction ({@link MetaTxCreator.tx}) as well as metatransactions ({@link MetaTxCreator.metaTx}).
 *
 * ## Create a standard transaction ("force" in dApp)
 *
 * - {@link MetaTxCreator.tx}: force a Colony transaction, knowing you have the permissions to do so
 * - {@link MetaTxCreator.metaTx}: same as `tx()`, but send as a gasless metatransaction
 *
 * Learn more about these functions in their individual documentation
 */
export class MetaTxCreator extends TxCreator {
    async sendMetaTransaction(encodedTransaction, target) {
        if (!this.config.metaTxBroadcasterEndpoint) {
            throw new Error(`No metatransaction broadcaster endpoint found for network ${this.config.network}`);
        }
        const signer = this.config.getSigner();
        const { provider } = signer;
        if (!provider) {
            throw new Error('No provider found');
        }
        let chainId;
        if (this.config.network === Network.Custom) {
            chainId = 1;
        }
        else {
            const networkInfo = await provider.getNetwork();
            chainId = networkInfo.chainId;
        }
        const userAddress = await signer.getAddress();
        const nonce = await this.contract.functions.getMetatransactionNonce(userAddress);
        const message = solidityKeccak256(['uint256', 'address', 'uint256', 'bytes'], [nonce.toString(), target, chainId, encodedTransaction]);
        const buf = arrayify(message);
        const signature = await signer.signMessage(buf);
        const { r, s, v } = splitSignature(signature);
        const broadcastData = {
            target,
            payload: encodedTransaction,
            userAddress,
            r,
            s,
            v,
        };
        return this.broadcastMetaTx(broadcastData);
    }
    async getMetaTx() {
        const args = await this.getArgs();
        const encodedTransaction = this.contract.interface.encodeFunctionData(this.method, args);
        return this.sendMetaTransaction(encodedTransaction, this.contract.address);
    }
    async getMetaMined(tx) {
        const receipt = await this.waitForMetaTx(tx);
        return this.getEventData(receipt);
    }
    /**
     * Create a gasless MetaTransaction ("force" in dApp)
     *
     * After creation, you can then `send` the transaction or wait for it to be `mined`.
     * See also {@link TxCreator.tx} and https://docs.colony.io/colonysdk/guides/transactions for more information
     *
     * @remarks The user sending this transaction has to have the appropriate permissions to do so. Learn more about permissions in Colony [here](/develop/dev-learning/permissions).
     *
     * @returns A transaction that can be `send` or `mined`.
     */
    metaTx() {
        return {
            send: async () => {
                const tx = await this.getMetaTx();
                return [tx, this.getMetaMined.bind(this, tx)];
            },
            mined: async () => {
                const tx = await this.getMetaTx();
                return this.getMetaMined(tx);
            },
        };
    }
}
