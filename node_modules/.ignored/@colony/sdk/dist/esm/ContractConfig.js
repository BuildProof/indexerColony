import { Network, MetaTxBroadCasterEndpoint, ReputationOracleEndpoint, } from '@colony/core';
import { IpfsMetadata } from '@colony/events';
import { Signer } from 'ethers';
/**
 * @internal
 * Used to store auxiliare contract information and helpers
 */
export class ContractConfig {
    /** The IPFS adapter for Metadata. Defaults to a read-only adapter */
    ipfs;
    metaTxBroadcasterEndpoint;
    /** The network the client is connected to. Defaults to Arbitrum One */
    network;
    /** A custom endpoiunt for ColonyNetwork's Reputation Oracle. Useful only in manual deployments */
    reputationOracleEndpoint;
    /**
     * An ethers.js [Signer](https://docs.ethers.org/v5/api/signer/#Signer) or [Provider](https://docs.ethers.org/v5/api/providers/).
     *
     * E.g. a [Wallet](https://docs.ethers.org/v5/api/signer/#Wallet) or a [Web3Provider](https://docs.ethers.org/v5/api/providers/other/#Web3Provider) (MetaMask)
     */
    signerOrProvider;
    constructor(signerOrProvider, options) {
        const network = options?.network || Network.ArbitrumOne;
        // TODO: for validation: if network is Custom, metaTxBroadcaster and reputationOracleEndpoint have to be set
        this.metaTxBroadcasterEndpoint =
            options?.metaTxBroadcasterEndpoint || MetaTxBroadCasterEndpoint[network];
        this.ipfs = new IpfsMetadata(options?.ipfsAdapter);
        this.network = network;
        this.reputationOracleEndpoint =
            options?.reputationOracleEndpoint || ReputationOracleEndpoint[network];
        this.signerOrProvider = signerOrProvider;
    }
    /**
     * Get the signer that was provided when the ColonyNetwork was instantiated.
     * Throws if the Signer is only a (read-only) Provider
     *
     * @returns An Ethers.js compatible Signer instance
     */
    getSigner() {
        if (!(this.signerOrProvider instanceof Signer)) {
            throw new Error('Need a signer to create a transaction');
        }
        return this.signerOrProvider;
    }
}
