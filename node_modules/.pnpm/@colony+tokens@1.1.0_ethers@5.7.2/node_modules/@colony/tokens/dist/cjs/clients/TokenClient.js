"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const constants_js_1 = require("../constants.js");
const index_js_1 = require("../contracts/index.js");
const index_js_2 = require("../contracts/static/index.js");
const { AddressZero } = ethers_1.constants;
function checkTokenAuthorityCompatibility(tokenClient) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield tokenClient.authority();
        }
        catch (e) {
            throw new Error('Token can not be assigned a TokenAuthority');
        }
    });
}
const getTokenClient = (address, signerOrProvider) => __awaiter(void 0, void 0, void 0, function* () {
    let tokenClient;
    let isColonyToken = true;
    let isEip2612Token = true;
    tokenClient = index_js_1.MetaTxToken__factory.connect(address, signerOrProvider);
    try {
        yield tokenClient.totalSupply();
    }
    catch (err) {
        throw new Error(`Token is probably not a valid ERC20 token, got ${err.message}`);
    }
    // Colony tokens have the `locked()` and `authority()` methods. We assume that when it exists on
    // the contract we have a ColonyToken ðŸ¦†. This might not be true though, so can't rely
    // on this 100% when trying to call contract methods
    try {
        yield tokenClient.locked();
        yield checkTokenAuthorityCompatibility(tokenClient);
    }
    catch (_a) {
        isColonyToken = false;
    }
    try {
        // NOTE: Casting will be unnecessary when MetaTxToken supports "nonces"
        yield tokenClient.nonces(AddressZero);
    }
    catch (_b) {
        isEip2612Token = false;
    }
    // NOTE: The following is horrible. But that's just how things are with tokens rn.
    if (isColonyToken) {
        tokenClient.tokenClientType = constants_js_1.TokenClientType.Colony;
    }
    else if (isEip2612Token) {
        tokenClient = index_js_2.TokenERC2612__factory.connect(address, signerOrProvider);
        tokenClient.tokenClientType = constants_js_1.TokenClientType.Erc2612;
    }
    else {
        tokenClient = index_js_2.TokenERC20__factory.connect(address, signerOrProvider);
        tokenClient.tokenClientType = constants_js_1.TokenClientType.Erc20;
    }
    tokenClient.clientType = constants_js_1.ClientType.TokenClient;
    return tokenClient;
});
exports.default = getTokenClient;
