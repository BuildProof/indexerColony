import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common.js";
export interface ColonyExtensionEventsInterface extends utils.Interface {
    functions: {};
    events: {
        "ExtensionInitialised()": EventFragment;
        "LogSetAuthority(address)": EventFragment;
        "LogSetOwner(address)": EventFragment;
        "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionInitialised()"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogSetAuthority(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogSetOwner(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted(address,address,bytes)"): EventFragment;
}
export interface ExtensionInitialisedEventObject {
}
export type ExtensionInitialisedEvent = TypedEvent<[
], ExtensionInitialisedEventObject>;
export type ExtensionInitialisedEventFilter = TypedEventFilter<ExtensionInitialisedEvent>;
export interface LogSetAuthorityEventObject {
    authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<[
    string
], LogSetAuthorityEventObject>;
export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;
export interface LogSetOwnerEventObject {
    owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;
export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;
export interface MetaTransactionExecutedEventObject {
    userAddress: string;
    relayerAddress: string;
    payload: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<[
    string,
    string,
    string
], MetaTransactionExecutedEventObject>;
export type MetaTransactionExecutedEventFilter = TypedEventFilter<MetaTransactionExecutedEvent>;
export interface ColonyExtensionEvents extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ColonyExtensionEventsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {
        "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
        ExtensionInitialised(): ExtensionInitialisedEventFilter;
        "LogSetAuthority(address)"(authority?: string | null): LogSetAuthorityEventFilter;
        LogSetAuthority(authority?: string | null): LogSetAuthorityEventFilter;
        "LogSetOwner(address)"(owner?: string | null): LogSetOwnerEventFilter;
        LogSetOwner(owner?: string | null): LogSetOwnerEventFilter;
        "MetaTransactionExecuted(address,address,bytes)"(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
        MetaTransactionExecuted(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
    };
    estimateGas: {};
    populateTransaction: {};
}
