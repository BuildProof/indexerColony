"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpfsMetadata = exports.IpfsMetadataEvents = void 0;
const fetch_retry_1 = __importDefault(require("fetch-retry"));
const metadata_js_1 = require("./metadata.js");
const CloudflareReadonlyAdapter_js_1 = __importDefault(require("./CloudflareReadonlyAdapter.js"));
const constants_js_1 = require("./constants.js");
const fetchRetry = (0, fetch_retry_1.default)(fetch, {
    headers: {
        Accept: 'application/json',
    },
    retryOn: [404, 503],
    retries: 3,
    retryDelay: 5000,
});
exports.IpfsMetadataEvents = {
    [constants_js_1.MetadataType.Annotation]: 'Annotation(address,bytes32,string)',
    [constants_js_1.MetadataType.Colony]: 'ColonyMetadata(address,string)',
    [constants_js_1.MetadataType.Decision]: 'Annotation(address,bytes32,string)',
    [constants_js_1.MetadataType.Domain]: 'DomainMetadata(address,uint256,string)',
    [constants_js_1.MetadataType.Misc]: '',
    [constants_js_1.MetadataType.DEFAULT]: '',
};
/**
 * IpfsMetadata
 *
 * This is part of the {@link ColonyNetwork} and {@link ColonyEventManager} classes and not to be meant to instantiated directly.
 * You can find an instance of this under `colonyNetwork.ipfs` or `eventManager.ipfs`
 *
 */
class IpfsMetadata {
    constructor(adapter) {
        this.adapter = adapter || new CloudflareReadonlyAdapter_js_1.default();
    }
    static eventSupportsMetadata(eventName) {
        if (Object.keys(exports.IpfsMetadataEvents).includes(eventName)) {
            return true;
        }
        return false;
    }
    getMetadata(cid, type) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.adapter.getIpfsUrl(cid);
            const res = yield fetchRetry(url);
            const data = yield res.json();
            return (0, metadata_js_1.parseEventMetadata)(data, type);
        });
    }
    getMetadataForEvent(eventName, cid) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.adapter.getIpfsUrl(cid);
            const res = yield fetchRetry(url);
            const data = yield res.json();
            const entry = Object.entries(exports.IpfsMetadataEvents).find(([, value]) => value === eventName);
            if (!entry) {
                throw new Error(`Not a valid MetadataEvent: ${eventName}`);
            }
            const metadataType = entry[0];
            return (0, metadata_js_1.parseEventMetadata)(data, metadataType);
        });
    }
    getRawMetadata(cid) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.adapter.getIpfsUrl(cid);
            const res = yield fetchRetry(url);
            try {
                const json = yield res.json();
                return json;
            }
            catch (e) {
                throw new Error(`Could not parse IPFS metadata. Original error: ${e.message}`);
            }
        });
    }
    uploadMetadata(type, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = (0, metadata_js_1.createMetadataFor)(type, input);
            const str = JSON.stringify(data);
            return this.adapter.uploadJson(str);
        });
    }
}
exports.IpfsMetadata = IpfsMetadata;
