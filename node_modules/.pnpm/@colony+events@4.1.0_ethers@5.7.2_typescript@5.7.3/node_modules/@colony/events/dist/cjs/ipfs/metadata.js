"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMetadataFor = exports.getEventMetadataVersion = exports.parseEventMetadata = void 0;
const typia_1 = __importDefault(require("typia"));
const constants_js_1 = require("./constants.js");
const createError = (errors) => {
    const errorsAsText = errors.map((error) => `Error in ${error.path}. Seen: ${error.value}, expected: ${error.expected}`);
    return `Validation error(s):\n${errorsAsText.join('\n')}`;
};
const createColonyMetadata = (data) => {
    return Object.assign(Object.assign({}, data), { isWhitelistActivated: data.isWhitelistActivated || false, colonySafes: data.colonySafes || [], colonyTokens: data.colonyTokens || [], verifiedAddresses: data.verifiedAddresses || [] });
};
/**
 * Parses and validates event metadata
 *
 * This will check the validity of an event metadata object.
 * You can pass in an optional type if you know what to expect.
 * It will also do a data version check.
 *
 * If you don't know what the output will be you can use TypeScript's
 * Discriminated Unions to guard the correct types (see example).
 *
 * @example
 * ```typescript
 * import { parseEventMetadata, MetadataType } from '@colony/event-metadata';
 *
 * // Get `input` from IPFS or other sources.
 *
 * const result = parseEventMetadata(input);
 *
 * if (result.type === MetadataType.Domain) {
 *   // Type is DomainMetadata
 *   console.log(result.data.domainName);
 * }
 * ```
 *
 * @param input - JavaScript object (parsed, from IPFS)
 * @param type - Optional MetadataType to check against
 *
 * @returns The validated Metadata.
 */
const parseEventMetadata = (input, type) => {
    const res = (input => {
        const __is = input => {
            const $io0 = input => "colony" === input.name && ("object" === typeof input.data && null !== input.data && $io1(input.data)) && "number" === typeof input.version;
            const $io1 = input => "string" === typeof input.colonyName && (undefined === input.colonyDisplayName || "string" === typeof input.colonyDisplayName) && (undefined === input.colonyAvatarHash || "string" === typeof input.colonyAvatarHash) && (undefined === input.colonyTokens || Array.isArray(input.colonyTokens) && input.colonyTokens.every(elem => "string" === typeof elem)) && (undefined === input.verifiedAddresses || Array.isArray(input.verifiedAddresses) && input.verifiedAddresses.every(elem => "string" === typeof elem)) && (undefined === input.isWhitelistActivated || "boolean" === typeof input.isWhitelistActivated) && (undefined === input.colonySafes || Array.isArray(input.colonySafes) && input.colonySafes.every(elem => "object" === typeof elem && null !== elem && $io2(elem)));
            const $io2 = input => "string" === typeof input.chainId && "string" === typeof input.contractAddress && "string" === typeof input.moduleContractAddress && "string" === typeof input.safeName;
            const $io3 = input => "domain" === input.name && ("object" === typeof input.data && null !== input.data && false === Array.isArray(input.data) && $io4(input.data)) && "number" === typeof input.version;
            const $io4 = input => (undefined === input.domainName || "string" === typeof input.domainName) && (undefined === input.domainColor || 0 === input.domainColor || 1 === input.domainColor || 2 === input.domainColor || 3 === input.domainColor || 4 === input.domainColor || 5 === input.domainColor || 6 === input.domainColor || 7 === input.domainColor || 8 === input.domainColor || 9 === input.domainColor || 10 === input.domainColor || 11 === input.domainColor || 12 === input.domainColor || 13 === input.domainColor || 14 === input.domainColor || 15 === input.domainColor) && (undefined === input.domainPurpose || "string" === typeof input.domainPurpose);
            const $io5 = input => "annotation" === input.name && ("object" === typeof input.data && null !== input.data && "string" === typeof input.data.annotationMsg) && "number" === typeof input.version;
            const $io7 = input => "decision" === input.name && ("object" === typeof input.data && null !== input.data && $io8(input.data)) && "number" === typeof input.version;
            const $io8 = input => "string" === typeof input.title && (undefined === input.description || "string" === typeof input.description) && "number" === typeof input.motionDomainId;
            const $io9 = input => "misc" === input.name && ("object" === typeof input.data && null !== input.data && ("string" === typeof input.data.name && "string" === typeof input.data.value)) && "number" === typeof input.version;
            const $iu0 = input => (() => {
                if ("colony" === input.name)
                    return $io0(input);
                if ("domain" === input.name)
                    return $io3(input);
                if ("annotation" === input.name)
                    return $io5(input);
                if ("decision" === input.name)
                    return $io7(input);
                if ("misc" === input.name)
                    return $io9(input);
                return false;
            })();
            return "object" === typeof input && null !== input && $iu0(input);
        };
        const errors = [];
        const $report = typia_1.default.validate.report(errors);
        if (false === __is(input))
            ((input, _path, _exceptionable = true) => {
                const $vo0 = (input, _path, _exceptionable = true) => ["colony" === input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "\"colony\"",
                        value: input.name
                    }), ("object" === typeof input.data && null !== input.data || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "ColonyData",
                        value: input.data
                    })) && $vo1(input.data, _path + ".data", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "ColonyData",
                        value: input.data
                    }), "number" === typeof input.version || $report(_exceptionable, {
                        path: _path + ".version",
                        expected: "number",
                        value: input.version
                    })].every(flag => flag);
                const $vo1 = (input, _path, _exceptionable = true) => ["string" === typeof input.colonyName || $report(_exceptionable, {
                        path: _path + ".colonyName",
                        expected: "string",
                        value: input.colonyName
                    }), undefined === input.colonyDisplayName || "string" === typeof input.colonyDisplayName || $report(_exceptionable, {
                        path: _path + ".colonyDisplayName",
                        expected: "(string | undefined)",
                        value: input.colonyDisplayName
                    }), undefined === input.colonyAvatarHash || "string" === typeof input.colonyAvatarHash || $report(_exceptionable, {
                        path: _path + ".colonyAvatarHash",
                        expected: "(string | undefined)",
                        value: input.colonyAvatarHash
                    }), undefined === input.colonyTokens || (Array.isArray(input.colonyTokens) || $report(_exceptionable, {
                        path: _path + ".colonyTokens",
                        expected: "(Array<string> | undefined)",
                        value: input.colonyTokens
                    })) && input.colonyTokens.map((elem, _index1) => "string" === typeof elem || $report(_exceptionable, {
                        path: _path + ".colonyTokens[" + _index1 + "]",
                        expected: "string",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".colonyTokens",
                        expected: "(Array<string> | undefined)",
                        value: input.colonyTokens
                    }), undefined === input.verifiedAddresses || (Array.isArray(input.verifiedAddresses) || $report(_exceptionable, {
                        path: _path + ".verifiedAddresses",
                        expected: "(Array<string> | undefined)",
                        value: input.verifiedAddresses
                    })) && input.verifiedAddresses.map((elem, _index2) => "string" === typeof elem || $report(_exceptionable, {
                        path: _path + ".verifiedAddresses[" + _index2 + "]",
                        expected: "string",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".verifiedAddresses",
                        expected: "(Array<string> | undefined)",
                        value: input.verifiedAddresses
                    }), undefined === input.isWhitelistActivated || "boolean" === typeof input.isWhitelistActivated || $report(_exceptionable, {
                        path: _path + ".isWhitelistActivated",
                        expected: "(boolean | undefined)",
                        value: input.isWhitelistActivated
                    }), undefined === input.colonySafes || (Array.isArray(input.colonySafes) || $report(_exceptionable, {
                        path: _path + ".colonySafes",
                        expected: "(Array<SafeInfo> | undefined)",
                        value: input.colonySafes
                    })) && input.colonySafes.map((elem, _index3) => ("object" === typeof elem && null !== elem || $report(_exceptionable, {
                        path: _path + ".colonySafes[" + _index3 + "]",
                        expected: "SafeInfo",
                        value: elem
                    })) && $vo2(elem, _path + ".colonySafes[" + _index3 + "]", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".colonySafes[" + _index3 + "]",
                        expected: "SafeInfo",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".colonySafes",
                        expected: "(Array<SafeInfo> | undefined)",
                        value: input.colonySafes
                    })].every(flag => flag);
                const $vo2 = (input, _path, _exceptionable = true) => ["string" === typeof input.chainId || $report(_exceptionable, {
                        path: _path + ".chainId",
                        expected: "string",
                        value: input.chainId
                    }), "string" === typeof input.contractAddress || $report(_exceptionable, {
                        path: _path + ".contractAddress",
                        expected: "string",
                        value: input.contractAddress
                    }), "string" === typeof input.moduleContractAddress || $report(_exceptionable, {
                        path: _path + ".moduleContractAddress",
                        expected: "string",
                        value: input.moduleContractAddress
                    }), "string" === typeof input.safeName || $report(_exceptionable, {
                        path: _path + ".safeName",
                        expected: "string",
                        value: input.safeName
                    })].every(flag => flag);
                const $vo3 = (input, _path, _exceptionable = true) => ["domain" === input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "\"domain\"",
                        value: input.name
                    }), ("object" === typeof input.data && null !== input.data && false === Array.isArray(input.data) || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "DomainData",
                        value: input.data
                    })) && $vo4(input.data, _path + ".data", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "DomainData",
                        value: input.data
                    }), "number" === typeof input.version || $report(_exceptionable, {
                        path: _path + ".version",
                        expected: "number",
                        value: input.version
                    })].every(flag => flag);
                const $vo4 = (input, _path, _exceptionable = true) => [undefined === input.domainName || "string" === typeof input.domainName || $report(_exceptionable, {
                        path: _path + ".domainName",
                        expected: "(string | undefined)",
                        value: input.domainName
                    }), undefined === input.domainColor || 0 === input.domainColor || 1 === input.domainColor || 2 === input.domainColor || 3 === input.domainColor || 4 === input.domainColor || 5 === input.domainColor || 6 === input.domainColor || 7 === input.domainColor || 8 === input.domainColor || 9 === input.domainColor || 10 === input.domainColor || 11 === input.domainColor || 12 === input.domainColor || 13 === input.domainColor || 14 === input.domainColor || 15 === input.domainColor || $report(_exceptionable, {
                        path: _path + ".domainColor",
                        expected: "(0 | 1 | 10 | 11 | 12 | 13 | 14 | 15 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined)",
                        value: input.domainColor
                    }), undefined === input.domainPurpose || "string" === typeof input.domainPurpose || $report(_exceptionable, {
                        path: _path + ".domainPurpose",
                        expected: "(string | undefined)",
                        value: input.domainPurpose
                    })].every(flag => flag);
                const $vo5 = (input, _path, _exceptionable = true) => ["annotation" === input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "\"annotation\"",
                        value: input.name
                    }), ("object" === typeof input.data && null !== input.data || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "AnnotationData",
                        value: input.data
                    })) && $vo6(input.data, _path + ".data", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "AnnotationData",
                        value: input.data
                    }), "number" === typeof input.version || $report(_exceptionable, {
                        path: _path + ".version",
                        expected: "number",
                        value: input.version
                    })].every(flag => flag);
                const $vo6 = (input, _path, _exceptionable = true) => ["string" === typeof input.annotationMsg || $report(_exceptionable, {
                        path: _path + ".annotationMsg",
                        expected: "string",
                        value: input.annotationMsg
                    })].every(flag => flag);
                const $vo7 = (input, _path, _exceptionable = true) => ["decision" === input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "\"decision\"",
                        value: input.name
                    }), ("object" === typeof input.data && null !== input.data || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "DecisionData",
                        value: input.data
                    })) && $vo8(input.data, _path + ".data", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "DecisionData",
                        value: input.data
                    }), "number" === typeof input.version || $report(_exceptionable, {
                        path: _path + ".version",
                        expected: "number",
                        value: input.version
                    })].every(flag => flag);
                const $vo8 = (input, _path, _exceptionable = true) => ["string" === typeof input.title || $report(_exceptionable, {
                        path: _path + ".title",
                        expected: "string",
                        value: input.title
                    }), undefined === input.description || "string" === typeof input.description || $report(_exceptionable, {
                        path: _path + ".description",
                        expected: "(string | undefined)",
                        value: input.description
                    }), "number" === typeof input.motionDomainId || $report(_exceptionable, {
                        path: _path + ".motionDomainId",
                        expected: "number",
                        value: input.motionDomainId
                    })].every(flag => flag);
                const $vo9 = (input, _path, _exceptionable = true) => ["misc" === input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "\"misc\"",
                        value: input.name
                    }), ("object" === typeof input.data && null !== input.data || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "MiscData",
                        value: input.data
                    })) && $vo10(input.data, _path + ".data", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "MiscData",
                        value: input.data
                    }), "number" === typeof input.version || $report(_exceptionable, {
                        path: _path + ".version",
                        expected: "number",
                        value: input.version
                    })].every(flag => flag);
                const $vo10 = (input, _path, _exceptionable = true) => ["string" === typeof input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "string",
                        value: input.name
                    }), "string" === typeof input.value || $report(_exceptionable, {
                        path: _path + ".value",
                        expected: "string",
                        value: input.value
                    })].every(flag => flag);
                const $vu0 = (input, _path, _exceptionable = true) => (() => {
                    if ("colony" === input.name)
                        return $vo0(input, _path, true && _exceptionable);
                    if ("domain" === input.name)
                        return $vo3(input, _path, true && _exceptionable);
                    if ("annotation" === input.name)
                        return $vo5(input, _path, true && _exceptionable);
                    if ("decision" === input.name)
                        return $vo7(input, _path, true && _exceptionable);
                    if ("misc" === input.name)
                        return $vo9(input, _path, true && _exceptionable);
                    return $report(_exceptionable, {
                        path: _path,
                        expected: "(ColonyMetadata | DomainMetadata | AnnotationMetadata | DecisionMetadata | MiscMetadata)",
                        value: input
                    });
                })();
                return ("object" === typeof input && null !== input || $report(true, {
                    path: _path + "",
                    expected: "(AnnotationMetadata | ColonyMetadata | DecisionMetadata | DomainMetadata | MiscMetadata)",
                    value: input
                })) && $vu0(input, _path + "", true) || $report(true, {
                    path: _path + "",
                    expected: "(AnnotationMetadata | ColonyMetadata | DecisionMetadata | DomainMetadata | MiscMetadata)",
                    value: input
                });
            })(input, "$input", true);
        const success = 0 === errors.length;
        return {
            success,
            errors,
            data: success ? input : undefined
        };
    })(input);
    if (res.success) {
        // @TODO decide how to handle versions in the future
        if (res.data.version !== constants_js_1.METADATA_VERSION) {
            throw new Error(`Invalid metadata version: ${res.data.version}`);
        }
        if (type && type !== res.data.name) {
            throw new Error(`Wrong Metadata type. Given ${type}, got ${res.data.name}`);
        }
        if (res.data.name === constants_js_1.MetadataType.Colony) {
            res.data.data = Object.assign(Object.assign({}, res.data.data), { colonyTokens: res.data.data.colonyTokens || [], verifiedAddresses: res.data.data.verifiedAddresses || [], colonySafes: res.data.data.colonySafes || [] });
        }
        return res.data;
    }
    const error = createError(res.errors);
    throw new Error(error);
};
exports.parseEventMetadata = parseEventMetadata;
/**
 * Get the version of a Metadata object
 *
 * Defaults to 1.
 *
 * @param input - JavaScript object (parsed, from IPFS)
 *
 * @returns The version number of the metadata
 */
const getEventMetadataVersion = (input) => {
    const parsed = (0, exports.parseEventMetadata)(input);
    return parsed.version || 1;
};
exports.getEventMetadataVersion = getEventMetadataVersion;
/**
 * Create a valid Metadata object.
 *
 * Validates the input.
 *
 * @example
 * ```typescript
 * import { createMetadataFor, MetadataType } from '@colony/event-metadata';
 *
 * const result = createMetadataFor(MetadataType.Domain, {
 *   domainName: 'Cool team',
 * });
 *
 * console.log(result.version); // 2
 * console.log(result.name); // 'domain'
 * console.log(result.data.domainName); // 'Cool team'
 * ```
 *
 * @param type - The metadata type
 * @param data - The actual data for the generated metadata object
 *
 * @returns The version number of the metadata
 */
const createMetadataFor = (type, data) => {
    const result = type === constants_js_1.MetadataType.Colony
        ? createColonyMetadata(data)
        : data;
    const res = (input => {
        const __is = input => {
            const $io0 = input => "colony" === input.name && ("object" === typeof input.data && null !== input.data && $io1(input.data)) && "number" === typeof input.version;
            const $io1 = input => "string" === typeof input.colonyName && (undefined === input.colonyDisplayName || "string" === typeof input.colonyDisplayName) && (undefined === input.colonyAvatarHash || "string" === typeof input.colonyAvatarHash) && (undefined === input.colonyTokens || Array.isArray(input.colonyTokens) && input.colonyTokens.every(elem => "string" === typeof elem)) && (undefined === input.verifiedAddresses || Array.isArray(input.verifiedAddresses) && input.verifiedAddresses.every(elem => "string" === typeof elem)) && (undefined === input.isWhitelistActivated || "boolean" === typeof input.isWhitelistActivated) && (undefined === input.colonySafes || Array.isArray(input.colonySafes) && input.colonySafes.every(elem => "object" === typeof elem && null !== elem && $io2(elem)));
            const $io2 = input => "string" === typeof input.chainId && "string" === typeof input.contractAddress && "string" === typeof input.moduleContractAddress && "string" === typeof input.safeName;
            const $io3 = input => "domain" === input.name && ("object" === typeof input.data && null !== input.data && false === Array.isArray(input.data) && $io4(input.data)) && "number" === typeof input.version;
            const $io4 = input => (undefined === input.domainName || "string" === typeof input.domainName) && (undefined === input.domainColor || 0 === input.domainColor || 1 === input.domainColor || 2 === input.domainColor || 3 === input.domainColor || 4 === input.domainColor || 5 === input.domainColor || 6 === input.domainColor || 7 === input.domainColor || 8 === input.domainColor || 9 === input.domainColor || 10 === input.domainColor || 11 === input.domainColor || 12 === input.domainColor || 13 === input.domainColor || 14 === input.domainColor || 15 === input.domainColor) && (undefined === input.domainPurpose || "string" === typeof input.domainPurpose);
            const $io5 = input => "annotation" === input.name && ("object" === typeof input.data && null !== input.data && "string" === typeof input.data.annotationMsg) && "number" === typeof input.version;
            const $io7 = input => "decision" === input.name && ("object" === typeof input.data && null !== input.data && $io8(input.data)) && "number" === typeof input.version;
            const $io8 = input => "string" === typeof input.title && (undefined === input.description || "string" === typeof input.description) && "number" === typeof input.motionDomainId;
            const $io9 = input => "misc" === input.name && ("object" === typeof input.data && null !== input.data && ("string" === typeof input.data.name && "string" === typeof input.data.value)) && "number" === typeof input.version;
            const $iu0 = input => (() => {
                if ("colony" === input.name)
                    return $io0(input);
                if ("domain" === input.name)
                    return $io3(input);
                if ("annotation" === input.name)
                    return $io5(input);
                if ("decision" === input.name)
                    return $io7(input);
                if ("misc" === input.name)
                    return $io9(input);
                return false;
            })();
            return "object" === typeof input && null !== input && $iu0(input);
        };
        const errors = [];
        const $report = typia_1.default.validate.report(errors);
        if (false === __is(input))
            ((input, _path, _exceptionable = true) => {
                const $vo0 = (input, _path, _exceptionable = true) => ["colony" === input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "\"colony\"",
                        value: input.name
                    }), ("object" === typeof input.data && null !== input.data || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "ColonyData",
                        value: input.data
                    })) && $vo1(input.data, _path + ".data", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "ColonyData",
                        value: input.data
                    }), "number" === typeof input.version || $report(_exceptionable, {
                        path: _path + ".version",
                        expected: "number",
                        value: input.version
                    })].every(flag => flag);
                const $vo1 = (input, _path, _exceptionable = true) => ["string" === typeof input.colonyName || $report(_exceptionable, {
                        path: _path + ".colonyName",
                        expected: "string",
                        value: input.colonyName
                    }), undefined === input.colonyDisplayName || "string" === typeof input.colonyDisplayName || $report(_exceptionable, {
                        path: _path + ".colonyDisplayName",
                        expected: "(string | undefined)",
                        value: input.colonyDisplayName
                    }), undefined === input.colonyAvatarHash || "string" === typeof input.colonyAvatarHash || $report(_exceptionable, {
                        path: _path + ".colonyAvatarHash",
                        expected: "(string | undefined)",
                        value: input.colonyAvatarHash
                    }), undefined === input.colonyTokens || (Array.isArray(input.colonyTokens) || $report(_exceptionable, {
                        path: _path + ".colonyTokens",
                        expected: "(Array<string> | undefined)",
                        value: input.colonyTokens
                    })) && input.colonyTokens.map((elem, _index1) => "string" === typeof elem || $report(_exceptionable, {
                        path: _path + ".colonyTokens[" + _index1 + "]",
                        expected: "string",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".colonyTokens",
                        expected: "(Array<string> | undefined)",
                        value: input.colonyTokens
                    }), undefined === input.verifiedAddresses || (Array.isArray(input.verifiedAddresses) || $report(_exceptionable, {
                        path: _path + ".verifiedAddresses",
                        expected: "(Array<string> | undefined)",
                        value: input.verifiedAddresses
                    })) && input.verifiedAddresses.map((elem, _index2) => "string" === typeof elem || $report(_exceptionable, {
                        path: _path + ".verifiedAddresses[" + _index2 + "]",
                        expected: "string",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".verifiedAddresses",
                        expected: "(Array<string> | undefined)",
                        value: input.verifiedAddresses
                    }), undefined === input.isWhitelistActivated || "boolean" === typeof input.isWhitelistActivated || $report(_exceptionable, {
                        path: _path + ".isWhitelistActivated",
                        expected: "(boolean | undefined)",
                        value: input.isWhitelistActivated
                    }), undefined === input.colonySafes || (Array.isArray(input.colonySafes) || $report(_exceptionable, {
                        path: _path + ".colonySafes",
                        expected: "(Array<SafeInfo> | undefined)",
                        value: input.colonySafes
                    })) && input.colonySafes.map((elem, _index3) => ("object" === typeof elem && null !== elem || $report(_exceptionable, {
                        path: _path + ".colonySafes[" + _index3 + "]",
                        expected: "SafeInfo",
                        value: elem
                    })) && $vo2(elem, _path + ".colonySafes[" + _index3 + "]", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".colonySafes[" + _index3 + "]",
                        expected: "SafeInfo",
                        value: elem
                    })).every(flag => flag) || $report(_exceptionable, {
                        path: _path + ".colonySafes",
                        expected: "(Array<SafeInfo> | undefined)",
                        value: input.colonySafes
                    })].every(flag => flag);
                const $vo2 = (input, _path, _exceptionable = true) => ["string" === typeof input.chainId || $report(_exceptionable, {
                        path: _path + ".chainId",
                        expected: "string",
                        value: input.chainId
                    }), "string" === typeof input.contractAddress || $report(_exceptionable, {
                        path: _path + ".contractAddress",
                        expected: "string",
                        value: input.contractAddress
                    }), "string" === typeof input.moduleContractAddress || $report(_exceptionable, {
                        path: _path + ".moduleContractAddress",
                        expected: "string",
                        value: input.moduleContractAddress
                    }), "string" === typeof input.safeName || $report(_exceptionable, {
                        path: _path + ".safeName",
                        expected: "string",
                        value: input.safeName
                    })].every(flag => flag);
                const $vo3 = (input, _path, _exceptionable = true) => ["domain" === input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "\"domain\"",
                        value: input.name
                    }), ("object" === typeof input.data && null !== input.data && false === Array.isArray(input.data) || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "DomainData",
                        value: input.data
                    })) && $vo4(input.data, _path + ".data", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "DomainData",
                        value: input.data
                    }), "number" === typeof input.version || $report(_exceptionable, {
                        path: _path + ".version",
                        expected: "number",
                        value: input.version
                    })].every(flag => flag);
                const $vo4 = (input, _path, _exceptionable = true) => [undefined === input.domainName || "string" === typeof input.domainName || $report(_exceptionable, {
                        path: _path + ".domainName",
                        expected: "(string | undefined)",
                        value: input.domainName
                    }), undefined === input.domainColor || 0 === input.domainColor || 1 === input.domainColor || 2 === input.domainColor || 3 === input.domainColor || 4 === input.domainColor || 5 === input.domainColor || 6 === input.domainColor || 7 === input.domainColor || 8 === input.domainColor || 9 === input.domainColor || 10 === input.domainColor || 11 === input.domainColor || 12 === input.domainColor || 13 === input.domainColor || 14 === input.domainColor || 15 === input.domainColor || $report(_exceptionable, {
                        path: _path + ".domainColor",
                        expected: "(0 | 1 | 10 | 11 | 12 | 13 | 14 | 15 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined)",
                        value: input.domainColor
                    }), undefined === input.domainPurpose || "string" === typeof input.domainPurpose || $report(_exceptionable, {
                        path: _path + ".domainPurpose",
                        expected: "(string | undefined)",
                        value: input.domainPurpose
                    })].every(flag => flag);
                const $vo5 = (input, _path, _exceptionable = true) => ["annotation" === input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "\"annotation\"",
                        value: input.name
                    }), ("object" === typeof input.data && null !== input.data || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "AnnotationData",
                        value: input.data
                    })) && $vo6(input.data, _path + ".data", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "AnnotationData",
                        value: input.data
                    }), "number" === typeof input.version || $report(_exceptionable, {
                        path: _path + ".version",
                        expected: "number",
                        value: input.version
                    })].every(flag => flag);
                const $vo6 = (input, _path, _exceptionable = true) => ["string" === typeof input.annotationMsg || $report(_exceptionable, {
                        path: _path + ".annotationMsg",
                        expected: "string",
                        value: input.annotationMsg
                    })].every(flag => flag);
                const $vo7 = (input, _path, _exceptionable = true) => ["decision" === input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "\"decision\"",
                        value: input.name
                    }), ("object" === typeof input.data && null !== input.data || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "DecisionData",
                        value: input.data
                    })) && $vo8(input.data, _path + ".data", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "DecisionData",
                        value: input.data
                    }), "number" === typeof input.version || $report(_exceptionable, {
                        path: _path + ".version",
                        expected: "number",
                        value: input.version
                    })].every(flag => flag);
                const $vo8 = (input, _path, _exceptionable = true) => ["string" === typeof input.title || $report(_exceptionable, {
                        path: _path + ".title",
                        expected: "string",
                        value: input.title
                    }), undefined === input.description || "string" === typeof input.description || $report(_exceptionable, {
                        path: _path + ".description",
                        expected: "(string | undefined)",
                        value: input.description
                    }), "number" === typeof input.motionDomainId || $report(_exceptionable, {
                        path: _path + ".motionDomainId",
                        expected: "number",
                        value: input.motionDomainId
                    })].every(flag => flag);
                const $vo9 = (input, _path, _exceptionable = true) => ["misc" === input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "\"misc\"",
                        value: input.name
                    }), ("object" === typeof input.data && null !== input.data || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "MiscData",
                        value: input.data
                    })) && $vo10(input.data, _path + ".data", true && _exceptionable) || $report(_exceptionable, {
                        path: _path + ".data",
                        expected: "MiscData",
                        value: input.data
                    }), "number" === typeof input.version || $report(_exceptionable, {
                        path: _path + ".version",
                        expected: "number",
                        value: input.version
                    })].every(flag => flag);
                const $vo10 = (input, _path, _exceptionable = true) => ["string" === typeof input.name || $report(_exceptionable, {
                        path: _path + ".name",
                        expected: "string",
                        value: input.name
                    }), "string" === typeof input.value || $report(_exceptionable, {
                        path: _path + ".value",
                        expected: "string",
                        value: input.value
                    })].every(flag => flag);
                const $vu0 = (input, _path, _exceptionable = true) => (() => {
                    if ("colony" === input.name)
                        return $vo0(input, _path, true && _exceptionable);
                    if ("domain" === input.name)
                        return $vo3(input, _path, true && _exceptionable);
                    if ("annotation" === input.name)
                        return $vo5(input, _path, true && _exceptionable);
                    if ("decision" === input.name)
                        return $vo7(input, _path, true && _exceptionable);
                    if ("misc" === input.name)
                        return $vo9(input, _path, true && _exceptionable);
                    return $report(_exceptionable, {
                        path: _path,
                        expected: "(ColonyMetadata | DomainMetadata | AnnotationMetadata | DecisionMetadata | MiscMetadata)",
                        value: input
                    });
                })();
                return ("object" === typeof input && null !== input || $report(true, {
                    path: _path + "",
                    expected: "(AnnotationMetadata | ColonyMetadata | DecisionMetadata | DomainMetadata | MiscMetadata)",
                    value: input
                })) && $vu0(input, _path + "", true) || $report(true, {
                    path: _path + "",
                    expected: "(AnnotationMetadata | ColonyMetadata | DecisionMetadata | DomainMetadata | MiscMetadata)",
                    value: input
                });
            })(input, "$input", true);
        const success = 0 === errors.length;
        return {
            success,
            errors,
            data: success ? input : undefined
        };
    })({
        name: type,
        data: result,
        version: constants_js_1.METADATA_VERSION,
    });
    if (!res.success) {
        const error = createError(res.errors);
        throw new Error(error);
    }
    return res.data;
};
exports.createMetadataFor = createMetadataFor;
