/**
 * Supported Ethereum networks. Use `Custom` if you'd like to bring your own deployment (e.g. local)
 */
export declare enum Network {
    /** Ethereum Mainnet */
    Mainnet = "Mainnet",
    /** Use this to specify an own main ColonyNetwork address in the options */
    Custom = "Custom",
    /** Gnosis chain */
    Gnosis = "Xdai",
    /** Goerli testnet */
    Goerli = "Goerli",
    /** Gnosis chain (alias) */
    Xdai = "Xdai",
    /** Gnosis chain custom fork */
    XdaiQa = "XdaiQa",
    /** Arbitrum One Mainnet */
    ArbitrumOne = "ArbitrumOne",
    /** Arbitrum Testnet */
    ArbitrumSepolia = "ArbitrumSepolia"
}
export declare enum NetworkId {
    /** Use this to specify an own main ColonyNetwork address in the options */
    Custom = 0,
    /** Ethereum Mainnet */
    Mainnet = 1,
    /** Goerli testnet */
    Goerli = 5,
    /** Gnosis chain */
    Gnosis = 100,
    /** Gnosis chain (alias) */
    Xdai = 100,
    /** Gnosis chain custom fork */
    XdaiQa = 100,
    /** Arbitrum Testnet */
    ArbitrumSepolia = 421614,
    /** Arbitrum One Mainnet */
    ArbitrumOne = 42161
}
/**
 * Addresses of the deployed ColonyNetwork EtherRouter contracts in all networks
 */
export declare enum ColonyNetworkAddress {
    /** The ColonyNetwork EtherRouter address on mainnet */
    Mainnet = "0x5346D0f80e2816FaD329F2c140c870ffc3c3E2Ef",
    /** The ColonyNetwork EtherRouter address on the Görli testnet */
    Goerli = "0x79073fc2117dD054FCEdaCad1E7018C9CbE3ec0B",
    /** The ColonyNetwork EtherRouter address on Gnosis chain */
    Xdai = "0x78163f593D1Fa151B4B7cacD146586aD2b686294",
    /** The ColonyNetwork EtherRouter fork address on Gnosis chain */
    XdaiQa = "0x78163f593D1Fa151B4B7cacD146586aD2b686294",
    /** Placeholder for a locally deployed EtherRouter address */
    Custom = "",
    /** The ColonyNetwork EtherRouter address on Arbitrum One */
    ArbitrumOne = "0xcccccdcc0ccf6c708d860e19353c5f9a49accccc",
    /** The ColonyNetwork EtherRouter address on Arbitrum Sepolia testnet */
    ArbitrumSepolia = "0x7777494e3d8cce0D3570E21FEf820F9Fee077777"
}
/**
 * HTTP endpoint of the official Colony reputation oracle
 */
export declare enum ReputationOracleEndpoint {
    Mainnet = "https://colony.io/reputation/mainnet",
    Goerli = "https://colony.io/reputation/goerli",
    Xdai = "https://xdai.colony.io/reputation/xdai",
    XdaiQa = "https://qa-xdai.colony.io/reputation/xdai",
    Custom = "http://localhost:3000",
    ArbitrumOne = "https://app.colony.io/reputation/arbitrum-one",
    ArbitrumSepolia = "https://arbitrum-sepolia.colony.io/reputation/arbitrum-sepolia"
}
/**
 * HTTP endpoint of the official Colony MetaTransaction (gasless transaction) broadcaster
 */
export declare enum MetaTxBroadCasterEndpoint {
    /** The metatransaction broadcaster endpoint on mainnet */
    Mainnet = "",
    /** The metatransaction broadcaster endpoint on the Görli testnet */
    Goerli = "",
    /** The metatransaction broadcaster endpoint on Gnosis Chain */
    Gnosis = "https://xdai.colony.io/metatransaction/xdai",
    /** The metatransaction broadcaster endpoint on Gnosis Chain (alias) */
    Xdai = "https://xdai.colony.io/metatransaction/xdai",
    /** The metatransaction broadcaster endpoint on Gnosis Chain (QA environment) */
    XdaiQa = "https://xdai.colony.io/metatransaction/xdai",
    /** The metatransaction broadcaster endpoint for a custom network */
    Custom = "",
    /** The metatransaction broadcaster endpoint on Arbitrum One */
    ArbitrumOne = "https://app.colony.io/metatransaction/arbitrum-one",
    /** The metatransaction broadcaster endpoint on Arbitrum Sepolia testnet */
    ArbitrumSepolia = "https://arbitrum-sepolia.colony.io/metatransaction/arbitrum-sepolia"
}
/**
 * Official Colony RPC2 endpoint (node)
 */
export declare enum ColonyRpcEndpoint {
    /** Colony's own RPC2 endpoint for Mainnet */
    Mainnet = "",
    /** Colony's own RPC2 endpoint for Goerli testnet */
    Goerli = "",
    /** Colony's own RPC2 endpoint for Gnosis chain */
    Gnosis = "https://xdai.colony.io/rpc/",
    /** Colony's own RPC2 endpoint for Gnosis chain (alias) */
    Xdai = "https://xdai.colony.io/rpc/",
    /** Colony's own RPC2 endpoint for Gnosis chain (QA environment) */
    XdaiQa = "https://xdai.colony.io/rpc/",
    /** Colony's own RPC2 endpoint for a custom network */
    Custom = "",
    /** Colony's own RPC2 endpoint for Arbitrum One */
    ArbitrumOne = "https://app.colony.io/public-rpc/",
    /** Colony's own RPC2 endpoint for Arbitrum Sepolia testnet */
    ArbitrumSepolia = "https://arbitrum-sepolia.colony.io/public-rpc/"
}
/**
 * ENS label suffix for Colonies
 */
export declare enum ColonyLabelSuffix {
    Mainnet = ".colony.joincolony.eth",
    Goerli = ".colony.joincolony.test",
    Gnosis = ".colony.joincolony.colonyxdai",
    Xdai = ".colony.joincolony.colonyxdai",
    XdaiQa = ".colony.joincolony.colonyxdai",
    Custom = ".colony.joincolony.test",
    ArbitrumOne = ".colony.joincolony.arbitrum",
    ArbitrumSepolia = ".colony.joincolony.sepolia"
}
/**
 * ENS label suffix for users
 */
export declare enum UserLabelSuffix {
    Mainnet = ".user.joincolony.eth",
    Goerli = ".user.joincolony.test",
    Gnosis = ".user.joincolony.colonyxdai",
    Xdai = ".user.joincolony.colonyxdai",
    XdaiQa = ".user.joincolony.colonyxdai",
    Custom = ".user.joincolony.test",
    ArbitrumOne = ".user.joincolony.arbitrum",
    ArbitrumSepolia = ".user.joincolony.sepolia"
}
/**
 * Shortcut to common token addresses
 */
export declare namespace Tokens {
    /** Tokens deployed on Mainnet */
    enum Mainnet {
        /** ETH on Mainnet */
        ETH = "0x0000000000000000000000000000000000000000",
        /** CLNY on Mainnet */
        CLNY = "0x3E828ac5C480069D4765654Fb4b8733b910b13b2",
        /** USDC on Mainnet */
        USDC = "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
    }
    /** Tokens deployed on Gnosis Chain */
    enum Gnosis {
        /** XDAI on Gnosis Chain */
        XDAI = "0x0000000000000000000000000000000000000000",
        /** CLNY on Gnosis Chain */
        CLNY = "0xc9B6218AffE8Aba68a13899Cbf7cF7f14DDd304C",
        /** USDC on Gnosis Chain */
        USDC = "0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83"
    }
    /** Tokens deployed on Arbitrum One */
    enum ArbitrumOne {
        /** ETH on Arbitrum One */
        ETH = "0x0000000000000000000000000000000000000000",
        /** CLNY on Arbitrum One */
        CLNY = "0xcccccdcc0ccf6c708d860e19353c5f9a49accccc",
        /** USDC on Arbitrum One */
        USDC = "0xaf88d065e77c8cC2239327C5EDb3A432268e5831"
    }
}
/**
 * Shortcuts to certain IDs within Colony
 */
export declare enum Id {
    /** The id of the root-domain in all colonies */
    RootDomain = 1,
    /** Alias of RootDomain */
    RootTeam = 1,
    /** The id of the root fundig pot in all colonies */
    RootPot = 1,
    /** Ignore the skill id for this method (global skill 0) */
    SkillIgnore = 0
}
/**
 * These are the various states a Motion might find itself in
 */
export declare enum MotionState {
    Null = 0,
    Staking = 1,
    Submit = 2,
    Reveal = 3,
    Closed = 4,
    Finalizable = 5,
    Finalized = 6,
    Failed = 7
}
/**
 * Identifies a motion as a decision
 *
 * Usually there's no need to use this directly.
 */
export declare const DecisionMotionCode = "0x12345678";
/**
 * Funding pots can have different types in a colony.
 * See [here](https://github.com/JoinColony/colonyNetwork/blob/develop/docs/_TLDR_Pots.md#types-of-pots) for more details
 */
export declare enum FundingPotAssociatedType {
    Unassigned = 0,
    Domain = 1,
    Task = 2,
    Payment = 3,
    Expenditure = 4
}
/**
 * Available roles in the colonyNetwork. Find out more here: https://github.com/JoinColony/colonyNetwork/blob/develop/docs/_Docs_Permissions.md
 */
export declare enum ColonyRole {
    Recovery = 0,
    Root = 1,
    Arbitration = 2,
    Architecture = 3,
    /**
     * @deprecated
     * The `ArchitectureSubdomain` role has been deprecated and should not be used */
    ArchitectureSubdomain = 4,
    Funding = 5,
    Administration = 6,
    /** @internal */
    LAST_ROLE = 7
}
/**
 * Extension contract names
 */
export declare enum Extension {
    FundingQueue = "FundingQueue",
    IVotingReputation = "IVotingReputation",
    MultisigPermissions = "MultisigPermissions",
    OneTxPayment = "OneTxPayment",
    ReputationBootstrapper = "ReputationBootstrapper",
    StagedExpenditure = "StagedExpenditure",
    StakedExpenditure = "StakedExpenditure",
    StreamingPayments = "StreamingPayments",
    TokenSupplier = "TokenSupplier",
    VotingReputation = "VotingReputation"
}
