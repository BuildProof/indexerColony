import { BigNumber, type BigNumberish } from 'ethers';
import { Network } from '../constants.js';
import { type CommonColony, type CommonNetwork } from './types.js';
interface ReputationClientOptions {
    customEndpointUrl?: string;
    network?: Network;
}
interface MembersReputationResponse {
    addresses: string[];
}
export declare class ReputationClient {
    static fetchReputation<T>(url: string): Promise<T>;
    private colony;
    private network;
    private endpointUrl;
    constructor(network: CommonNetwork, colony: CommonColony, config?: ReputationClientOptions);
    private getRootHash;
    private getBaseEndpoint;
    /**
     * Get reputation with no proofs
     *
     * Simply fetches the reputation for a user and a certain skillId.
     * Get the skillId for a domain first to check reputation in a domain.
     *
     * @example
     * ```typescript
     * const reputation = new ReputationClient(networkContract, colonyContract);
     * // Immediately executing async function
     * (async function() {
     *   // Use Id.RootDomain as domainId for Colony-wide reputation
     *   const { skillId } = await colonyContract.getDomain(domainId);
     *   const { reputationAmount } = reputation.getReputation(skillId, walletAddress);
     * })();
     * ```
     *
     * @param skillId - Skill (for corresponding domain) to check reputation in
     * @param address - User address to check reputation for
     * @param customRootHash - Optionally define a root hash in the reputation tree (historic point in time)
     *
     * @returns Reputation data
     */
    getReputation(skillId: BigNumberish, address: string, customRootHash?: string): Promise<{
        reputationAmount: BigNumber;
        key: string;
        value: string;
    }>;
    /**
     * Get reputation with proofs (e.g. to check against on-chain data)
     *
     * @param skillId - Skill (for corresponding domain) to check reputation in
     * @param address - User address to check reputation for
     * @param customRootHash - Optionally define a root hash in the reputation tree (historic point in time)
     *
     * @returns Reputation data
     */
    getReputationWithProofs(skillId: BigNumberish, address: string, customRootHash?: string): Promise<{
        reputationAmount: BigNumber;
        branchMask: string;
        siblings: string[];
        key: string;
        value: string;
    }>;
    /**
     * Get reputation for an address across all Colony domains
     *
     * @param address - User address to check reputation for
     * @param customRootHash - Optionally define a root hash in the reputation tree (historic point in time)
     *
     * @returns Reputation data
     */
    getReputationAcrossDomains(address: string, customRootHash?: string): Promise<{
        reputationAmount: BigNumber | undefined;
        domainId: number;
        skillId: number;
    }[]>;
    /**
     * Get a list of all users who have reputation in a team
     *
     * @param skillId - Skill (for corresponding domain) to check reputation in
     * @param customRootHash - Optionally define a root hash in the reputation tree (historic point in time)
     *
     * @returns Reputation data
     */
    getMembersReputation(skillId: BigNumberish, customRootHash?: string): Promise<MembersReputationResponse>;
    /**
     * Get the total amount of reputation points that currently are in a team
     *
     * @param skillId - Skill (for corresponding domain) to check reputation in
     * @param customRootHash - Optionally define a root hash in the reputation tree (historic point in time)
     *
     * @returns Reputation data
     */
    getTotalReputation(skillId: BigNumberish, customRootHash?: string): Promise<{
        reputationAmount: BigNumber;
        key: string;
        value: string;
    }>;
    /**
     * Get the reputation fraction for a user address within a team in the Colony
     *
     * 1.000 = user has 100% of the reputation
     * 0.050 = user has 5% of the reputation
     *
     * @param skillId - Skill (for corresponding domain) to check reputation in
     * @param customRootHash - Optionally define a root hash in the reputation tree (historic point in time)
     *
     * @returns Fraction of reputation a user has in a team
     */
    getReputationFraction(skillId: BigNumberish, address: string, customRootHash?: string, decimalPoints?: number): Promise<number>;
}
export {};
