"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC20Token = void 0;
const tokens_1 = require("@colony/tokens");
const utils_js_1 = require("../../utils.js");
class ERC20Token {
    /**
     * Creates a new instance of an ERC20 Token
     *
     * @remarks This does not deploy a new token, only connects to an exisiting one
     *
     * @param colonyNetwork - A {@link ColonyNetwork} instance
     * @param token - A token address or a full contract (like on a colony token client)
     * @returns An ERC20 token abstraction instance
     */
    constructor(colonyNetwork, token) {
        if (typeof token == 'string') {
            this.tokenClient = tokens_1.ERC20TokenFactory.connect(token, colonyNetwork.config.signerOrProvider);
        }
        else {
            this.tokenClient = token;
        }
        this.address = this.tokenClient.address;
        this.colonyNetwork = colonyNetwork;
    }
    /**
     * Provide direct access to the internally used ColonyJS TokenClient client. Only use when you know what you're doing
     * @internal
     *
     * @returns The internally used TokenClient
     */
    getInternalTokenClient() {
        return this.tokenClient;
    }
    /**
     * Returns the token's name
     *
     * @returns The token's name (e.g. Colony Network Token)
     */
    name() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.tokenClient.name();
        });
    }
    /**
     * Returns the token's symbol
     *
     * @returns The token's symbol (e.g. CLNY)
     */
    symbol() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.tokenClient.symbol();
        });
    }
    /**
     * Returns the token's decimals
     *
     * @returns The token's decimals (e.g. 18)
     */
    decimals() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.tokenClient.decimals();
        });
    }
    /**
     * Returns the total token supply
     *
     * @returns The token's total supply
     */
    totalSupply() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.tokenClient.totalSupply();
        });
    }
    /**
     * Returns the account balance of another account with address `owner`
     *
     * @returns The account balance of the corresponding address
     */
    balanceOf(owner) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.tokenClient.balanceOf(owner);
        });
    }
    /**
     * Returns the amount which `spender` is still allowed to withdraw from `owner`
     *
     * @returns The allowance amount
     */
    allowance(owner, spender) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.tokenClient.allowance(owner, spender);
        });
    }
    /**
     * Transfers `value` amount of tokens to address `to` from the currently used wallet
     *
     * @returns A transaction creator
     *
     * #### Event data
     *
     * | Property | Type | Description |
     * | :------ | :------ | :------ |
     * | `src` | string | The address that transferred the tokens from their wallet |
     * | `dst` | string | Address of the recipient of the tokens |
     * | `wad` | BigNumber | Amount that was transferred |
     */
    transfer(to, value) {
        return this.colonyNetwork.createTxCreator(this.tokenClient, 'transfer', [to, value], (receipt) => __awaiter(this, void 0, void 0, function* () {
            return (Object.assign({}, (0, utils_js_1.extractEvent)('Transfer', receipt)));
        }));
    }
    /**
     * Transfers `value` amount of tokens from address `from` to address `to`
     *
     * The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies
     *
     * @returns A transaction creator
     *
     * #### Event data
     *
     * | Property | Type | Description |
     * | :------ | :------ | :------ |
     * | `src` | string | The address that transferred the tokens from their wallet |
     * | `dst` | string | Address of the recipient of the tokens |
     * | `wad` | BigNumber | Amount that was transferred |
     */
    transferFrom(from, to, value) {
        return this.colonyNetwork.createTxCreator(this.tokenClient, 'transferFrom', [from, to, value], (receipt) => __awaiter(this, void 0, void 0, function* () {
            return (Object.assign({}, (0, utils_js_1.extractEvent)('Transfer', receipt)));
        }));
    }
    /**
     * Approve `amount` of the wallet owners holdings of the specified token
     *
     * In order for the wallet owner to stake tokens, that amount has to be approved and deposited into the Colony first. In the dapp the process is called "Activation" of a certain amount of the Colony's native token. The wallet must hold at least the amount of the token that will be approved.
     *
     * @example
     * ```typescript
     * import { w } from '@colony/sdk';
     *
     * // Immediately executing async function
     * (async function() {
     *   // Approve 100 tokens to be "activated"
     *   await colony.token.approve(w`100`).tx().mined();
     *   // Deposit the tokens
     *   await colonyNetwork.locking.deposit(token.address, w`100`).tx().mined();
     * })();
     * ```
     *
     * @param amount - Amount of the token to be approved
     * @param spender - Spender to approve the amount for. Defaults to the Colony Network
     *
     * @returns A transaction creator
     *
     * #### Event data
     *
     * | Property | Type | Description |
     * | :------ | :------ | :------ |
     * | `src` | string | The address that approved the tokens from their wallet |
     * | `guy` | string | Address of the TokenLocking contract |
     * | `wad` | BigNumber | Amount that was approved |
     */
    approve(amount, spender) {
        return this.colonyNetwork.createTxCreator(this.tokenClient, 'approve', () => __awaiter(this, void 0, void 0, function* () {
            const tokenLocking = yield this.colonyNetwork.getTokenLocking();
            const approvedSpender = spender || tokenLocking.address;
            return [approvedSpender, amount];
        }), (receipt) => __awaiter(this, void 0, void 0, function* () {
            return (Object.assign({}, (0, utils_js_1.extractEvent)('Approval', receipt)));
        }));
    }
}
exports.ERC20Token = ERC20Token;
