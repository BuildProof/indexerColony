"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getToken = exports.ERC2612Token = exports.ERC20Token = exports.ColonyToken = void 0;
const tokens_1 = require("@colony/tokens");
const ColonyToken_js_1 = require("./ColonyToken.js");
const ERC20Token_js_1 = require("./ERC20Token.js");
const ERC2612Token_js_1 = require("./ERC2612Token.js");
var ColonyToken_js_2 = require("./ColonyToken.js");
Object.defineProperty(exports, "ColonyToken", { enumerable: true, get: function () { return ColonyToken_js_2.ColonyToken; } });
var ERC20Token_js_2 = require("./ERC20Token.js");
Object.defineProperty(exports, "ERC20Token", { enumerable: true, get: function () { return ERC20Token_js_2.ERC20Token; } });
var ERC2612Token_js_2 = require("./ERC2612Token.js");
Object.defineProperty(exports, "ERC2612Token", { enumerable: true, get: function () { return ERC2612Token_js_2.ERC2612Token; } });
/**
 * Get a properly instantiated Token contract client
 *
 * This method tries to auto-detect the type of the token under the given address
 *
 * @param colonyNetwork - A {@link ColonyNetwork} instance
 * @param address - The token's address
 *
 * @returns A Token contract client
 */
const getToken = (colonyNetwork, address) => __awaiter(void 0, void 0, void 0, function* () {
    const tokenClient = yield (0, tokens_1.getTokenClient)(address, colonyNetwork.config.signerOrProvider);
    switch (tokenClient.tokenClientType) {
        case tokens_1.TokenClientType.Colony: {
            return new ColonyToken_js_1.ColonyToken(colonyNetwork, tokenClient);
        }
        case tokens_1.TokenClientType.Erc20: {
            return new ERC20Token_js_1.ERC20Token(colonyNetwork, tokenClient);
        }
        case tokens_1.TokenClientType.Erc2612: {
            return new ERC2612Token_js_1.ERC2612Token(colonyNetwork, tokenClient);
        }
        default: {
            throw new Error('Your token is not supported in Colony SDK (yet).');
        }
    }
});
exports.getToken = getToken;
