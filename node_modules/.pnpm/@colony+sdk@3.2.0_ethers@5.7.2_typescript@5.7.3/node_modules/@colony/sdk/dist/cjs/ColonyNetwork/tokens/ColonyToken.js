"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColonyToken = void 0;
const tokens_1 = require("@colony/tokens");
const utils_js_1 = require("../../utils.js");
const ERC20Token_js_1 = require("./ERC20Token.js");
class ColonyToken extends ERC20Token_js_1.ERC20Token {
    /**
     * Creates a new instance of a Colony deployed Token
     *
     * @remarks This does not deploy a new token, only connects to an exisiting one
     *
     * @param colonyNetwork - A {@link ColonyNetwork} instance
     * @param token - A token address or a full contract (like on a colony token client)
     * @returns An ERC20 token abstraction instance
     */
    constructor(colonyNetwork, token) {
        super(colonyNetwork, token);
        if (typeof token == 'string') {
            this.tokenClient = tokens_1.ColonyTokenFactory.connect(token, colonyNetwork.config.signerOrProvider);
        }
        else {
            this.tokenClient = token;
        }
        this.address = this.tokenClient.address;
        this.colonyNetwork = colonyNetwork;
    }
    /**
     * Provide direct access to the internally used ethers Token contract. Only use when you know what you're doing
     * @internal
     *
     * @returns The internally used TokenClient
     */
    getInternalTokenClient() {
        return this.tokenClient;
    }
    /**
     * Sets the address of the TokenAuthority for this token
     *
     * Set the TokenAuthority for this token. Only has to be done once, after the TokenAuthority has been deployed. See {@link Colony.deployTokenAuthority} for more information.
     *
     * @remarks
     * Only works for native tokens deployed with Colony (not imported tokens).
     *
     * @example
     * ```typescript
     * import { w } from '@colony/sdk';
     *
     * // Immediately executing async function
     * (async function() {
     *   // Deploy the TokenAuthority contract
     *   // (forced transaction example)
     *   const [{ tokenAuthorityAddress }] = await colony.deployTokenAuthority().tx().mined();
     *   // Set the TokenAuthority for this token
     *   // (forced transaction example)
     *   await colony.token.setAuthority(tokenAuthorityAddress).tx().mined();
     * })();
     * ```
     *
     * @param address - Address of the TokenAuthority contract
     *
     * @returns A transaction creator
     *
     * #### Event data
     *
     * | Property | Type | Description |
     * | :------ | :------ | :------ |
     * | `authority` | string | The address of the tokenAuthority that has been set |
     */
    setAuthority(address) {
        return this.colonyNetwork.createMetaTxCreator(this.tokenClient, 'setAuthority', [address], (receipt) => __awaiter(this, void 0, void 0, function* () {
            return (Object.assign({}, (0, utils_js_1.extractEvent)('LogSetAuthority', receipt)));
        }));
    }
    /**
     * Sets the owner of the token
     *
     * Set the owner address for this token. Should usually be the colony. This will allow the Colony to always affect certain token parameters, event without the TokenAuthority deployed or used
     *
     * @remarks
     * Only works for native tokens deployed with Colony (not imported tokens).
     *
     * @param address - Address to set as the owner of the token (usually the colony)
     *
     * @returns A transaction creator
     *
     * #### Event data
     *
     * | Property | Type | Description |
     * | :------ | :------ | :------ |
     * | `owner` | string | The address of the owner that has been set |
     */
    setOwner(address) {
        return this.colonyNetwork.createMetaTxCreator(this.tokenClient, 'setOwner', [address], (receipt) => __awaiter(this, void 0, void 0, function* () {
            return (Object.assign({}, (0, utils_js_1.extractEvent)('LogSetOwner', receipt)));
        }));
    }
}
exports.ColonyToken = ColonyToken;
