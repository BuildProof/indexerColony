"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomContract = void 0;
const ethers_1 = require("ethers");
const CustomTxCreator_js_1 = __importDefault(require("../TxCreator/CustomTxCreator.js"));
class CustomContract {
    /**
     * Creates a new instance of a custom contract
     *
     * This is your main entry point to talk to the Colony Network Smart Contracts.
     * From here you should be able to instantiate all the required instances for Colonies and their extensions.
     *
     * @param address - Address of the deployed contract
     * @param abi - JSON ABI of the contract
     * @param config - An instance of a ContractConfig (mind: _not_ ContractOptions!)
     * @returns A CustomContract instance
     */
    constructor(address, abi, config) {
        this.abi = abi;
        this.address = address;
        this.config = config;
        // We do a little bit of casting to make ethers happy with the abitype types
        this.contract = new ethers_1.Contract(address, this.abi, this.config.signerOrProvider);
    }
    /**
     * Creates a new {@link CustomTxCreator} for custom, permissioned transactions or metatransactions
     *
     * @param method - The transaction method to execute on the contract
     * @param args - The arguments for the method
     * @param eventData - A function that extracts the relevant event data from the {@link ContractReceipt}
     * @param txConfig - More configuration options, like {@link MetadataType} if the event contains metadata or if methods are unsupported
     * @returns A {@link CustomTxCreator}
     */
    createTxCreator(method, args, eventData, txConfig) {
        return new CustomTxCreator_js_1.default({
            config: this.config,
            contract: this.contract,
            method,
            args,
            eventData,
            txConfig,
        });
    }
    /**
     * Read a contract value
     *
     * @param method - The pure/view method to read from the contract
     * @param args - The arguments for the method
     * @returns A promise resolving into the specific type for the contract return value
     */
    read(method, args) {
        return __awaiter(this, void 0, void 0, function* () {
            // A little typecasting to make ethers happy
            const customArgs = args;
            const contract = this.contract;
            const result = contract[method](...customArgs);
            return result;
        });
    }
}
exports.CustomContract = CustomContract;
