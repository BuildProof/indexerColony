import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common.js";
export declare namespace ColonyDataTypes {
    type DomainStruct = {
        skillId: BigNumberish;
        fundingPotId: BigNumberish;
    };
    type DomainStructOutput = [BigNumber, BigNumber] & {
        skillId: BigNumber;
        fundingPotId: BigNumber;
    };
    type ExpenditureStruct = {
        status: BigNumberish;
        owner: string;
        fundingPotId: BigNumberish;
        domainId: BigNumberish;
        finalizedTimestamp: BigNumberish;
        globalClaimDelay: BigNumberish;
    };
    type ExpenditureStructOutput = [
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        status: number;
        owner: string;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        finalizedTimestamp: BigNumber;
        globalClaimDelay: BigNumber;
    };
    type ExpenditureSlotStruct = {
        recipient: string;
        claimDelay: BigNumberish;
        payoutModifier: BigNumberish;
        skills: BigNumberish[];
    };
    type ExpenditureSlotStructOutput = [
        string,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        recipient: string;
        claimDelay: BigNumber;
        payoutModifier: BigNumber;
        skills: BigNumber[];
    };
    type PaymentStruct = {
        recipient: string;
        finalized: boolean;
        fundingPotId: BigNumberish;
        domainId: BigNumberish;
        skills: BigNumberish[];
    };
    type PaymentStructOutput = [
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        recipient: string;
        finalized: boolean;
        fundingPotId: BigNumber;
        domainId: BigNumber;
        skills: BigNumber[];
    };
    type RewardPayoutCycleStruct = {
        reputationState: BytesLike;
        colonyWideReputation: BigNumberish;
        totalTokens: BigNumberish;
        amount: BigNumberish;
        tokenAddress: string;
        blockTimestamp: BigNumberish;
        amountRemaining: BigNumberish;
        finalized: boolean;
    };
    type RewardPayoutCycleStructOutput = [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        boolean
    ] & {
        reputationState: string;
        colonyWideReputation: BigNumber;
        totalTokens: BigNumber;
        amount: BigNumber;
        tokenAddress: string;
        blockTimestamp: BigNumber;
        amountRemaining: BigNumber;
        finalized: boolean;
    };
    type RoleStruct = {
        user: string;
        rateFail: boolean;
        rating: BigNumberish;
    };
    type RoleStructOutput = [string, boolean, number] & {
        user: string;
        rateFail: boolean;
        rating: number;
    };
}
export interface IColonyInterface extends utils.Interface {
    functions: {
        "addDomain(uint256,uint256,uint256)": FunctionFragment;
        "addDomain(uint256,uint256,uint256,string)": FunctionFragment;
        "addLocalSkill()": FunctionFragment;
        "annotateTransaction(bytes32,string)": FunctionFragment;
        "approveExitRecovery()": FunctionFragment;
        "approveStake(address,uint256,uint256)": FunctionFragment;
        "authority()": FunctionFragment;
        "bootstrapColony(address[],int256[])": FunctionFragment;
        "burnTokens(address,uint256)": FunctionFragment;
        "cancelExpenditure(uint256)": FunctionFragment;
        "cancelExpenditureViaArbitration(uint256,uint256,uint256)": FunctionFragment;
        "checkNotAdditionalProtectedVariable(uint256)": FunctionFragment;
        "claimColonyFunds(address)": FunctionFragment;
        "claimExpenditurePayout(uint256,uint256,address)": FunctionFragment;
        "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])": FunctionFragment;
        "deobligateStake(address,uint256,uint256)": FunctionFragment;
        "deprecateDomain(uint256,uint256,uint256,bool)": FunctionFragment;
        "deprecateExtension(bytes32,bool)": FunctionFragment;
        "deprecateLocalSkill(uint256,bool)": FunctionFragment;
        "editColony(string)": FunctionFragment;
        "editColonyByDelta(string)": FunctionFragment;
        "editDomain(uint256,uint256,uint256,string)": FunctionFragment;
        "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)": FunctionFragment;
        "emitDomainReputationReward(uint256,address,int256)": FunctionFragment;
        "emitSkillReputationPenalty(uint256,address,int256)": FunctionFragment;
        "emitSkillReputationReward(uint256,address,int256)": FunctionFragment;
        "enterRecoveryMode()": FunctionFragment;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
        "exitRecoveryMode()": FunctionFragment;
        "finalizeExpenditure(uint256)": FunctionFragment;
        "finalizeExpenditureViaArbitration(uint256,uint256,uint256)": FunctionFragment;
        "finalizeRewardPayout(uint256)": FunctionFragment;
        "finishUpgrade()": FunctionFragment;
        "getApproval(address,address,uint256)": FunctionFragment;
        "getCapabilityRoles(bytes4)": FunctionFragment;
        "getColonyNetwork()": FunctionFragment;
        "getDomain(uint256)": FunctionFragment;
        "getDomainCount()": FunctionFragment;
        "getDomainFromFundingPot(uint256)": FunctionFragment;
        "getExpenditure(uint256)": FunctionFragment;
        "getExpenditureCount()": FunctionFragment;
        "getExpenditureSlot(uint256,uint256)": FunctionFragment;
        "getExpenditureSlotPayout(uint256,uint256,address)": FunctionFragment;
        "getFundingPot(uint256)": FunctionFragment;
        "getFundingPotBalance(uint256,address)": FunctionFragment;
        "getFundingPotCount()": FunctionFragment;
        "getFundingPotPayout(uint256,address)": FunctionFragment;
        "getMetatransactionNonce(address)": FunctionFragment;
        "getNonRewardPotsTotal(address)": FunctionFragment;
        "getObligation(address,address,uint256)": FunctionFragment;
        "getPayment(uint256)": FunctionFragment;
        "getPaymentCount()": FunctionFragment;
        "getRewardInverse()": FunctionFragment;
        "getRewardPayoutInfo(uint256)": FunctionFragment;
        "getRootLocalSkill()": FunctionFragment;
        "getTask(uint256)": FunctionFragment;
        "getTaskChangeNonce(uint256)": FunctionFragment;
        "getTaskCount()": FunctionFragment;
        "getTaskRole(uint256,uint8)": FunctionFragment;
        "getTaskWorkRatingSecret(uint256,uint8)": FunctionFragment;
        "getTaskWorkRatingSecretsInfo(uint256)": FunctionFragment;
        "getToken()": FunctionFragment;
        "getTokenApproval(address,address)": FunctionFragment;
        "getTotalTokenApproval(address)": FunctionFragment;
        "getUserRoles(address,uint256)": FunctionFragment;
        "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)": FunctionFragment;
        "hasUserRole(address,uint256,uint8)": FunctionFragment;
        "initialiseColony(address,address)": FunctionFragment;
        "initialiseRootLocalSkill()": FunctionFragment;
        "installExtension(bytes32,uint256)": FunctionFragment;
        "isInRecoveryMode()": FunctionFragment;
        "lockExpenditure(uint256)": FunctionFragment;
        "lockToken()": FunctionFragment;
        "makeArbitraryTransaction(address,bytes)": FunctionFragment;
        "makeArbitraryTransactions(address[],bytes[],bool)": FunctionFragment;
        "makeExpenditure(uint256,uint256,uint256)": FunctionFragment;
        "makeSingleArbitraryTransaction(address,bytes)": FunctionFragment;
        "mintTokens(uint256)": FunctionFragment;
        "mintTokensFor(address,uint256)": FunctionFragment;
        "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
        "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "numRecoveryRoles()": FunctionFragment;
        "obligateStake(address,uint256,uint256)": FunctionFragment;
        "owner()": FunctionFragment;
        "registerColonyLabel(string,string)": FunctionFragment;
        "removeRecoveryRole(address)": FunctionFragment;
        "setAdministrationRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
        "setArbitrationRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
        "setArchitectureRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
        "setDefaultGlobalClaimDelay(uint256)": FunctionFragment;
        "setExpenditureClaimDelay(uint256,uint256,uint256)": FunctionFragment;
        "setExpenditureClaimDelays(uint256,uint256[],uint256[])": FunctionFragment;
        "setExpenditureMetadata(uint256,uint256,uint256,string)": FunctionFragment;
        "setExpenditureMetadata(uint256,string)": FunctionFragment;
        "setExpenditurePayout(uint256,uint256,address,uint256)": FunctionFragment;
        "setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
        "setExpenditurePayoutModifiers(uint256,uint256[],int256[])": FunctionFragment;
        "setExpenditurePayouts(uint256,uint256[],address,uint256[])": FunctionFragment;
        "setExpenditureRecipient(uint256,uint256,address)": FunctionFragment;
        "setExpenditureRecipients(uint256,uint256[],address[])": FunctionFragment;
        "setExpenditureSkill(uint256,uint256,uint256)": FunctionFragment;
        "setExpenditureSkills(uint256,uint256[],uint256[])": FunctionFragment;
        "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)": FunctionFragment;
        "setFundingRole(uint256,uint256,address,uint256,bool)": FunctionFragment;
        "setRecoveryRole(address)": FunctionFragment;
        "setRewardInverse(uint256)": FunctionFragment;
        "setRootRole(address,bool)": FunctionFragment;
        "setStorageSlotRecovery(uint256,bytes32)": FunctionFragment;
        "setUserRoles(uint256,uint256,address,uint256,bytes32)": FunctionFragment;
        "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])": FunctionFragment;
        "transferExpenditure(uint256,address)": FunctionFragment;
        "transferExpenditureViaArbitration(uint256,uint256,uint256,address)": FunctionFragment;
        "transferStake(uint256,uint256,address,address,uint256,uint256,address)": FunctionFragment;
        "uninstallExtension(bytes32)": FunctionFragment;
        "unlockToken()": FunctionFragment;
        "unlockTokenForUser(address,uint256)": FunctionFragment;
        "updateApprovalAmount(address,address)": FunctionFragment;
        "updateColonyOrbitDB(string)": FunctionFragment;
        "upgrade(uint256)": FunctionFragment;
        "upgradeExtension(bytes32,uint256)": FunctionFragment;
        "userCanSetRoles(address,uint256,uint256,uint256)": FunctionFragment;
        "validateDomainInheritance(uint256,uint256,uint256)": FunctionFragment;
        "verifyReputationProof(bytes,bytes,uint256,bytes32[])": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addDomain(uint256,uint256,uint256)" | "addDomain(uint256,uint256,uint256,string)" | "addLocalSkill" | "addLocalSkill()" | "annotateTransaction" | "annotateTransaction(bytes32,string)" | "approveExitRecovery" | "approveExitRecovery()" | "approveStake" | "approveStake(address,uint256,uint256)" | "authority" | "authority()" | "bootstrapColony" | "bootstrapColony(address[],int256[])" | "burnTokens" | "burnTokens(address,uint256)" | "cancelExpenditure" | "cancelExpenditure(uint256)" | "cancelExpenditureViaArbitration" | "cancelExpenditureViaArbitration(uint256,uint256,uint256)" | "checkNotAdditionalProtectedVariable" | "checkNotAdditionalProtectedVariable(uint256)" | "claimColonyFunds" | "claimColonyFunds(address)" | "claimExpenditurePayout" | "claimExpenditurePayout(uint256,uint256,address)" | "claimRewardPayout" | "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])" | "deobligateStake" | "deobligateStake(address,uint256,uint256)" | "deprecateDomain" | "deprecateDomain(uint256,uint256,uint256,bool)" | "deprecateExtension" | "deprecateExtension(bytes32,bool)" | "deprecateLocalSkill" | "deprecateLocalSkill(uint256,bool)" | "editColony" | "editColony(string)" | "editColonyByDelta" | "editColonyByDelta(string)" | "editDomain" | "editDomain(uint256,uint256,uint256,string)" | "emitDomainReputationPenalty" | "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)" | "emitDomainReputationReward" | "emitDomainReputationReward(uint256,address,int256)" | "emitSkillReputationPenalty" | "emitSkillReputationPenalty(uint256,address,int256)" | "emitSkillReputationReward" | "emitSkillReputationReward(uint256,address,int256)" | "enterRecoveryMode" | "enterRecoveryMode()" | "executeMetaTransaction" | "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)" | "exitRecoveryMode" | "exitRecoveryMode()" | "finalizeExpenditure" | "finalizeExpenditure(uint256)" | "finalizeExpenditureViaArbitration" | "finalizeExpenditureViaArbitration(uint256,uint256,uint256)" | "finalizeRewardPayout" | "finalizeRewardPayout(uint256)" | "finishUpgrade" | "finishUpgrade()" | "getApproval" | "getApproval(address,address,uint256)" | "getCapabilityRoles" | "getCapabilityRoles(bytes4)" | "getColonyNetwork" | "getColonyNetwork()" | "getDomain" | "getDomain(uint256)" | "getDomainCount" | "getDomainCount()" | "getDomainFromFundingPot" | "getDomainFromFundingPot(uint256)" | "getExpenditure" | "getExpenditure(uint256)" | "getExpenditureCount" | "getExpenditureCount()" | "getExpenditureSlot" | "getExpenditureSlot(uint256,uint256)" | "getExpenditureSlotPayout" | "getExpenditureSlotPayout(uint256,uint256,address)" | "getFundingPot" | "getFundingPot(uint256)" | "getFundingPotBalance" | "getFundingPotBalance(uint256,address)" | "getFundingPotCount" | "getFundingPotCount()" | "getFundingPotPayout" | "getFundingPotPayout(uint256,address)" | "getMetatransactionNonce" | "getMetatransactionNonce(address)" | "getNonRewardPotsTotal" | "getNonRewardPotsTotal(address)" | "getObligation" | "getObligation(address,address,uint256)" | "getPayment" | "getPayment(uint256)" | "getPaymentCount" | "getPaymentCount()" | "getRewardInverse" | "getRewardInverse()" | "getRewardPayoutInfo" | "getRewardPayoutInfo(uint256)" | "getRootLocalSkill" | "getRootLocalSkill()" | "getTask" | "getTask(uint256)" | "getTaskChangeNonce" | "getTaskChangeNonce(uint256)" | "getTaskCount" | "getTaskCount()" | "getTaskRole" | "getTaskRole(uint256,uint8)" | "getTaskWorkRatingSecret" | "getTaskWorkRatingSecret(uint256,uint8)" | "getTaskWorkRatingSecretsInfo" | "getTaskWorkRatingSecretsInfo(uint256)" | "getToken" | "getToken()" | "getTokenApproval" | "getTokenApproval(address,address)" | "getTotalTokenApproval" | "getTotalTokenApproval(address)" | "getUserRoles" | "getUserRoles(address,uint256)" | "hasInheritedUserRole" | "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)" | "hasUserRole" | "hasUserRole(address,uint256,uint8)" | "initialiseColony" | "initialiseColony(address,address)" | "initialiseRootLocalSkill" | "initialiseRootLocalSkill()" | "installExtension" | "installExtension(bytes32,uint256)" | "isInRecoveryMode" | "isInRecoveryMode()" | "lockExpenditure" | "lockExpenditure(uint256)" | "lockToken" | "lockToken()" | "makeArbitraryTransaction" | "makeArbitraryTransaction(address,bytes)" | "makeArbitraryTransactions" | "makeArbitraryTransactions(address[],bytes[],bool)" | "makeExpenditure" | "makeExpenditure(uint256,uint256,uint256)" | "makeSingleArbitraryTransaction" | "makeSingleArbitraryTransaction(address,bytes)" | "mintTokens" | "mintTokens(uint256)" | "mintTokensFor" | "mintTokensFor(address,uint256)" | "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)" | "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)" | "multicall" | "multicall(bytes[])" | "numRecoveryRoles" | "numRecoveryRoles()" | "obligateStake" | "obligateStake(address,uint256,uint256)" | "owner" | "owner()" | "registerColonyLabel" | "registerColonyLabel(string,string)" | "removeRecoveryRole" | "removeRecoveryRole(address)" | "setAdministrationRole" | "setAdministrationRole(uint256,uint256,address,uint256,bool)" | "setArbitrationRole" | "setArbitrationRole(uint256,uint256,address,uint256,bool)" | "setArchitectureRole" | "setArchitectureRole(uint256,uint256,address,uint256,bool)" | "setDefaultGlobalClaimDelay" | "setDefaultGlobalClaimDelay(uint256)" | "setExpenditureClaimDelay" | "setExpenditureClaimDelay(uint256,uint256,uint256)" | "setExpenditureClaimDelays" | "setExpenditureClaimDelays(uint256,uint256[],uint256[])" | "setExpenditureMetadata(uint256,uint256,uint256,string)" | "setExpenditureMetadata(uint256,string)" | "setExpenditurePayout(uint256,uint256,address,uint256)" | "setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)" | "setExpenditurePayoutModifiers" | "setExpenditurePayoutModifiers(uint256,uint256[],int256[])" | "setExpenditurePayouts" | "setExpenditurePayouts(uint256,uint256[],address,uint256[])" | "setExpenditureRecipient" | "setExpenditureRecipient(uint256,uint256,address)" | "setExpenditureRecipients" | "setExpenditureRecipients(uint256,uint256[],address[])" | "setExpenditureSkill" | "setExpenditureSkill(uint256,uint256,uint256)" | "setExpenditureSkills" | "setExpenditureSkills(uint256,uint256[],uint256[])" | "setExpenditureState" | "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)" | "setFundingRole" | "setFundingRole(uint256,uint256,address,uint256,bool)" | "setRecoveryRole" | "setRecoveryRole(address)" | "setRewardInverse" | "setRewardInverse(uint256)" | "setRootRole" | "setRootRole(address,bool)" | "setStorageSlotRecovery" | "setStorageSlotRecovery(uint256,bytes32)" | "setUserRoles" | "setUserRoles(uint256,uint256,address,uint256,bytes32)" | "startNextRewardPayout" | "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])" | "transferExpenditure" | "transferExpenditure(uint256,address)" | "transferExpenditureViaArbitration" | "transferExpenditureViaArbitration(uint256,uint256,uint256,address)" | "transferStake" | "transferStake(uint256,uint256,address,address,uint256,uint256,address)" | "uninstallExtension" | "uninstallExtension(bytes32)" | "unlockToken" | "unlockToken()" | "unlockTokenForUser" | "unlockTokenForUser(address,uint256)" | "updateApprovalAmount" | "updateApprovalAmount(address,address)" | "updateColonyOrbitDB" | "updateColonyOrbitDB(string)" | "upgrade" | "upgrade(uint256)" | "upgradeExtension" | "upgradeExtension(bytes32,uint256)" | "userCanSetRoles" | "userCanSetRoles(address,uint256,uint256,uint256)" | "validateDomainInheritance" | "validateDomainInheritance(uint256,uint256,uint256)" | "verifyReputationProof" | "verifyReputationProof(bytes,bytes,uint256,bytes32[])" | "version" | "version()"): FunctionFragment;
    encodeFunctionData(functionFragment: "addDomain(uint256,uint256,uint256)", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "addDomain(uint256,uint256,uint256,string)", values: [BigNumberish, BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "addLocalSkill", values?: undefined): string;
    encodeFunctionData(functionFragment: "addLocalSkill()", values?: undefined): string;
    encodeFunctionData(functionFragment: "annotateTransaction", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "annotateTransaction(bytes32,string)", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "approveExitRecovery", values?: undefined): string;
    encodeFunctionData(functionFragment: "approveExitRecovery()", values?: undefined): string;
    encodeFunctionData(functionFragment: "approveStake", values: [string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "approveStake(address,uint256,uint256)", values: [string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "authority", values?: undefined): string;
    encodeFunctionData(functionFragment: "authority()", values?: undefined): string;
    encodeFunctionData(functionFragment: "bootstrapColony", values: [string[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "bootstrapColony(address[],int256[])", values: [string[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "burnTokens", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "burnTokens(address,uint256)", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "cancelExpenditure", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "cancelExpenditure(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "cancelExpenditureViaArbitration", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "cancelExpenditureViaArbitration(uint256,uint256,uint256)", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "checkNotAdditionalProtectedVariable", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "checkNotAdditionalProtectedVariable(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "claimColonyFunds", values: [string]): string;
    encodeFunctionData(functionFragment: "claimColonyFunds(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "claimExpenditurePayout", values: [BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "claimExpenditurePayout(uint256,uint256,address)", values: [BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "claimRewardPayout", values: [
        BigNumberish,
        BigNumberish[],
        BytesLike,
        BytesLike,
        BigNumberish,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])", values: [
        BigNumberish,
        BigNumberish[],
        BytesLike,
        BytesLike,
        BigNumberish,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "deobligateStake", values: [string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "deobligateStake(address,uint256,uint256)", values: [string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "deprecateDomain", values: [BigNumberish, BigNumberish, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "deprecateDomain(uint256,uint256,uint256,bool)", values: [BigNumberish, BigNumberish, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "deprecateExtension", values: [BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "deprecateExtension(bytes32,bool)", values: [BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "deprecateLocalSkill", values: [BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "deprecateLocalSkill(uint256,bool)", values: [BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "editColony", values: [string]): string;
    encodeFunctionData(functionFragment: "editColony(string)", values: [string]): string;
    encodeFunctionData(functionFragment: "editColonyByDelta", values: [string]): string;
    encodeFunctionData(functionFragment: "editColonyByDelta(string)", values: [string]): string;
    encodeFunctionData(functionFragment: "editDomain", values: [BigNumberish, BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "editDomain(uint256,uint256,uint256,string)", values: [BigNumberish, BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "emitDomainReputationPenalty", values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)", values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "emitDomainReputationReward", values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "emitDomainReputationReward(uint256,address,int256)", values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "emitSkillReputationPenalty", values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "emitSkillReputationPenalty(uint256,address,int256)", values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "emitSkillReputationReward", values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "emitSkillReputationReward(uint256,address,int256)", values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "enterRecoveryMode", values?: undefined): string;
    encodeFunctionData(functionFragment: "enterRecoveryMode()", values?: undefined): string;
    encodeFunctionData(functionFragment: "executeMetaTransaction", values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)", values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "exitRecoveryMode", values?: undefined): string;
    encodeFunctionData(functionFragment: "exitRecoveryMode()", values?: undefined): string;
    encodeFunctionData(functionFragment: "finalizeExpenditure", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "finalizeExpenditure(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "finalizeExpenditureViaArbitration", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "finalizeExpenditureViaArbitration(uint256,uint256,uint256)", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "finalizeRewardPayout", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "finalizeRewardPayout(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "finishUpgrade", values?: undefined): string;
    encodeFunctionData(functionFragment: "finishUpgrade()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getApproval", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getApproval(address,address,uint256)", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getCapabilityRoles", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getCapabilityRoles(bytes4)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getColonyNetwork", values?: undefined): string;
    encodeFunctionData(functionFragment: "getColonyNetwork()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getDomain", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getDomain(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getDomainCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "getDomainCount()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getDomainFromFundingPot", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getDomainFromFundingPot(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getExpenditure", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getExpenditure(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getExpenditureCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "getExpenditureCount()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getExpenditureSlot", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getExpenditureSlot(uint256,uint256)", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getExpenditureSlotPayout", values: [BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "getExpenditureSlotPayout(uint256,uint256,address)", values: [BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "getFundingPot", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getFundingPot(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getFundingPotBalance", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "getFundingPotBalance(uint256,address)", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "getFundingPotCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFundingPotCount()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFundingPotPayout", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "getFundingPotPayout(uint256,address)", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "getMetatransactionNonce", values: [string]): string;
    encodeFunctionData(functionFragment: "getMetatransactionNonce(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "getNonRewardPotsTotal", values: [string]): string;
    encodeFunctionData(functionFragment: "getNonRewardPotsTotal(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "getObligation", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getObligation(address,address,uint256)", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPayment", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPayment(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPaymentCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "getPaymentCount()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRewardInverse", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRewardInverse()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRewardPayoutInfo", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRewardPayoutInfo(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRootLocalSkill", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRootLocalSkill()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTask", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTask(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTaskChangeNonce", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTaskChangeNonce(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTaskCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTaskCount()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTaskRole", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTaskRole(uint256,uint8)", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTaskWorkRatingSecret", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTaskWorkRatingSecret(uint256,uint8)", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTaskWorkRatingSecretsInfo", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTaskWorkRatingSecretsInfo(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "getToken()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTokenApproval", values: [string, string]): string;
    encodeFunctionData(functionFragment: "getTokenApproval(address,address)", values: [string, string]): string;
    encodeFunctionData(functionFragment: "getTotalTokenApproval", values: [string]): string;
    encodeFunctionData(functionFragment: "getTotalTokenApproval(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "getUserRoles", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getUserRoles(address,uint256)", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "hasInheritedUserRole", values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)", values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "hasUserRole", values: [string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "hasUserRole(address,uint256,uint8)", values: [string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "initialiseColony", values: [string, string]): string;
    encodeFunctionData(functionFragment: "initialiseColony(address,address)", values: [string, string]): string;
    encodeFunctionData(functionFragment: "initialiseRootLocalSkill", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialiseRootLocalSkill()", values?: undefined): string;
    encodeFunctionData(functionFragment: "installExtension", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "installExtension(bytes32,uint256)", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isInRecoveryMode", values?: undefined): string;
    encodeFunctionData(functionFragment: "isInRecoveryMode()", values?: undefined): string;
    encodeFunctionData(functionFragment: "lockExpenditure", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "lockExpenditure(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "lockToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "lockToken()", values?: undefined): string;
    encodeFunctionData(functionFragment: "makeArbitraryTransaction", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "makeArbitraryTransaction(address,bytes)", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "makeArbitraryTransactions", values: [string[], BytesLike[], boolean]): string;
    encodeFunctionData(functionFragment: "makeArbitraryTransactions(address[],bytes[],bool)", values: [string[], BytesLike[], boolean]): string;
    encodeFunctionData(functionFragment: "makeExpenditure", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "makeExpenditure(uint256,uint256,uint256)", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "makeSingleArbitraryTransaction", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "makeSingleArbitraryTransaction(address,bytes)", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "mintTokens", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "mintTokens(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "mintTokensFor", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "mintTokensFor(address,uint256)", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)", values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
    ]): string;
    encodeFunctionData(functionFragment: "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)", values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string
    ]): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "multicall(bytes[])", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "numRecoveryRoles", values?: undefined): string;
    encodeFunctionData(functionFragment: "numRecoveryRoles()", values?: undefined): string;
    encodeFunctionData(functionFragment: "obligateStake", values: [string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "obligateStake(address,uint256,uint256)", values: [string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
    encodeFunctionData(functionFragment: "registerColonyLabel", values: [string, string]): string;
    encodeFunctionData(functionFragment: "registerColonyLabel(string,string)", values: [string, string]): string;
    encodeFunctionData(functionFragment: "removeRecoveryRole", values: [string]): string;
    encodeFunctionData(functionFragment: "removeRecoveryRole(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "setAdministrationRole", values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "setAdministrationRole(uint256,uint256,address,uint256,bool)", values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "setArbitrationRole", values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "setArbitrationRole(uint256,uint256,address,uint256,bool)", values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "setArchitectureRole", values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "setArchitectureRole(uint256,uint256,address,uint256,bool)", values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "setDefaultGlobalClaimDelay", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDefaultGlobalClaimDelay(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setExpenditureClaimDelay", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setExpenditureClaimDelay(uint256,uint256,uint256)", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setExpenditureClaimDelays", values: [BigNumberish, BigNumberish[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setExpenditureClaimDelays(uint256,uint256[],uint256[])", values: [BigNumberish, BigNumberish[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setExpenditureMetadata(uint256,uint256,uint256,string)", values: [BigNumberish, BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "setExpenditureMetadata(uint256,string)", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "setExpenditurePayout(uint256,uint256,address,uint256)", values: [BigNumberish, BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)", values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "setExpenditurePayoutModifiers", values: [BigNumberish, BigNumberish[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setExpenditurePayoutModifiers(uint256,uint256[],int256[])", values: [BigNumberish, BigNumberish[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setExpenditurePayouts", values: [BigNumberish, BigNumberish[], string, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setExpenditurePayouts(uint256,uint256[],address,uint256[])", values: [BigNumberish, BigNumberish[], string, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setExpenditureRecipient", values: [BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "setExpenditureRecipient(uint256,uint256,address)", values: [BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "setExpenditureRecipients", values: [BigNumberish, BigNumberish[], string[]]): string;
    encodeFunctionData(functionFragment: "setExpenditureRecipients(uint256,uint256[],address[])", values: [BigNumberish, BigNumberish[], string[]]): string;
    encodeFunctionData(functionFragment: "setExpenditureSkill", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setExpenditureSkill(uint256,uint256,uint256)", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setExpenditureSkills", values: [BigNumberish, BigNumberish[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setExpenditureSkills(uint256,uint256[],uint256[])", values: [BigNumberish, BigNumberish[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "setExpenditureState", values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        boolean[],
        BytesLike[],
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)", values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        boolean[],
        BytesLike[],
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "setFundingRole", values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "setFundingRole(uint256,uint256,address,uint256,bool)", values: [BigNumberish, BigNumberish, string, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "setRecoveryRole", values: [string]): string;
    encodeFunctionData(functionFragment: "setRecoveryRole(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "setRewardInverse", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setRewardInverse(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setRootRole", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setRootRole(address,bool)", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setStorageSlotRecovery", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setStorageSlotRecovery(uint256,bytes32)", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setUserRoles", values: [BigNumberish, BigNumberish, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setUserRoles(uint256,uint256,address,uint256,bytes32)", values: [BigNumberish, BigNumberish, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "startNextRewardPayout", values: [string, BytesLike, BytesLike, BigNumberish, BytesLike[]]): string;
    encodeFunctionData(functionFragment: "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])", values: [string, BytesLike, BytesLike, BigNumberish, BytesLike[]]): string;
    encodeFunctionData(functionFragment: "transferExpenditure", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "transferExpenditure(uint256,address)", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "transferExpenditureViaArbitration", values: [BigNumberish, BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "transferExpenditureViaArbitration(uint256,uint256,uint256,address)", values: [BigNumberish, BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "transferStake", values: [
        BigNumberish,
        BigNumberish,
        string,
        string,
        BigNumberish,
        BigNumberish,
        string
    ]): string;
    encodeFunctionData(functionFragment: "transferStake(uint256,uint256,address,address,uint256,uint256,address)", values: [
        BigNumberish,
        BigNumberish,
        string,
        string,
        BigNumberish,
        BigNumberish,
        string
    ]): string;
    encodeFunctionData(functionFragment: "uninstallExtension", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "uninstallExtension(bytes32)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "unlockToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "unlockToken()", values?: undefined): string;
    encodeFunctionData(functionFragment: "unlockTokenForUser", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "unlockTokenForUser(address,uint256)", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateApprovalAmount", values: [string, string]): string;
    encodeFunctionData(functionFragment: "updateApprovalAmount(address,address)", values: [string, string]): string;
    encodeFunctionData(functionFragment: "updateColonyOrbitDB", values: [string]): string;
    encodeFunctionData(functionFragment: "updateColonyOrbitDB(string)", values: [string]): string;
    encodeFunctionData(functionFragment: "upgrade", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "upgrade(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "upgradeExtension", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "upgradeExtension(bytes32,uint256)", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "userCanSetRoles", values: [string, BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "userCanSetRoles(address,uint256,uint256,uint256)", values: [string, BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "validateDomainInheritance", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "validateDomainInheritance(uint256,uint256,uint256)", values: [BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "verifyReputationProof", values: [BytesLike, BytesLike, BigNumberish, BytesLike[]]): string;
    encodeFunctionData(functionFragment: "verifyReputationProof(bytes,bytes,uint256,bytes32[])", values: [BytesLike, BytesLike, BigNumberish, BytesLike[]]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "version()", values?: undefined): string;
    decodeFunctionResult(functionFragment: "addDomain(uint256,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addDomain(uint256,uint256,uint256,string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addLocalSkill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addLocalSkill()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "annotateTransaction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "annotateTransaction(bytes32,string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approveExitRecovery", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approveExitRecovery()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approveStake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approveStake(address,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "authority()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bootstrapColony", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bootstrapColony(address[],int256[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burnTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burnTokens(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelExpenditure", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelExpenditure(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelExpenditureViaArbitration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelExpenditureViaArbitration(uint256,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkNotAdditionalProtectedVariable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkNotAdditionalProtectedVariable(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimColonyFunds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimColonyFunds(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimExpenditurePayout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimExpenditurePayout(uint256,uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimRewardPayout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deobligateStake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deobligateStake(address,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deprecateDomain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deprecateDomain(uint256,uint256,uint256,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deprecateExtension", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deprecateExtension(bytes32,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deprecateLocalSkill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deprecateLocalSkill(uint256,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "editColony", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "editColony(string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "editColonyByDelta", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "editColonyByDelta(string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "editDomain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "editDomain(uint256,uint256,uint256,string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emitDomainReputationPenalty", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emitDomainReputationReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emitDomainReputationReward(uint256,address,int256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emitSkillReputationPenalty", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emitSkillReputationPenalty(uint256,address,int256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emitSkillReputationReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emitSkillReputationReward(uint256,address,int256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enterRecoveryMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enterRecoveryMode()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeMetaTransaction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "exitRecoveryMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "exitRecoveryMode()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeExpenditure", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeExpenditure(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeExpenditureViaArbitration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeExpenditureViaArbitration(uint256,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeRewardPayout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeRewardPayout(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finishUpgrade", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finishUpgrade()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getApproval", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getApproval(address,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCapabilityRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCapabilityRoles(bytes4)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColonyNetwork", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColonyNetwork()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDomain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDomain(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDomainCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDomainCount()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDomainFromFundingPot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDomainFromFundingPot(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditure", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditure(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditureCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditureCount()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditureSlot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditureSlot(uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditureSlotPayout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditureSlotPayout(uint256,uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFundingPot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFundingPot(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFundingPotBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFundingPotBalance(uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFundingPotCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFundingPotCount()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFundingPotPayout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFundingPotPayout(uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetatransactionNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetatransactionNonce(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNonRewardPotsTotal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNonRewardPotsTotal(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getObligation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getObligation(address,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPayment(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPaymentCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPaymentCount()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRewardInverse", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRewardInverse()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRewardPayoutInfo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRewardPayoutInfo(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRootLocalSkill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRootLocalSkill()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTask", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTask(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTaskChangeNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTaskChangeNonce(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTaskCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTaskCount()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTaskRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTaskRole(uint256,uint8)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTaskWorkRatingSecret", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTaskWorkRatingSecret(uint256,uint8)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTaskWorkRatingSecretsInfo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTaskWorkRatingSecretsInfo(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getToken()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTokenApproval", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTokenApproval(address,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTotalTokenApproval", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTotalTokenApproval(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUserRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUserRoles(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasInheritedUserRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasUserRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasUserRole(address,uint256,uint8)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialiseColony", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialiseColony(address,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialiseRootLocalSkill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialiseRootLocalSkill()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "installExtension", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "installExtension(bytes32,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isInRecoveryMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isInRecoveryMode()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lockExpenditure", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lockExpenditure(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lockToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lockToken()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeArbitraryTransaction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeArbitraryTransaction(address,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeArbitraryTransactions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeArbitraryTransactions(address[],bytes[],bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeExpenditure", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeExpenditure(uint256,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeSingleArbitraryTransaction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeSingleArbitraryTransaction(address,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintTokens(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintTokensFor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintTokensFor(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall(bytes[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "numRecoveryRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "numRecoveryRoles()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "obligateStake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "obligateStake(address,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerColonyLabel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerColonyLabel(string,string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeRecoveryRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeRecoveryRole(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAdministrationRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAdministrationRole(uint256,uint256,address,uint256,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setArbitrationRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setArbitrationRole(uint256,uint256,address,uint256,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setArchitectureRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setArchitectureRole(uint256,uint256,address,uint256,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultGlobalClaimDelay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultGlobalClaimDelay(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureClaimDelay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureClaimDelay(uint256,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureClaimDelays", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureClaimDelays(uint256,uint256[],uint256[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureMetadata(uint256,uint256,uint256,string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureMetadata(uint256,string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditurePayout(uint256,uint256,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditurePayoutModifiers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditurePayoutModifiers(uint256,uint256[],int256[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditurePayouts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditurePayouts(uint256,uint256[],address,uint256[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureRecipient", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureRecipient(uint256,uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureRecipients", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureRecipients(uint256,uint256[],address[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureSkill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureSkill(uint256,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureSkills", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureSkills(uint256,uint256[],uint256[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureState", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFundingRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFundingRole(uint256,uint256,address,uint256,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRecoveryRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRecoveryRole(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRewardInverse", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRewardInverse(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRootRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRootRole(address,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setStorageSlotRecovery", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setStorageSlotRecovery(uint256,bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUserRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUserRoles(uint256,uint256,address,uint256,bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "startNextRewardPayout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferExpenditure", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferExpenditure(uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferExpenditureViaArbitration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferExpenditureViaArbitration(uint256,uint256,uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferStake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferStake(uint256,uint256,address,address,uint256,uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uninstallExtension", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uninstallExtension(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unlockToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unlockToken()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unlockTokenForUser", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unlockTokenForUser(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateApprovalAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateApprovalAmount(address,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateColonyOrbitDB", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateColonyOrbitDB(string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgrade(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeExtension", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeExtension(bytes32,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userCanSetRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userCanSetRoles(address,uint256,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validateDomainInheritance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validateDomainInheritance(uint256,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifyReputationProof", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifyReputationProof(bytes,bytes,uint256,bytes32[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version()", data: BytesLike): Result;
    events: {
        "Annotation(address,bytes32,string)": EventFragment;
        "ArbitraryReputationUpdate(address,address,uint256,int256)": EventFragment;
        "ArbitraryTransaction(address,bytes,bool)": EventFragment;
        "ColonyBootstrapped(address,address[],int256[])": EventFragment;
        "ColonyFundsClaimed(address,address,uint256,uint256)": EventFragment;
        "ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)": EventFragment;
        "ColonyInitialised(address,address,address)": EventFragment;
        "ColonyMetadata(address,string)": EventFragment;
        "ColonyMetadataDelta(address,string)": EventFragment;
        "ColonyRewardInverseSet(address,uint256)": EventFragment;
        "ColonyRoleSet(address,address,uint256,uint8,bool)": EventFragment;
        "ColonyUpgraded(address,uint256,uint256)": EventFragment;
        "DomainAdded(address,uint256)": EventFragment;
        "DomainDeprecated(address,uint256,bool)": EventFragment;
        "DomainMetadata(address,uint256,string)": EventFragment;
        "ExpenditureAdded(address,uint256)": EventFragment;
        "ExpenditureCancelled(address,uint256)": EventFragment;
        "ExpenditureClaimDelaySet(address,uint256,uint256,uint256)": EventFragment;
        "ExpenditureFinalized(address,uint256)": EventFragment;
        "ExpenditureGlobalClaimDelaySet(address,uint256)": EventFragment;
        "ExpenditureLocked(address,uint256)": EventFragment;
        "ExpenditureMetadataSet(address,uint256,string)": EventFragment;
        "ExpenditurePayoutModifierSet(address,uint256,uint256,int256)": EventFragment;
        "ExpenditurePayoutSet(address,uint256,uint256,address,uint256)": EventFragment;
        "ExpenditureRecipientSet(address,uint256,uint256,address)": EventFragment;
        "ExpenditureSkillSet(address,uint256,uint256,uint256)": EventFragment;
        "ExpenditureStateChanged(address,uint256,uint256,bool[],bytes32[],bytes32)": EventFragment;
        "ExpenditureTransferred(address,uint256,address)": EventFragment;
        "FundingPotAdded(uint256)": EventFragment;
        "LocalSkillAdded(address,uint256)": EventFragment;
        "LocalSkillDeprecated(address,uint256,bool)": EventFragment;
        "MetaTransactionExecuted(address,address,bytes)": EventFragment;
        "PaymentAdded(address,uint256)": EventFragment;
        "PaymentFinalized(address,uint256)": EventFragment;
        "PaymentPayoutSet(address,uint256,address,uint256)": EventFragment;
        "PaymentRecipientSet(address,uint256,address)": EventFragment;
        "PaymentSkillSet(address,uint256,uint256)": EventFragment;
        "PayoutClaimed(address,uint256,address,uint256)": EventFragment;
        "PayoutClaimed(address,uint256,uint256,address,uint256)": EventFragment;
        "RecoveryModeEntered(address)": EventFragment;
        "RecoveryModeExitApproved(address)": EventFragment;
        "RecoveryModeExited(address)": EventFragment;
        "RecoveryRoleSet(address,bool)": EventFragment;
        "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)": EventFragment;
        "RewardPayoutClaimed(uint256,address,uint256,uint256)": EventFragment;
        "RewardPayoutCycleEnded(address,uint256)": EventFragment;
        "RewardPayoutCycleStarted(address,uint256)": EventFragment;
        "TaskAdded(address,uint256)": EventFragment;
        "TaskBriefSet(uint256,bytes32)": EventFragment;
        "TaskCanceled(uint256)": EventFragment;
        "TaskChangedViaSignatures(address[])": EventFragment;
        "TaskCompleted(address,uint256)": EventFragment;
        "TaskDeliverableSubmitted(address,uint256,bytes32)": EventFragment;
        "TaskDueDateSet(uint256,uint256)": EventFragment;
        "TaskFinalized(address,uint256)": EventFragment;
        "TaskPayoutSet(uint256,uint8,address,uint256)": EventFragment;
        "TaskRoleUserSet(uint256,uint8,address)": EventFragment;
        "TaskSkillSet(uint256,uint256)": EventFragment;
        "TaskWorkRatingRevealed(address,uint256,uint8,uint8)": EventFragment;
        "TokenUnlocked(address)": EventFragment;
        "TokensBurned(address,address,uint256)": EventFragment;
        "TokensMinted(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Annotation"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Annotation(address,bytes32,string)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ArbitraryReputationUpdate"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ArbitraryReputationUpdate(address,address,uint256,int256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ArbitraryTransaction"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ArbitraryTransaction(address,bytes,bool)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyBootstrapped"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyBootstrapped(address,address[],int256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyFundsClaimed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyFundsClaimed(address,address,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyFundsMovedBetweenFundingPots"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyInitialised"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyInitialised(address,address,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyMetadata"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyMetadata(address,string)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyMetadataDelta"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyMetadataDelta(address,string)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyRewardInverseSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyRewardInverseSet(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyRoleSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyRoleSet(address,address,uint256,uint8,bool)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyUpgraded(address,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DomainAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DomainAdded(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DomainDeprecated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DomainDeprecated(address,uint256,bool)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DomainMetadata"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DomainMetadata(address,uint256,string)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureAdded(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureCancelled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureCancelled(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureClaimDelaySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureClaimDelaySet(address,uint256,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureFinalized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureFinalized(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureGlobalClaimDelaySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureGlobalClaimDelaySet(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureLocked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureLocked(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureMetadataSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureMetadataSet(address,uint256,string)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditurePayoutModifierSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditurePayoutModifierSet(address,uint256,uint256,int256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditurePayoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditurePayoutSet(address,uint256,uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureRecipientSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureRecipientSet(address,uint256,uint256,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureSkillSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureSkillSet(address,uint256,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureStateChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureStateChanged(address,uint256,uint256,bool[],bytes32[],bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpenditureTransferred(address,uint256,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FundingPotAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FundingPotAdded(uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LocalSkillAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LocalSkillAdded(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LocalSkillDeprecated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LocalSkillDeprecated(address,uint256,bool)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted(address,address,bytes)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentAdded(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentFinalized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentFinalized(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentPayoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentPayoutSet(address,uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentRecipientSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentRecipientSet(address,uint256,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentSkillSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentSkillSet(address,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PayoutClaimed(address,uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PayoutClaimed(address,uint256,uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeEntered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeEntered(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeExitApproved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeExitApproved(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeExited"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeExited(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryRoleSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryRoleSet(address,bool)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryStorageSlotSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardPayoutClaimed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardPayoutClaimed(uint256,address,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardPayoutCycleEnded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardPayoutCycleEnded(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardPayoutCycleStarted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardPayoutCycleStarted(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskAdded(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskBriefSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskBriefSet(uint256,bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskCanceled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskCanceled(uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskChangedViaSignatures"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskChangedViaSignatures(address[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskCompleted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskCompleted(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskDeliverableSubmitted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskDeliverableSubmitted(address,uint256,bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskDueDateSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskDueDateSet(uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskFinalized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskFinalized(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskPayoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskPayoutSet(uint256,uint8,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskRoleUserSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskRoleUserSet(uint256,uint8,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskSkillSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskSkillSet(uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskWorkRatingRevealed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TaskWorkRatingRevealed(address,uint256,uint8,uint8)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenUnlocked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenUnlocked(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokensBurned"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokensBurned(address,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokensMinted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokensMinted(address,address,uint256)"): EventFragment;
}
export interface AnnotationEventObject {
    agent: string;
    txHash: string;
    metadata: string;
}
export type AnnotationEvent = TypedEvent<[
    string,
    string,
    string
], AnnotationEventObject>;
export type AnnotationEventFilter = TypedEventFilter<AnnotationEvent>;
export interface ArbitraryReputationUpdateEventObject {
    agent: string;
    user: string;
    skillId: BigNumber;
    amount: BigNumber;
}
export type ArbitraryReputationUpdateEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    BigNumber
], ArbitraryReputationUpdateEventObject>;
export type ArbitraryReputationUpdateEventFilter = TypedEventFilter<ArbitraryReputationUpdateEvent>;
export interface ArbitraryTransactionEventObject {
    target: string;
    data: string;
    success: boolean;
}
export type ArbitraryTransactionEvent = TypedEvent<[
    string,
    string,
    boolean
], ArbitraryTransactionEventObject>;
export type ArbitraryTransactionEventFilter = TypedEventFilter<ArbitraryTransactionEvent>;
export interface ColonyBootstrappedEventObject {
    agent: string;
    users: string[];
    amounts: BigNumber[];
}
export type ColonyBootstrappedEvent = TypedEvent<[
    string,
    string[],
    BigNumber[]
], ColonyBootstrappedEventObject>;
export type ColonyBootstrappedEventFilter = TypedEventFilter<ColonyBootstrappedEvent>;
export interface ColonyFundsClaimedEventObject {
    agent: string;
    token: string;
    fee: BigNumber;
    payoutRemainder: BigNumber;
}
export type ColonyFundsClaimedEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    BigNumber
], ColonyFundsClaimedEventObject>;
export type ColonyFundsClaimedEventFilter = TypedEventFilter<ColonyFundsClaimedEvent>;
export interface ColonyFundsMovedBetweenFundingPotsEventObject {
    agent: string;
    fromPot: BigNumber;
    toPot: BigNumber;
    amount: BigNumber;
    token: string;
}
export type ColonyFundsMovedBetweenFundingPotsEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
], ColonyFundsMovedBetweenFundingPotsEventObject>;
export type ColonyFundsMovedBetweenFundingPotsEventFilter = TypedEventFilter<ColonyFundsMovedBetweenFundingPotsEvent>;
export interface ColonyInitialisedEventObject {
    agent: string;
    colonyNetwork: string;
    token: string;
}
export type ColonyInitialisedEvent = TypedEvent<[
    string,
    string,
    string
], ColonyInitialisedEventObject>;
export type ColonyInitialisedEventFilter = TypedEventFilter<ColonyInitialisedEvent>;
export interface ColonyMetadataEventObject {
    agent: string;
    metadata: string;
}
export type ColonyMetadataEvent = TypedEvent<[
    string,
    string
], ColonyMetadataEventObject>;
export type ColonyMetadataEventFilter = TypedEventFilter<ColonyMetadataEvent>;
export interface ColonyMetadataDeltaEventObject {
    agent: string;
    metadata: string;
}
export type ColonyMetadataDeltaEvent = TypedEvent<[
    string,
    string
], ColonyMetadataDeltaEventObject>;
export type ColonyMetadataDeltaEventFilter = TypedEventFilter<ColonyMetadataDeltaEvent>;
export interface ColonyRewardInverseSetEventObject {
    agent: string;
    rewardInverse: BigNumber;
}
export type ColonyRewardInverseSetEvent = TypedEvent<[
    string,
    BigNumber
], ColonyRewardInverseSetEventObject>;
export type ColonyRewardInverseSetEventFilter = TypedEventFilter<ColonyRewardInverseSetEvent>;
export interface ColonyRoleSetEventObject {
    agent: string;
    user: string;
    domainId: BigNumber;
    role: number;
    setTo: boolean;
}
export type ColonyRoleSetEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    number,
    boolean
], ColonyRoleSetEventObject>;
export type ColonyRoleSetEventFilter = TypedEventFilter<ColonyRoleSetEvent>;
export interface ColonyUpgradedEventObject {
    agent: string;
    oldVersion: BigNumber;
    newVersion: BigNumber;
}
export type ColonyUpgradedEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], ColonyUpgradedEventObject>;
export type ColonyUpgradedEventFilter = TypedEventFilter<ColonyUpgradedEvent>;
export interface DomainAddedEventObject {
    agent: string;
    domainId: BigNumber;
}
export type DomainAddedEvent = TypedEvent<[
    string,
    BigNumber
], DomainAddedEventObject>;
export type DomainAddedEventFilter = TypedEventFilter<DomainAddedEvent>;
export interface DomainDeprecatedEventObject {
    agent: string;
    domainId: BigNumber;
    deprecated: boolean;
}
export type DomainDeprecatedEvent = TypedEvent<[
    string,
    BigNumber,
    boolean
], DomainDeprecatedEventObject>;
export type DomainDeprecatedEventFilter = TypedEventFilter<DomainDeprecatedEvent>;
export interface DomainMetadataEventObject {
    agent: string;
    domainId: BigNumber;
    metadata: string;
}
export type DomainMetadataEvent = TypedEvent<[
    string,
    BigNumber,
    string
], DomainMetadataEventObject>;
export type DomainMetadataEventFilter = TypedEventFilter<DomainMetadataEvent>;
export interface ExpenditureAddedEventObject {
    agent: string;
    expenditureId: BigNumber;
}
export type ExpenditureAddedEvent = TypedEvent<[
    string,
    BigNumber
], ExpenditureAddedEventObject>;
export type ExpenditureAddedEventFilter = TypedEventFilter<ExpenditureAddedEvent>;
export interface ExpenditureCancelledEventObject {
    agent: string;
    expenditureId: BigNumber;
}
export type ExpenditureCancelledEvent = TypedEvent<[
    string,
    BigNumber
], ExpenditureCancelledEventObject>;
export type ExpenditureCancelledEventFilter = TypedEventFilter<ExpenditureCancelledEvent>;
export interface ExpenditureClaimDelaySetEventObject {
    agent: string;
    expenditureId: BigNumber;
    slot: BigNumber;
    claimDelay: BigNumber;
}
export type ExpenditureClaimDelaySetEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    BigNumber
], ExpenditureClaimDelaySetEventObject>;
export type ExpenditureClaimDelaySetEventFilter = TypedEventFilter<ExpenditureClaimDelaySetEvent>;
export interface ExpenditureFinalizedEventObject {
    agent: string;
    expenditureId: BigNumber;
}
export type ExpenditureFinalizedEvent = TypedEvent<[
    string,
    BigNumber
], ExpenditureFinalizedEventObject>;
export type ExpenditureFinalizedEventFilter = TypedEventFilter<ExpenditureFinalizedEvent>;
export interface ExpenditureGlobalClaimDelaySetEventObject {
    agent: string;
    globalClaimDelay: BigNumber;
}
export type ExpenditureGlobalClaimDelaySetEvent = TypedEvent<[
    string,
    BigNumber
], ExpenditureGlobalClaimDelaySetEventObject>;
export type ExpenditureGlobalClaimDelaySetEventFilter = TypedEventFilter<ExpenditureGlobalClaimDelaySetEvent>;
export interface ExpenditureLockedEventObject {
    agent: string;
    expenditureId: BigNumber;
}
export type ExpenditureLockedEvent = TypedEvent<[
    string,
    BigNumber
], ExpenditureLockedEventObject>;
export type ExpenditureLockedEventFilter = TypedEventFilter<ExpenditureLockedEvent>;
export interface ExpenditureMetadataSetEventObject {
    agent: string;
    expenditureId: BigNumber;
    metadata: string;
}
export type ExpenditureMetadataSetEvent = TypedEvent<[
    string,
    BigNumber,
    string
], ExpenditureMetadataSetEventObject>;
export type ExpenditureMetadataSetEventFilter = TypedEventFilter<ExpenditureMetadataSetEvent>;
export interface ExpenditurePayoutModifierSetEventObject {
    agent: string;
    expenditureId: BigNumber;
    slot: BigNumber;
    payoutModifier: BigNumber;
}
export type ExpenditurePayoutModifierSetEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    BigNumber
], ExpenditurePayoutModifierSetEventObject>;
export type ExpenditurePayoutModifierSetEventFilter = TypedEventFilter<ExpenditurePayoutModifierSetEvent>;
export interface ExpenditurePayoutSetEventObject {
    agent: string;
    expenditureId: BigNumber;
    slot: BigNumber;
    token: string;
    amount: BigNumber;
}
export type ExpenditurePayoutSetEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber
], ExpenditurePayoutSetEventObject>;
export type ExpenditurePayoutSetEventFilter = TypedEventFilter<ExpenditurePayoutSetEvent>;
export interface ExpenditureRecipientSetEventObject {
    agent: string;
    expenditureId: BigNumber;
    slot: BigNumber;
    recipient: string;
}
export type ExpenditureRecipientSetEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    string
], ExpenditureRecipientSetEventObject>;
export type ExpenditureRecipientSetEventFilter = TypedEventFilter<ExpenditureRecipientSetEvent>;
export interface ExpenditureSkillSetEventObject {
    agent: string;
    expenditureId: BigNumber;
    slot: BigNumber;
    skillId: BigNumber;
}
export type ExpenditureSkillSetEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    BigNumber
], ExpenditureSkillSetEventObject>;
export type ExpenditureSkillSetEventFilter = TypedEventFilter<ExpenditureSkillSetEvent>;
export interface ExpenditureStateChangedEventObject {
    agent: string;
    expenditureId: BigNumber;
    storageSlot: BigNumber;
    mask: boolean[];
    keys: string[];
    value: string;
}
export type ExpenditureStateChangedEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    boolean[],
    string[],
    string
], ExpenditureStateChangedEventObject>;
export type ExpenditureStateChangedEventFilter = TypedEventFilter<ExpenditureStateChangedEvent>;
export interface ExpenditureTransferredEventObject {
    agent: string;
    expenditureId: BigNumber;
    owner: string;
}
export type ExpenditureTransferredEvent = TypedEvent<[
    string,
    BigNumber,
    string
], ExpenditureTransferredEventObject>;
export type ExpenditureTransferredEventFilter = TypedEventFilter<ExpenditureTransferredEvent>;
export interface FundingPotAddedEventObject {
    fundingPotId: BigNumber;
}
export type FundingPotAddedEvent = TypedEvent<[
    BigNumber
], FundingPotAddedEventObject>;
export type FundingPotAddedEventFilter = TypedEventFilter<FundingPotAddedEvent>;
export interface LocalSkillAddedEventObject {
    agent: string;
    localSkillId: BigNumber;
}
export type LocalSkillAddedEvent = TypedEvent<[
    string,
    BigNumber
], LocalSkillAddedEventObject>;
export type LocalSkillAddedEventFilter = TypedEventFilter<LocalSkillAddedEvent>;
export interface LocalSkillDeprecatedEventObject {
    agent: string;
    localSkillId: BigNumber;
    deprecated: boolean;
}
export type LocalSkillDeprecatedEvent = TypedEvent<[
    string,
    BigNumber,
    boolean
], LocalSkillDeprecatedEventObject>;
export type LocalSkillDeprecatedEventFilter = TypedEventFilter<LocalSkillDeprecatedEvent>;
export interface MetaTransactionExecutedEventObject {
    userAddress: string;
    relayerAddress: string;
    payload: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<[
    string,
    string,
    string
], MetaTransactionExecutedEventObject>;
export type MetaTransactionExecutedEventFilter = TypedEventFilter<MetaTransactionExecutedEvent>;
export interface PaymentAddedEventObject {
    agent: string;
    paymentId: BigNumber;
}
export type PaymentAddedEvent = TypedEvent<[
    string,
    BigNumber
], PaymentAddedEventObject>;
export type PaymentAddedEventFilter = TypedEventFilter<PaymentAddedEvent>;
export interface PaymentFinalizedEventObject {
    agent: string;
    paymentId: BigNumber;
}
export type PaymentFinalizedEvent = TypedEvent<[
    string,
    BigNumber
], PaymentFinalizedEventObject>;
export type PaymentFinalizedEventFilter = TypedEventFilter<PaymentFinalizedEvent>;
export interface PaymentPayoutSetEventObject {
    agent: string;
    paymentId: BigNumber;
    token: string;
    amount: BigNumber;
}
export type PaymentPayoutSetEvent = TypedEvent<[
    string,
    BigNumber,
    string,
    BigNumber
], PaymentPayoutSetEventObject>;
export type PaymentPayoutSetEventFilter = TypedEventFilter<PaymentPayoutSetEvent>;
export interface PaymentRecipientSetEventObject {
    agent: string;
    paymentId: BigNumber;
    recipient: string;
}
export type PaymentRecipientSetEvent = TypedEvent<[
    string,
    BigNumber,
    string
], PaymentRecipientSetEventObject>;
export type PaymentRecipientSetEventFilter = TypedEventFilter<PaymentRecipientSetEvent>;
export interface PaymentSkillSetEventObject {
    agent: string;
    paymentId: BigNumber;
    skillId: BigNumber;
}
export type PaymentSkillSetEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], PaymentSkillSetEventObject>;
export type PaymentSkillSetEventFilter = TypedEventFilter<PaymentSkillSetEvent>;
export interface PayoutClaimed_address_uint256_address_uint256_EventObject {
    agent: string;
    fundingPotId: BigNumber;
    token: string;
    amount: BigNumber;
}
export type PayoutClaimed_address_uint256_address_uint256_Event = TypedEvent<[
    string,
    BigNumber,
    string,
    BigNumber
], PayoutClaimed_address_uint256_address_uint256_EventObject>;
export type PayoutClaimed_address_uint256_address_uint256_EventFilter = TypedEventFilter<PayoutClaimed_address_uint256_address_uint256_Event>;
export interface PayoutClaimed_address_uint256_uint256_address_uint256_EventObject {
    agent: string;
    id: BigNumber;
    slot: BigNumber;
    token: string;
    tokenPayout: BigNumber;
}
export type PayoutClaimed_address_uint256_uint256_address_uint256_Event = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber
], PayoutClaimed_address_uint256_uint256_address_uint256_EventObject>;
export type PayoutClaimed_address_uint256_uint256_address_uint256_EventFilter = TypedEventFilter<PayoutClaimed_address_uint256_uint256_address_uint256_Event>;
export interface RecoveryModeEnteredEventObject {
    user: string;
}
export type RecoveryModeEnteredEvent = TypedEvent<[
    string
], RecoveryModeEnteredEventObject>;
export type RecoveryModeEnteredEventFilter = TypedEventFilter<RecoveryModeEnteredEvent>;
export interface RecoveryModeExitApprovedEventObject {
    user: string;
}
export type RecoveryModeExitApprovedEvent = TypedEvent<[
    string
], RecoveryModeExitApprovedEventObject>;
export type RecoveryModeExitApprovedEventFilter = TypedEventFilter<RecoveryModeExitApprovedEvent>;
export interface RecoveryModeExitedEventObject {
    user: string;
}
export type RecoveryModeExitedEvent = TypedEvent<[
    string
], RecoveryModeExitedEventObject>;
export type RecoveryModeExitedEventFilter = TypedEventFilter<RecoveryModeExitedEvent>;
export interface RecoveryRoleSetEventObject {
    user: string;
    setTo: boolean;
}
export type RecoveryRoleSetEvent = TypedEvent<[
    string,
    boolean
], RecoveryRoleSetEventObject>;
export type RecoveryRoleSetEventFilter = TypedEventFilter<RecoveryRoleSetEvent>;
export interface RecoveryStorageSlotSetEventObject {
    user: string;
    slot: BigNumber;
    fromValue: string;
    toValue: string;
}
export type RecoveryStorageSlotSetEvent = TypedEvent<[
    string,
    BigNumber,
    string,
    string
], RecoveryStorageSlotSetEventObject>;
export type RecoveryStorageSlotSetEventFilter = TypedEventFilter<RecoveryStorageSlotSetEvent>;
export interface RewardPayoutClaimedEventObject {
    rewardPayoutId: BigNumber;
    user: string;
    fee: BigNumber;
    rewardRemainder: BigNumber;
}
export type RewardPayoutClaimedEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber,
    BigNumber
], RewardPayoutClaimedEventObject>;
export type RewardPayoutClaimedEventFilter = TypedEventFilter<RewardPayoutClaimedEvent>;
export interface RewardPayoutCycleEndedEventObject {
    agent: string;
    rewardPayoutId: BigNumber;
}
export type RewardPayoutCycleEndedEvent = TypedEvent<[
    string,
    BigNumber
], RewardPayoutCycleEndedEventObject>;
export type RewardPayoutCycleEndedEventFilter = TypedEventFilter<RewardPayoutCycleEndedEvent>;
export interface RewardPayoutCycleStartedEventObject {
    agent: string;
    rewardPayoutId: BigNumber;
}
export type RewardPayoutCycleStartedEvent = TypedEvent<[
    string,
    BigNumber
], RewardPayoutCycleStartedEventObject>;
export type RewardPayoutCycleStartedEventFilter = TypedEventFilter<RewardPayoutCycleStartedEvent>;
export interface TaskAddedEventObject {
    agent: string;
    taskId: BigNumber;
}
export type TaskAddedEvent = TypedEvent<[
    string,
    BigNumber
], TaskAddedEventObject>;
export type TaskAddedEventFilter = TypedEventFilter<TaskAddedEvent>;
export interface TaskBriefSetEventObject {
    taskId: BigNumber;
    specificationHash: string;
}
export type TaskBriefSetEvent = TypedEvent<[
    BigNumber,
    string
], TaskBriefSetEventObject>;
export type TaskBriefSetEventFilter = TypedEventFilter<TaskBriefSetEvent>;
export interface TaskCanceledEventObject {
    taskId: BigNumber;
}
export type TaskCanceledEvent = TypedEvent<[
    BigNumber
], TaskCanceledEventObject>;
export type TaskCanceledEventFilter = TypedEventFilter<TaskCanceledEvent>;
export interface TaskChangedViaSignaturesEventObject {
    reviewerAddresses: string[];
}
export type TaskChangedViaSignaturesEvent = TypedEvent<[
    string[]
], TaskChangedViaSignaturesEventObject>;
export type TaskChangedViaSignaturesEventFilter = TypedEventFilter<TaskChangedViaSignaturesEvent>;
export interface TaskCompletedEventObject {
    agent: string;
    taskId: BigNumber;
}
export type TaskCompletedEvent = TypedEvent<[
    string,
    BigNumber
], TaskCompletedEventObject>;
export type TaskCompletedEventFilter = TypedEventFilter<TaskCompletedEvent>;
export interface TaskDeliverableSubmittedEventObject {
    agent: string;
    taskId: BigNumber;
    deliverableHash: string;
}
export type TaskDeliverableSubmittedEvent = TypedEvent<[
    string,
    BigNumber,
    string
], TaskDeliverableSubmittedEventObject>;
export type TaskDeliverableSubmittedEventFilter = TypedEventFilter<TaskDeliverableSubmittedEvent>;
export interface TaskDueDateSetEventObject {
    taskId: BigNumber;
    dueDate: BigNumber;
}
export type TaskDueDateSetEvent = TypedEvent<[
    BigNumber,
    BigNumber
], TaskDueDateSetEventObject>;
export type TaskDueDateSetEventFilter = TypedEventFilter<TaskDueDateSetEvent>;
export interface TaskFinalizedEventObject {
    agent: string;
    taskId: BigNumber;
}
export type TaskFinalizedEvent = TypedEvent<[
    string,
    BigNumber
], TaskFinalizedEventObject>;
export type TaskFinalizedEventFilter = TypedEventFilter<TaskFinalizedEvent>;
export interface TaskPayoutSetEventObject {
    taskId: BigNumber;
    role: number;
    token: string;
    amount: BigNumber;
}
export type TaskPayoutSetEvent = TypedEvent<[
    BigNumber,
    number,
    string,
    BigNumber
], TaskPayoutSetEventObject>;
export type TaskPayoutSetEventFilter = TypedEventFilter<TaskPayoutSetEvent>;
export interface TaskRoleUserSetEventObject {
    taskId: BigNumber;
    role: number;
    user: string;
}
export type TaskRoleUserSetEvent = TypedEvent<[
    BigNumber,
    number,
    string
], TaskRoleUserSetEventObject>;
export type TaskRoleUserSetEventFilter = TypedEventFilter<TaskRoleUserSetEvent>;
export interface TaskSkillSetEventObject {
    taskId: BigNumber;
    skillId: BigNumber;
}
export type TaskSkillSetEvent = TypedEvent<[
    BigNumber,
    BigNumber
], TaskSkillSetEventObject>;
export type TaskSkillSetEventFilter = TypedEventFilter<TaskSkillSetEvent>;
export interface TaskWorkRatingRevealedEventObject {
    agent: string;
    taskId: BigNumber;
    role: number;
    rating: number;
}
export type TaskWorkRatingRevealedEvent = TypedEvent<[
    string,
    BigNumber,
    number,
    number
], TaskWorkRatingRevealedEventObject>;
export type TaskWorkRatingRevealedEventFilter = TypedEventFilter<TaskWorkRatingRevealedEvent>;
export interface TokenUnlockedEventObject {
    agent: string;
}
export type TokenUnlockedEvent = TypedEvent<[string], TokenUnlockedEventObject>;
export type TokenUnlockedEventFilter = TypedEventFilter<TokenUnlockedEvent>;
export interface TokensBurnedEventObject {
    agent: string;
    token: string;
    amount: BigNumber;
}
export type TokensBurnedEvent = TypedEvent<[
    string,
    string,
    BigNumber
], TokensBurnedEventObject>;
export type TokensBurnedEventFilter = TypedEventFilter<TokensBurnedEvent>;
export interface TokensMintedEventObject {
    agent: string;
    who: string;
    amount: BigNumber;
}
export type TokensMintedEvent = TypedEvent<[
    string,
    string,
    BigNumber
], TokensMintedEventObject>;
export type TokensMintedEventFilter = TypedEventFilter<TokensMintedEvent>;
export interface IColony extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IColonyInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        "addDomain(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _parentDomainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "addDomain(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _parentDomainId: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        addLocalSkill(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "addLocalSkill()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        annotateTransaction(_txHash: BytesLike, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "annotateTransaction(bytes32,string)"(_txHash: BytesLike, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        approveExitRecovery(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "approveExitRecovery()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        approveStake(_approvee: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "approveStake(address,uint256,uint256)"(_approvee: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        authority(overrides?: CallOverrides): Promise<[string] & {
            colonyAuthority: string;
        }>;
        "authority()"(overrides?: CallOverrides): Promise<[string] & {
            colonyAuthority: string;
        }>;
        bootstrapColony(_users: string[], _amount: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "bootstrapColony(address[],int256[])"(_users: string[], _amount: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        burnTokens(token: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "burnTokens(address,uint256)"(token: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        cancelExpenditure(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "cancelExpenditure(uint256)"(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        cancelExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "cancelExpenditureViaArbitration(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        checkNotAdditionalProtectedVariable(_slot: BigNumberish, overrides?: CallOverrides): Promise<[void]>;
        "checkNotAdditionalProtectedVariable(uint256)"(_slot: BigNumberish, overrides?: CallOverrides): Promise<[void]>;
        claimColonyFunds(_token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "claimColonyFunds(address)"(_token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        claimExpenditurePayout(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "claimExpenditurePayout(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        claimRewardPayout(_payoutId: BigNumberish, _squareRoots: BigNumberish[], key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(_payoutId: BigNumberish, _squareRoots: BigNumberish[], key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        deobligateStake(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "deobligateStake(address,uint256,uint256)"(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        deprecateDomain(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "deprecateDomain(uint256,uint256,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        deprecateExtension(extensionId: BytesLike, deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "deprecateExtension(bytes32,bool)"(extensionId: BytesLike, deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        deprecateLocalSkill(localSkillId: BigNumberish, deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "deprecateLocalSkill(uint256,bool)"(localSkillId: BigNumberish, deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        editColony(_metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "editColony(string)"(_metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        editColonyByDelta(_metadataDelta: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "editColonyByDelta(string)"(_metadataDelta: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        editDomain(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "editDomain(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        emitDomainReputationPenalty(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        emitDomainReputationReward(_domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "emitDomainReputationReward(uint256,address,int256)"(_domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        emitSkillReputationPenalty(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "emitSkillReputationPenalty(uint256,address,int256)"(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        emitSkillReputationReward(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "emitSkillReputationReward(uint256,address,int256)"(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        enterRecoveryMode(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "enterRecoveryMode()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        exitRecoveryMode(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "exitRecoveryMode()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        finalizeExpenditure(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "finalizeExpenditure(uint256)"(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        finalizeExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "finalizeExpenditureViaArbitration(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        finalizeRewardPayout(_payoutId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "finalizeRewardPayout(uint256)"(_payoutId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        finishUpgrade(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "finishUpgrade()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        getApproval(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            approval: BigNumber;
        }>;
        "getApproval(address,address,uint256)"(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            approval: BigNumber;
        }>;
        getCapabilityRoles(_sig: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            roles: string;
        }>;
        "getCapabilityRoles(bytes4)"(_sig: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            roles: string;
        }>;
        getColonyNetwork(overrides?: CallOverrides): Promise<[string] & {
            colonyNetwork: string;
        }>;
        "getColonyNetwork()"(overrides?: CallOverrides): Promise<[string] & {
            colonyNetwork: string;
        }>;
        getDomain(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyDataTypes.DomainStructOutput
        ] & {
            domain: ColonyDataTypes.DomainStructOutput;
        }>;
        "getDomain(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyDataTypes.DomainStructOutput
        ] & {
            domain: ColonyDataTypes.DomainStructOutput;
        }>;
        getDomainCount(overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        "getDomainCount()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        getDomainFromFundingPot(_fundingPotId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            domainId: BigNumber;
        }>;
        "getDomainFromFundingPot(uint256)"(_fundingPotId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            domainId: BigNumber;
        }>;
        getExpenditure(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyDataTypes.ExpenditureStructOutput
        ] & {
            expenditure: ColonyDataTypes.ExpenditureStructOutput;
        }>;
        "getExpenditure(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyDataTypes.ExpenditureStructOutput
        ] & {
            expenditure: ColonyDataTypes.ExpenditureStructOutput;
        }>;
        getExpenditureCount(overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        "getExpenditureCount()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        getExpenditureSlot(_id: BigNumberish, _slot: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyDataTypes.ExpenditureSlotStructOutput
        ] & {
            expenditureSlot: ColonyDataTypes.ExpenditureSlotStructOutput;
        }>;
        "getExpenditureSlot(uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyDataTypes.ExpenditureSlotStructOutput
        ] & {
            expenditureSlot: ColonyDataTypes.ExpenditureSlotStructOutput;
        }>;
        getExpenditureSlotPayout(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            amount: BigNumber;
        }>;
        "getExpenditureSlotPayout(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            amount: BigNumber;
        }>;
        getFundingPot(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            BigNumber
        ] & {
            associatedType: number;
            associatedTypeId: BigNumber;
            payoutsWeCannotMake: BigNumber;
        }>;
        "getFundingPot(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            BigNumber
        ] & {
            associatedType: number;
            associatedTypeId: BigNumber;
            payoutsWeCannotMake: BigNumber;
        }>;
        getFundingPotBalance(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            balance: BigNumber;
        }>;
        "getFundingPotBalance(uint256,address)"(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            balance: BigNumber;
        }>;
        getFundingPotCount(overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        "getFundingPotCount()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        getFundingPotPayout(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            payout: BigNumber;
        }>;
        "getFundingPotPayout(uint256,address)"(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            payout: BigNumber;
        }>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        getNonRewardPotsTotal(_token: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            amount: BigNumber;
        }>;
        "getNonRewardPotsTotal(address)"(_token: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            amount: BigNumber;
        }>;
        getObligation(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            obligation: BigNumber;
        }>;
        "getObligation(address,address,uint256)"(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            obligation: BigNumber;
        }>;
        getPayment(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyDataTypes.PaymentStructOutput
        ] & {
            payment: ColonyDataTypes.PaymentStructOutput;
        }>;
        "getPayment(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyDataTypes.PaymentStructOutput
        ] & {
            payment: ColonyDataTypes.PaymentStructOutput;
        }>;
        getPaymentCount(overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        "getPaymentCount()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        getRewardInverse(overrides?: CallOverrides): Promise<[BigNumber] & {
            rewardInverse: BigNumber;
        }>;
        "getRewardInverse()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            rewardInverse: BigNumber;
        }>;
        getRewardPayoutInfo(_payoutId: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyDataTypes.RewardPayoutCycleStructOutput
        ] & {
            rewardPayoutCycle: ColonyDataTypes.RewardPayoutCycleStructOutput;
        }>;
        "getRewardPayoutInfo(uint256)"(_payoutId: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyDataTypes.RewardPayoutCycleStructOutput
        ] & {
            rewardPayoutCycle: ColonyDataTypes.RewardPayoutCycleStructOutput;
        }>;
        getRootLocalSkill(overrides?: CallOverrides): Promise<[BigNumber] & {
            rootLocalSkill: BigNumber;
        }>;
        "getRootLocalSkill()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            rootLocalSkill: BigNumber;
        }>;
        getTask(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            string,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber[]
        ] & {
            specificationHash: string;
            deliverableHash: string;
            status: number;
            dueDate: BigNumber;
            fundingPotId: BigNumber;
            completionTimestamp: BigNumber;
            domainId: BigNumber;
            skillIds: BigNumber[];
        }>;
        "getTask(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            string,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber[]
        ] & {
            specificationHash: string;
            deliverableHash: string;
            status: number;
            dueDate: BigNumber;
            fundingPotId: BigNumber;
            completionTimestamp: BigNumber;
            domainId: BigNumber;
            skillIds: BigNumber[];
        }>;
        getTaskChangeNonce(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        "getTaskChangeNonce(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        getTaskCount(overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        "getTaskCount()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        getTaskRole(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyDataTypes.RoleStructOutput
        ] & {
            role: ColonyDataTypes.RoleStructOutput;
        }>;
        "getTaskRole(uint256,uint8)"(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyDataTypes.RoleStructOutput
        ] & {
            role: ColonyDataTypes.RoleStructOutput;
        }>;
        getTaskWorkRatingSecret(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<[string] & {
            secret: string;
        }>;
        "getTaskWorkRatingSecret(uint256,uint8)"(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<[string] & {
            secret: string;
        }>;
        getTaskWorkRatingSecretsInfo(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nSecrets: BigNumber;
            lastSubmittedAt: BigNumber;
        }>;
        "getTaskWorkRatingSecretsInfo(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nSecrets: BigNumber;
            lastSubmittedAt: BigNumber;
        }>;
        getToken(overrides?: CallOverrides): Promise<[string] & {
            tokenAddress: string;
        }>;
        "getToken()"(overrides?: CallOverrides): Promise<[string] & {
            tokenAddress: string;
        }>;
        getTokenApproval(token: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            amount: BigNumber;
        }>;
        "getTokenApproval(address,address)"(token: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            amount: BigNumber;
        }>;
        getTotalTokenApproval(token: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            amount: BigNumber;
        }>;
        "getTotalTokenApproval(address)"(token: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            amount: BigNumber;
        }>;
        getUserRoles(_user: string, _domain: BigNumberish, overrides?: CallOverrides): Promise<[string] & {
            roles: string;
        }>;
        "getUserRoles(address,uint256)"(_user: string, _domain: BigNumberish, overrides?: CallOverrides): Promise<[string] & {
            roles: string;
        }>;
        hasInheritedUserRole(_user: string, _domainId: BigNumberish, _role: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<[boolean] & {
            hasRole: boolean;
        }>;
        "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(_user: string, _domainId: BigNumberish, _role: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<[boolean] & {
            hasRole: boolean;
        }>;
        hasUserRole(_user: string, _domainId: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<[boolean] & {
            hasRole: boolean;
        }>;
        "hasUserRole(address,uint256,uint8)"(_user: string, _domainId: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<[boolean] & {
            hasRole: boolean;
        }>;
        initialiseColony(_colonyNetworkAddress: string, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "initialiseColony(address,address)"(_colonyNetworkAddress: string, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        initialiseRootLocalSkill(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "initialiseRootLocalSkill()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        installExtension(extensionId: BytesLike, version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "installExtension(bytes32,uint256)"(extensionId: BytesLike, version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        isInRecoveryMode(overrides?: CallOverrides): Promise<[boolean] & {
            inRecoveryMode: boolean;
        }>;
        "isInRecoveryMode()"(overrides?: CallOverrides): Promise<[boolean] & {
            inRecoveryMode: boolean;
        }>;
        lockExpenditure(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "lockExpenditure(uint256)"(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        lockToken(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "lockToken()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        makeArbitraryTransaction(_to: string, _action: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "makeArbitraryTransaction(address,bytes)"(_to: string, _action: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        makeArbitraryTransactions(_targets: string[], _actions: BytesLike[], _strict: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "makeArbitraryTransactions(address[],bytes[],bool)"(_targets: string[], _actions: BytesLike[], _strict: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        makeExpenditure(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "makeExpenditure(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        makeSingleArbitraryTransaction(_target: string, _action: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "makeSingleArbitraryTransaction(address,bytes)"(_target: string, _action: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        mintTokens(_wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "mintTokens(uint256)"(_wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        mintTokensFor(_guy: string, _wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "mintTokensFor(address,uint256)"(_guy: string, _wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _fromChildSkillIndex: BigNumberish, _toChildSkillIndex: BigNumberish, _fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _fromChildSkillIndex: BigNumberish, _toChildSkillIndex: BigNumberish, _fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "multicall(bytes[])"(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        numRecoveryRoles(overrides?: CallOverrides): Promise<[BigNumber] & {
            numRoles: BigNumber;
        }>;
        "numRecoveryRoles()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            numRoles: BigNumber;
        }>;
        obligateStake(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "obligateStake(address,uint256,uint256)"(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string] & {
            colonyOwner: string;
        }>;
        "owner()"(overrides?: CallOverrides): Promise<[string] & {
            colonyOwner: string;
        }>;
        registerColonyLabel(colonyName: string, orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "registerColonyLabel(string,string)"(colonyName: string, orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        removeRecoveryRole(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "removeRecoveryRole(address)"(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setAdministrationRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setAdministrationRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setArbitrationRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setArbitrationRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setArchitectureRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setArchitectureRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setDefaultGlobalClaimDelay(_globalClaimDelay: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setDefaultGlobalClaimDelay(uint256)"(_globalClaimDelay: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setExpenditureClaimDelay(_id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditureClaimDelay(uint256,uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setExpenditureClaimDelays(_id: BigNumberish, _slots: BigNumberish[], _claimDelays: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _claimDelays: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditureMetadata(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditureMetadata(uint256,string)"(_id: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditurePayout(uint256,uint256,address,uint256)"(_id: BigNumberish, _slot: BigNumberish, _token: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _slot: BigNumberish, _token: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setExpenditurePayoutModifiers(_id: BigNumberish, _slots: BigNumberish[], _payoutModifiers: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(_id: BigNumberish, _slots: BigNumberish[], _payoutModifiers: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setExpenditurePayouts(_id: BigNumberish, _slots: BigNumberish[], _token: string, _amounts: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _token: string, _amounts: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setExpenditureRecipient(_id: BigNumberish, _slot: BigNumberish, _recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditureRecipient(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setExpenditureRecipients(_id: BigNumberish, _slots: BigNumberish[], _recipients: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditureRecipients(uint256,uint256[],address[])"(_id: BigNumberish, _slots: BigNumberish[], _recipients: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setExpenditureSkill(_id: BigNumberish, _slot: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditureSkill(uint256,uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setExpenditureSkills(_id: BigNumberish, _slots: BigNumberish[], _skillIds: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditureSkills(uint256,uint256[],uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _skillIds: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setExpenditureState(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _storageSlot: BigNumberish, _mask: boolean[], _keys: BytesLike[], _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _storageSlot: BigNumberish, _mask: boolean[], _keys: BytesLike[], _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setFundingRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setFundingRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setRecoveryRole(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setRecoveryRole(address)"(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setRewardInverse(_rewardInverse: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setRewardInverse(uint256)"(_rewardInverse: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setRootRole(_user: string, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setRootRole(address,bool)"(_user: string, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setStorageSlotRecovery(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setStorageSlotRecovery(uint256,bytes32)"(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setUserRoles(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _roles: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setUserRoles(uint256,uint256,address,uint256,bytes32)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _roles: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        startNextRewardPayout(_token: string, key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(_token: string, key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        transferExpenditure(_id: BigNumberish, _newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "transferExpenditure(uint256,address)"(_id: BigNumberish, _newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        transferExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        transferStake(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _obligator: string, _user: string, _domainId: BigNumberish, _amount: BigNumberish, _recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _obligator: string, _user: string, _domainId: BigNumberish, _amount: BigNumberish, _recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        uninstallExtension(extensionId: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "uninstallExtension(bytes32)"(extensionId: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        unlockToken(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "unlockToken()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        unlockTokenForUser(user: string, lockId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "unlockTokenForUser(address,uint256)"(user: string, lockId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        updateApprovalAmount(token: string, spender: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "updateApprovalAmount(address,address)"(token: string, spender: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        updateColonyOrbitDB(orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "updateColonyOrbitDB(string)"(orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        upgrade(_newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "upgrade(uint256)"(_newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        upgradeExtension(extensionId: BytesLike, newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "upgradeExtension(bytes32,uint256)"(extensionId: BytesLike, newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        userCanSetRoles(_user: string, _domainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<[boolean] & {
            canSet: boolean;
        }>;
        "userCanSetRoles(address,uint256,uint256,uint256)"(_user: string, _domainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<[boolean] & {
            canSet: boolean;
        }>;
        validateDomainInheritance(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<[boolean] & {
            valid: boolean;
        }>;
        "validateDomainInheritance(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<[boolean] & {
            valid: boolean;
        }>;
        verifyReputationProof(key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<[boolean] & {
            isValid: boolean;
        }>;
        "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<[boolean] & {
            isValid: boolean;
        }>;
        version(overrides?: CallOverrides): Promise<[BigNumber] & {
            colonyVersion: BigNumber;
        }>;
        "version()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            colonyVersion: BigNumber;
        }>;
    };
    "addDomain(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _parentDomainId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "addDomain(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _parentDomainId: BigNumberish, _metadata: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    addLocalSkill(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "addLocalSkill()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    annotateTransaction(_txHash: BytesLike, _metadata: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "annotateTransaction(bytes32,string)"(_txHash: BytesLike, _metadata: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    approveExitRecovery(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "approveExitRecovery()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    approveStake(_approvee: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "approveStake(address,uint256,uint256)"(_approvee: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    authority(overrides?: CallOverrides): Promise<string>;
    "authority()"(overrides?: CallOverrides): Promise<string>;
    bootstrapColony(_users: string[], _amount: BigNumberish[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "bootstrapColony(address[],int256[])"(_users: string[], _amount: BigNumberish[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    burnTokens(token: string, amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "burnTokens(address,uint256)"(token: string, amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    cancelExpenditure(_id: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "cancelExpenditure(uint256)"(_id: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    cancelExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "cancelExpenditureViaArbitration(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    checkNotAdditionalProtectedVariable(_slot: BigNumberish, overrides?: CallOverrides): Promise<void>;
    "checkNotAdditionalProtectedVariable(uint256)"(_slot: BigNumberish, overrides?: CallOverrides): Promise<void>;
    claimColonyFunds(_token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "claimColonyFunds(address)"(_token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    claimExpenditurePayout(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "claimExpenditurePayout(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    claimRewardPayout(_payoutId: BigNumberish, _squareRoots: BigNumberish[], key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(_payoutId: BigNumberish, _squareRoots: BigNumberish[], key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    deobligateStake(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "deobligateStake(address,uint256,uint256)"(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    deprecateDomain(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "deprecateDomain(uint256,uint256,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    deprecateExtension(extensionId: BytesLike, deprecated: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "deprecateExtension(bytes32,bool)"(extensionId: BytesLike, deprecated: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    deprecateLocalSkill(localSkillId: BigNumberish, deprecated: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "deprecateLocalSkill(uint256,bool)"(localSkillId: BigNumberish, deprecated: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    editColony(_metadata: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "editColony(string)"(_metadata: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    editColonyByDelta(_metadataDelta: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "editColonyByDelta(string)"(_metadataDelta: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    editDomain(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _metadata: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "editDomain(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _metadata: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    emitDomainReputationPenalty(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    emitDomainReputationReward(_domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "emitDomainReputationReward(uint256,address,int256)"(_domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    emitSkillReputationPenalty(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "emitSkillReputationPenalty(uint256,address,int256)"(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    emitSkillReputationReward(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "emitSkillReputationReward(uint256,address,int256)"(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    enterRecoveryMode(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "enterRecoveryMode()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    exitRecoveryMode(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "exitRecoveryMode()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    finalizeExpenditure(_id: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "finalizeExpenditure(uint256)"(_id: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    finalizeExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "finalizeExpenditureViaArbitration(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    finalizeRewardPayout(_payoutId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "finalizeRewardPayout(uint256)"(_payoutId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    finishUpgrade(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "finishUpgrade()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    getApproval(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "getApproval(address,address,uint256)"(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getCapabilityRoles(_sig: BytesLike, overrides?: CallOverrides): Promise<string>;
    "getCapabilityRoles(bytes4)"(_sig: BytesLike, overrides?: CallOverrides): Promise<string>;
    getColonyNetwork(overrides?: CallOverrides): Promise<string>;
    "getColonyNetwork()"(overrides?: CallOverrides): Promise<string>;
    getDomain(_id: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.DomainStructOutput>;
    "getDomain(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.DomainStructOutput>;
    getDomainCount(overrides?: CallOverrides): Promise<BigNumber>;
    "getDomainCount()"(overrides?: CallOverrides): Promise<BigNumber>;
    getDomainFromFundingPot(_fundingPotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "getDomainFromFundingPot(uint256)"(_fundingPotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getExpenditure(_id: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.ExpenditureStructOutput>;
    "getExpenditure(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.ExpenditureStructOutput>;
    getExpenditureCount(overrides?: CallOverrides): Promise<BigNumber>;
    "getExpenditureCount()"(overrides?: CallOverrides): Promise<BigNumber>;
    getExpenditureSlot(_id: BigNumberish, _slot: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.ExpenditureSlotStructOutput>;
    "getExpenditureSlot(uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.ExpenditureSlotStructOutput>;
    getExpenditureSlotPayout(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
    "getExpenditureSlotPayout(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
    getFundingPot(_id: BigNumberish, overrides?: CallOverrides): Promise<[
        number,
        BigNumber,
        BigNumber
    ] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
    }>;
    "getFundingPot(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[
        number,
        BigNumber,
        BigNumber
    ] & {
        associatedType: number;
        associatedTypeId: BigNumber;
        payoutsWeCannotMake: BigNumber;
    }>;
    getFundingPotBalance(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
    "getFundingPotBalance(uint256,address)"(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
    getFundingPotCount(overrides?: CallOverrides): Promise<BigNumber>;
    "getFundingPotCount()"(overrides?: CallOverrides): Promise<BigNumber>;
    getFundingPotPayout(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
    "getFundingPotPayout(uint256,address)"(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
    getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
    "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
    getNonRewardPotsTotal(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
    "getNonRewardPotsTotal(address)"(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
    getObligation(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "getObligation(address,address,uint256)"(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getPayment(_id: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.PaymentStructOutput>;
    "getPayment(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.PaymentStructOutput>;
    getPaymentCount(overrides?: CallOverrides): Promise<BigNumber>;
    "getPaymentCount()"(overrides?: CallOverrides): Promise<BigNumber>;
    getRewardInverse(overrides?: CallOverrides): Promise<BigNumber>;
    "getRewardInverse()"(overrides?: CallOverrides): Promise<BigNumber>;
    getRewardPayoutInfo(_payoutId: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.RewardPayoutCycleStructOutput>;
    "getRewardPayoutInfo(uint256)"(_payoutId: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.RewardPayoutCycleStructOutput>;
    getRootLocalSkill(overrides?: CallOverrides): Promise<BigNumber>;
    "getRootLocalSkill()"(overrides?: CallOverrides): Promise<BigNumber>;
    getTask(_id: BigNumberish, overrides?: CallOverrides): Promise<[
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
    }>;
    "getTask(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        specificationHash: string;
        deliverableHash: string;
        status: number;
        dueDate: BigNumber;
        fundingPotId: BigNumber;
        completionTimestamp: BigNumber;
        domainId: BigNumber;
        skillIds: BigNumber[];
    }>;
    getTaskChangeNonce(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "getTaskChangeNonce(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getTaskCount(overrides?: CallOverrides): Promise<BigNumber>;
    "getTaskCount()"(overrides?: CallOverrides): Promise<BigNumber>;
    getTaskRole(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.RoleStructOutput>;
    "getTaskRole(uint256,uint8)"(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.RoleStructOutput>;
    getTaskWorkRatingSecret(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<string>;
    "getTaskWorkRatingSecret(uint256,uint8)"(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<string>;
    getTaskWorkRatingSecretsInfo(_id: BigNumberish, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
    }>;
    "getTaskWorkRatingSecretsInfo(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nSecrets: BigNumber;
        lastSubmittedAt: BigNumber;
    }>;
    getToken(overrides?: CallOverrides): Promise<string>;
    "getToken()"(overrides?: CallOverrides): Promise<string>;
    getTokenApproval(token: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;
    "getTokenApproval(address,address)"(token: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;
    getTotalTokenApproval(token: string, overrides?: CallOverrides): Promise<BigNumber>;
    "getTotalTokenApproval(address)"(token: string, overrides?: CallOverrides): Promise<BigNumber>;
    getUserRoles(_user: string, _domain: BigNumberish, overrides?: CallOverrides): Promise<string>;
    "getUserRoles(address,uint256)"(_user: string, _domain: BigNumberish, overrides?: CallOverrides): Promise<string>;
    hasInheritedUserRole(_user: string, _domainId: BigNumberish, _role: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(_user: string, _domainId: BigNumberish, _role: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    hasUserRole(_user: string, _domainId: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    "hasUserRole(address,uint256,uint8)"(_user: string, _domainId: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    initialiseColony(_colonyNetworkAddress: string, _token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "initialiseColony(address,address)"(_colonyNetworkAddress: string, _token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    initialiseRootLocalSkill(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "initialiseRootLocalSkill()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    installExtension(extensionId: BytesLike, version: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "installExtension(bytes32,uint256)"(extensionId: BytesLike, version: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    isInRecoveryMode(overrides?: CallOverrides): Promise<boolean>;
    "isInRecoveryMode()"(overrides?: CallOverrides): Promise<boolean>;
    lockExpenditure(_id: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "lockExpenditure(uint256)"(_id: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    lockToken(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "lockToken()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    makeArbitraryTransaction(_to: string, _action: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "makeArbitraryTransaction(address,bytes)"(_to: string, _action: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    makeArbitraryTransactions(_targets: string[], _actions: BytesLike[], _strict: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "makeArbitraryTransactions(address[],bytes[],bool)"(_targets: string[], _actions: BytesLike[], _strict: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    makeExpenditure(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "makeExpenditure(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    makeSingleArbitraryTransaction(_target: string, _action: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "makeSingleArbitraryTransaction(address,bytes)"(_target: string, _action: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    mintTokens(_wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "mintTokens(uint256)"(_wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    mintTokensFor(_guy: string, _wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "mintTokensFor(address,uint256)"(_guy: string, _wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _fromChildSkillIndex: BigNumberish, _toChildSkillIndex: BigNumberish, _fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _fromChildSkillIndex: BigNumberish, _toChildSkillIndex: BigNumberish, _fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    multicall(data: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "multicall(bytes[])"(data: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;
    "numRecoveryRoles()"(overrides?: CallOverrides): Promise<BigNumber>;
    obligateStake(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "obligateStake(address,uint256,uint256)"(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    "owner()"(overrides?: CallOverrides): Promise<string>;
    registerColonyLabel(colonyName: string, orbitdb: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "registerColonyLabel(string,string)"(colonyName: string, orbitdb: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    removeRecoveryRole(_user: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "removeRecoveryRole(address)"(_user: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setAdministrationRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setAdministrationRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setArbitrationRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setArbitrationRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setArchitectureRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setArchitectureRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setDefaultGlobalClaimDelay(_globalClaimDelay: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setDefaultGlobalClaimDelay(uint256)"(_globalClaimDelay: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setExpenditureClaimDelay(_id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditureClaimDelay(uint256,uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setExpenditureClaimDelays(_id: BigNumberish, _slots: BigNumberish[], _claimDelays: BigNumberish[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _claimDelays: BigNumberish[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditureMetadata(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _metadata: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditureMetadata(uint256,string)"(_id: BigNumberish, _metadata: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditurePayout(uint256,uint256,address,uint256)"(_id: BigNumberish, _slot: BigNumberish, _token: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _slot: BigNumberish, _token: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setExpenditurePayoutModifiers(_id: BigNumberish, _slots: BigNumberish[], _payoutModifiers: BigNumberish[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(_id: BigNumberish, _slots: BigNumberish[], _payoutModifiers: BigNumberish[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setExpenditurePayouts(_id: BigNumberish, _slots: BigNumberish[], _token: string, _amounts: BigNumberish[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _token: string, _amounts: BigNumberish[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setExpenditureRecipient(_id: BigNumberish, _slot: BigNumberish, _recipient: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditureRecipient(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _recipient: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setExpenditureRecipients(_id: BigNumberish, _slots: BigNumberish[], _recipients: string[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditureRecipients(uint256,uint256[],address[])"(_id: BigNumberish, _slots: BigNumberish[], _recipients: string[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setExpenditureSkill(_id: BigNumberish, _slot: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditureSkill(uint256,uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setExpenditureSkills(_id: BigNumberish, _slots: BigNumberish[], _skillIds: BigNumberish[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditureSkills(uint256,uint256[],uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _skillIds: BigNumberish[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setExpenditureState(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _storageSlot: BigNumberish, _mask: boolean[], _keys: BytesLike[], _value: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _storageSlot: BigNumberish, _mask: boolean[], _keys: BytesLike[], _value: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setFundingRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setFundingRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setRecoveryRole(_user: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setRecoveryRole(address)"(_user: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setRewardInverse(_rewardInverse: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setRewardInverse(uint256)"(_rewardInverse: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setRootRole(_user: string, _setTo: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setRootRole(address,bool)"(_user: string, _setTo: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setStorageSlotRecovery(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setStorageSlotRecovery(uint256,bytes32)"(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setUserRoles(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _roles: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setUserRoles(uint256,uint256,address,uint256,bytes32)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _roles: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    startNextRewardPayout(_token: string, key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(_token: string, key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    transferExpenditure(_id: BigNumberish, _newOwner: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "transferExpenditure(uint256,address)"(_id: BigNumberish, _newOwner: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    transferExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _newOwner: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _newOwner: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    transferStake(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _obligator: string, _user: string, _domainId: BigNumberish, _amount: BigNumberish, _recipient: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _obligator: string, _user: string, _domainId: BigNumberish, _amount: BigNumberish, _recipient: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    uninstallExtension(extensionId: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "uninstallExtension(bytes32)"(extensionId: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    unlockToken(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "unlockToken()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    unlockTokenForUser(user: string, lockId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "unlockTokenForUser(address,uint256)"(user: string, lockId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    updateApprovalAmount(token: string, spender: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "updateApprovalAmount(address,address)"(token: string, spender: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    updateColonyOrbitDB(orbitdb: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "updateColonyOrbitDB(string)"(orbitdb: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    upgrade(_newVersion: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "upgrade(uint256)"(_newVersion: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    upgradeExtension(extensionId: BytesLike, newVersion: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "upgradeExtension(bytes32,uint256)"(extensionId: BytesLike, newVersion: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    userCanSetRoles(_user: string, _domainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    "userCanSetRoles(address,uint256,uint256,uint256)"(_user: string, _domainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    validateDomainInheritance(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    "validateDomainInheritance(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    verifyReputationProof(key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<boolean>;
    "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<boolean>;
    version(overrides?: CallOverrides): Promise<BigNumber>;
    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        "addDomain(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _parentDomainId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "addDomain(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _parentDomainId: BigNumberish, _metadata: string, overrides?: CallOverrides): Promise<void>;
        addLocalSkill(overrides?: CallOverrides): Promise<void>;
        "addLocalSkill()"(overrides?: CallOverrides): Promise<void>;
        annotateTransaction(_txHash: BytesLike, _metadata: string, overrides?: CallOverrides): Promise<void>;
        "annotateTransaction(bytes32,string)"(_txHash: BytesLike, _metadata: string, overrides?: CallOverrides): Promise<void>;
        approveExitRecovery(overrides?: CallOverrides): Promise<void>;
        "approveExitRecovery()"(overrides?: CallOverrides): Promise<void>;
        approveStake(_approvee: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "approveStake(address,uint256,uint256)"(_approvee: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        authority(overrides?: CallOverrides): Promise<string>;
        "authority()"(overrides?: CallOverrides): Promise<string>;
        bootstrapColony(_users: string[], _amount: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        "bootstrapColony(address[],int256[])"(_users: string[], _amount: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        burnTokens(token: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "burnTokens(address,uint256)"(token: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        cancelExpenditure(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "cancelExpenditure(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;
        cancelExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "cancelExpenditureViaArbitration(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: CallOverrides): Promise<void>;
        checkNotAdditionalProtectedVariable(_slot: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "checkNotAdditionalProtectedVariable(uint256)"(_slot: BigNumberish, overrides?: CallOverrides): Promise<void>;
        claimColonyFunds(_token: string, overrides?: CallOverrides): Promise<void>;
        "claimColonyFunds(address)"(_token: string, overrides?: CallOverrides): Promise<void>;
        claimExpenditurePayout(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: CallOverrides): Promise<void>;
        "claimExpenditurePayout(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: CallOverrides): Promise<void>;
        claimRewardPayout(_payoutId: BigNumberish, _squareRoots: BigNumberish[], key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(_payoutId: BigNumberish, _squareRoots: BigNumberish[], key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        deobligateStake(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "deobligateStake(address,uint256,uint256)"(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        deprecateDomain(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _deprecated: boolean, overrides?: CallOverrides): Promise<void>;
        "deprecateDomain(uint256,uint256,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _deprecated: boolean, overrides?: CallOverrides): Promise<void>;
        deprecateExtension(extensionId: BytesLike, deprecated: boolean, overrides?: CallOverrides): Promise<void>;
        "deprecateExtension(bytes32,bool)"(extensionId: BytesLike, deprecated: boolean, overrides?: CallOverrides): Promise<void>;
        deprecateLocalSkill(localSkillId: BigNumberish, deprecated: boolean, overrides?: CallOverrides): Promise<void>;
        "deprecateLocalSkill(uint256,bool)"(localSkillId: BigNumberish, deprecated: boolean, overrides?: CallOverrides): Promise<void>;
        editColony(_metadata: string, overrides?: CallOverrides): Promise<void>;
        "editColony(string)"(_metadata: string, overrides?: CallOverrides): Promise<void>;
        editColonyByDelta(_metadataDelta: string, overrides?: CallOverrides): Promise<void>;
        "editColonyByDelta(string)"(_metadataDelta: string, overrides?: CallOverrides): Promise<void>;
        editDomain(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _metadata: string, overrides?: CallOverrides): Promise<void>;
        "editDomain(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _metadata: string, overrides?: CallOverrides): Promise<void>;
        emitDomainReputationPenalty(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        emitDomainReputationReward(_domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "emitDomainReputationReward(uint256,address,int256)"(_domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        emitSkillReputationPenalty(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "emitSkillReputationPenalty(uint256,address,int256)"(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        emitSkillReputationReward(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "emitSkillReputationReward(uint256,address,int256)"(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        enterRecoveryMode(overrides?: CallOverrides): Promise<void>;
        "enterRecoveryMode()"(overrides?: CallOverrides): Promise<void>;
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: CallOverrides): Promise<string>;
        exitRecoveryMode(overrides?: CallOverrides): Promise<void>;
        "exitRecoveryMode()"(overrides?: CallOverrides): Promise<void>;
        finalizeExpenditure(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "finalizeExpenditure(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;
        finalizeExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "finalizeExpenditureViaArbitration(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: CallOverrides): Promise<void>;
        finalizeRewardPayout(_payoutId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "finalizeRewardPayout(uint256)"(_payoutId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        finishUpgrade(overrides?: CallOverrides): Promise<void>;
        "finishUpgrade()"(overrides?: CallOverrides): Promise<void>;
        getApproval(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getApproval(address,address,uint256)"(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getCapabilityRoles(_sig: BytesLike, overrides?: CallOverrides): Promise<string>;
        "getCapabilityRoles(bytes4)"(_sig: BytesLike, overrides?: CallOverrides): Promise<string>;
        getColonyNetwork(overrides?: CallOverrides): Promise<string>;
        "getColonyNetwork()"(overrides?: CallOverrides): Promise<string>;
        getDomain(_id: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.DomainStructOutput>;
        "getDomain(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.DomainStructOutput>;
        getDomainCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getDomainCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getDomainFromFundingPot(_fundingPotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getDomainFromFundingPot(uint256)"(_fundingPotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditure(_id: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.ExpenditureStructOutput>;
        "getExpenditure(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.ExpenditureStructOutput>;
        getExpenditureCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditureCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditureSlot(_id: BigNumberish, _slot: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.ExpenditureSlotStructOutput>;
        "getExpenditureSlot(uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.ExpenditureSlotStructOutput>;
        getExpenditureSlotPayout(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditureSlotPayout(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
        getFundingPot(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            BigNumber
        ] & {
            associatedType: number;
            associatedTypeId: BigNumber;
            payoutsWeCannotMake: BigNumber;
        }>;
        "getFundingPot(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            BigNumber
        ] & {
            associatedType: number;
            associatedTypeId: BigNumber;
            payoutsWeCannotMake: BigNumber;
        }>;
        getFundingPotBalance(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getFundingPotBalance(uint256,address)"(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
        getFundingPotCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getFundingPotCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getFundingPotPayout(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getFundingPotPayout(uint256,address)"(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        getNonRewardPotsTotal(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getNonRewardPotsTotal(address)"(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        getObligation(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getObligation(address,address,uint256)"(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getPayment(_id: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.PaymentStructOutput>;
        "getPayment(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.PaymentStructOutput>;
        getPaymentCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getPaymentCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getRewardInverse(overrides?: CallOverrides): Promise<BigNumber>;
        "getRewardInverse()"(overrides?: CallOverrides): Promise<BigNumber>;
        getRewardPayoutInfo(_payoutId: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.RewardPayoutCycleStructOutput>;
        "getRewardPayoutInfo(uint256)"(_payoutId: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.RewardPayoutCycleStructOutput>;
        getRootLocalSkill(overrides?: CallOverrides): Promise<BigNumber>;
        "getRootLocalSkill()"(overrides?: CallOverrides): Promise<BigNumber>;
        getTask(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            string,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber[]
        ] & {
            specificationHash: string;
            deliverableHash: string;
            status: number;
            dueDate: BigNumber;
            fundingPotId: BigNumber;
            completionTimestamp: BigNumber;
            domainId: BigNumber;
            skillIds: BigNumber[];
        }>;
        "getTask(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            string,
            string,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber[]
        ] & {
            specificationHash: string;
            deliverableHash: string;
            status: number;
            dueDate: BigNumber;
            fundingPotId: BigNumber;
            completionTimestamp: BigNumber;
            domainId: BigNumber;
            skillIds: BigNumber[];
        }>;
        getTaskChangeNonce(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getTaskChangeNonce(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getTaskCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getTaskCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getTaskRole(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.RoleStructOutput>;
        "getTaskRole(uint256,uint8)"(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<ColonyDataTypes.RoleStructOutput>;
        getTaskWorkRatingSecret(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "getTaskWorkRatingSecret(uint256,uint8)"(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<string>;
        getTaskWorkRatingSecretsInfo(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nSecrets: BigNumber;
            lastSubmittedAt: BigNumber;
        }>;
        "getTaskWorkRatingSecretsInfo(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nSecrets: BigNumber;
            lastSubmittedAt: BigNumber;
        }>;
        getToken(overrides?: CallOverrides): Promise<string>;
        "getToken()"(overrides?: CallOverrides): Promise<string>;
        getTokenApproval(token: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getTokenApproval(address,address)"(token: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;
        getTotalTokenApproval(token: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getTotalTokenApproval(address)"(token: string, overrides?: CallOverrides): Promise<BigNumber>;
        getUserRoles(_user: string, _domain: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "getUserRoles(address,uint256)"(_user: string, _domain: BigNumberish, overrides?: CallOverrides): Promise<string>;
        hasInheritedUserRole(_user: string, _domainId: BigNumberish, _role: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(_user: string, _domainId: BigNumberish, _role: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        hasUserRole(_user: string, _domainId: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        "hasUserRole(address,uint256,uint8)"(_user: string, _domainId: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        initialiseColony(_colonyNetworkAddress: string, _token: string, overrides?: CallOverrides): Promise<void>;
        "initialiseColony(address,address)"(_colonyNetworkAddress: string, _token: string, overrides?: CallOverrides): Promise<void>;
        initialiseRootLocalSkill(overrides?: CallOverrides): Promise<void>;
        "initialiseRootLocalSkill()"(overrides?: CallOverrides): Promise<void>;
        installExtension(extensionId: BytesLike, version: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "installExtension(bytes32,uint256)"(extensionId: BytesLike, version: BigNumberish, overrides?: CallOverrides): Promise<void>;
        isInRecoveryMode(overrides?: CallOverrides): Promise<boolean>;
        "isInRecoveryMode()"(overrides?: CallOverrides): Promise<boolean>;
        lockExpenditure(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "lockExpenditure(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;
        lockToken(overrides?: CallOverrides): Promise<BigNumber>;
        "lockToken()"(overrides?: CallOverrides): Promise<BigNumber>;
        makeArbitraryTransaction(_to: string, _action: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        "makeArbitraryTransaction(address,bytes)"(_to: string, _action: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        makeArbitraryTransactions(_targets: string[], _actions: BytesLike[], _strict: boolean, overrides?: CallOverrides): Promise<boolean>;
        "makeArbitraryTransactions(address[],bytes[],bool)"(_targets: string[], _actions: BytesLike[], _strict: boolean, overrides?: CallOverrides): Promise<boolean>;
        makeExpenditure(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "makeExpenditure(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        makeSingleArbitraryTransaction(_target: string, _action: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        "makeSingleArbitraryTransaction(address,bytes)"(_target: string, _action: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        mintTokens(_wad: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "mintTokens(uint256)"(_wad: BigNumberish, overrides?: CallOverrides): Promise<void>;
        mintTokensFor(_guy: string, _wad: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "mintTokensFor(address,uint256)"(_guy: string, _wad: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _fromChildSkillIndex: BigNumberish, _toChildSkillIndex: BigNumberish, _fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: CallOverrides): Promise<void>;
        "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _fromChildSkillIndex: BigNumberish, _toChildSkillIndex: BigNumberish, _fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: CallOverrides): Promise<void>;
        multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
        "multicall(bytes[])"(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
        numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;
        "numRecoveryRoles()"(overrides?: CallOverrides): Promise<BigNumber>;
        obligateStake(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "obligateStake(address,uint256,uint256)"(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        "owner()"(overrides?: CallOverrides): Promise<string>;
        registerColonyLabel(colonyName: string, orbitdb: string, overrides?: CallOverrides): Promise<void>;
        "registerColonyLabel(string,string)"(colonyName: string, orbitdb: string, overrides?: CallOverrides): Promise<void>;
        removeRecoveryRole(_user: string, overrides?: CallOverrides): Promise<void>;
        "removeRecoveryRole(address)"(_user: string, overrides?: CallOverrides): Promise<void>;
        setAdministrationRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: CallOverrides): Promise<void>;
        "setAdministrationRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: CallOverrides): Promise<void>;
        setArbitrationRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: CallOverrides): Promise<void>;
        "setArbitrationRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: CallOverrides): Promise<void>;
        setArchitectureRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: CallOverrides): Promise<void>;
        "setArchitectureRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: CallOverrides): Promise<void>;
        setDefaultGlobalClaimDelay(_globalClaimDelay: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "setDefaultGlobalClaimDelay(uint256)"(_globalClaimDelay: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setExpenditureClaimDelay(_id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "setExpenditureClaimDelay(uint256,uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setExpenditureClaimDelays(_id: BigNumberish, _slots: BigNumberish[], _claimDelays: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _claimDelays: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        "setExpenditureMetadata(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _metadata: string, overrides?: CallOverrides): Promise<void>;
        "setExpenditureMetadata(uint256,string)"(_id: BigNumberish, _metadata: string, overrides?: CallOverrides): Promise<void>;
        "setExpenditurePayout(uint256,uint256,address,uint256)"(_id: BigNumberish, _slot: BigNumberish, _token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _slot: BigNumberish, _token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setExpenditurePayoutModifiers(_id: BigNumberish, _slots: BigNumberish[], _payoutModifiers: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(_id: BigNumberish, _slots: BigNumberish[], _payoutModifiers: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        setExpenditurePayouts(_id: BigNumberish, _slots: BigNumberish[], _token: string, _amounts: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _token: string, _amounts: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        setExpenditureRecipient(_id: BigNumberish, _slot: BigNumberish, _recipient: string, overrides?: CallOverrides): Promise<void>;
        "setExpenditureRecipient(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _recipient: string, overrides?: CallOverrides): Promise<void>;
        setExpenditureRecipients(_id: BigNumberish, _slots: BigNumberish[], _recipients: string[], overrides?: CallOverrides): Promise<void>;
        "setExpenditureRecipients(uint256,uint256[],address[])"(_id: BigNumberish, _slots: BigNumberish[], _recipients: string[], overrides?: CallOverrides): Promise<void>;
        setExpenditureSkill(_id: BigNumberish, _slot: BigNumberish, _skillId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "setExpenditureSkill(uint256,uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, _skillId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setExpenditureSkills(_id: BigNumberish, _slots: BigNumberish[], _skillIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        "setExpenditureSkills(uint256,uint256[],uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _skillIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        setExpenditureState(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _storageSlot: BigNumberish, _mask: boolean[], _keys: BytesLike[], _value: BytesLike, overrides?: CallOverrides): Promise<void>;
        "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _storageSlot: BigNumberish, _mask: boolean[], _keys: BytesLike[], _value: BytesLike, overrides?: CallOverrides): Promise<void>;
        setFundingRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: CallOverrides): Promise<void>;
        "setFundingRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: CallOverrides): Promise<void>;
        setRecoveryRole(_user: string, overrides?: CallOverrides): Promise<void>;
        "setRecoveryRole(address)"(_user: string, overrides?: CallOverrides): Promise<void>;
        setRewardInverse(_rewardInverse: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "setRewardInverse(uint256)"(_rewardInverse: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setRootRole(_user: string, _setTo: boolean, overrides?: CallOverrides): Promise<void>;
        "setRootRole(address,bool)"(_user: string, _setTo: boolean, overrides?: CallOverrides): Promise<void>;
        setStorageSlotRecovery(_slot: BigNumberish, _value: BytesLike, overrides?: CallOverrides): Promise<void>;
        "setStorageSlotRecovery(uint256,bytes32)"(_slot: BigNumberish, _value: BytesLike, overrides?: CallOverrides): Promise<void>;
        setUserRoles(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _roles: BytesLike, overrides?: CallOverrides): Promise<void>;
        "setUserRoles(uint256,uint256,address,uint256,bytes32)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _roles: BytesLike, overrides?: CallOverrides): Promise<void>;
        startNextRewardPayout(_token: string, key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(_token: string, key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        transferExpenditure(_id: BigNumberish, _newOwner: string, overrides?: CallOverrides): Promise<void>;
        "transferExpenditure(uint256,address)"(_id: BigNumberish, _newOwner: string, overrides?: CallOverrides): Promise<void>;
        transferExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _newOwner: string, overrides?: CallOverrides): Promise<void>;
        "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _newOwner: string, overrides?: CallOverrides): Promise<void>;
        transferStake(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _obligator: string, _user: string, _domainId: BigNumberish, _amount: BigNumberish, _recipient: string, overrides?: CallOverrides): Promise<void>;
        "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _obligator: string, _user: string, _domainId: BigNumberish, _amount: BigNumberish, _recipient: string, overrides?: CallOverrides): Promise<void>;
        uninstallExtension(extensionId: BytesLike, overrides?: CallOverrides): Promise<void>;
        "uninstallExtension(bytes32)"(extensionId: BytesLike, overrides?: CallOverrides): Promise<void>;
        unlockToken(overrides?: CallOverrides): Promise<void>;
        "unlockToken()"(overrides?: CallOverrides): Promise<void>;
        unlockTokenForUser(user: string, lockId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "unlockTokenForUser(address,uint256)"(user: string, lockId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        updateApprovalAmount(token: string, spender: string, overrides?: CallOverrides): Promise<void>;
        "updateApprovalAmount(address,address)"(token: string, spender: string, overrides?: CallOverrides): Promise<void>;
        updateColonyOrbitDB(orbitdb: string, overrides?: CallOverrides): Promise<void>;
        "updateColonyOrbitDB(string)"(orbitdb: string, overrides?: CallOverrides): Promise<void>;
        upgrade(_newVersion: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "upgrade(uint256)"(_newVersion: BigNumberish, overrides?: CallOverrides): Promise<void>;
        upgradeExtension(extensionId: BytesLike, newVersion: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "upgradeExtension(bytes32,uint256)"(extensionId: BytesLike, newVersion: BigNumberish, overrides?: CallOverrides): Promise<void>;
        userCanSetRoles(_user: string, _domainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        "userCanSetRoles(address,uint256,uint256,uint256)"(_user: string, _domainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        validateDomainInheritance(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        "validateDomainInheritance(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        verifyReputationProof(key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<boolean>;
        "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<boolean>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        "version()"(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "Annotation(address,bytes32,string)"(agent?: string | null, txHash?: BytesLike | null, metadata?: null): AnnotationEventFilter;
        Annotation(agent?: string | null, txHash?: BytesLike | null, metadata?: null): AnnotationEventFilter;
        "ArbitraryReputationUpdate(address,address,uint256,int256)"(agent?: null, user?: null, skillId?: null, amount?: null): ArbitraryReputationUpdateEventFilter;
        ArbitraryReputationUpdate(agent?: null, user?: null, skillId?: null, amount?: null): ArbitraryReputationUpdateEventFilter;
        "ArbitraryTransaction(address,bytes,bool)"(target?: null, data?: null, success?: null): ArbitraryTransactionEventFilter;
        ArbitraryTransaction(target?: null, data?: null, success?: null): ArbitraryTransactionEventFilter;
        "ColonyBootstrapped(address,address[],int256[])"(agent?: null, users?: null, amounts?: null): ColonyBootstrappedEventFilter;
        ColonyBootstrapped(agent?: null, users?: null, amounts?: null): ColonyBootstrappedEventFilter;
        "ColonyFundsClaimed(address,address,uint256,uint256)"(agent?: null, token?: null, fee?: null, payoutRemainder?: null): ColonyFundsClaimedEventFilter;
        ColonyFundsClaimed(agent?: null, token?: null, fee?: null, payoutRemainder?: null): ColonyFundsClaimedEventFilter;
        "ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)"(agent?: null, fromPot?: BigNumberish | null, toPot?: BigNumberish | null, amount?: null, token?: null): ColonyFundsMovedBetweenFundingPotsEventFilter;
        ColonyFundsMovedBetweenFundingPots(agent?: null, fromPot?: BigNumberish | null, toPot?: BigNumberish | null, amount?: null, token?: null): ColonyFundsMovedBetweenFundingPotsEventFilter;
        "ColonyInitialised(address,address,address)"(agent?: null, colonyNetwork?: null, token?: null): ColonyInitialisedEventFilter;
        ColonyInitialised(agent?: null, colonyNetwork?: null, token?: null): ColonyInitialisedEventFilter;
        "ColonyMetadata(address,string)"(agent?: null, metadata?: null): ColonyMetadataEventFilter;
        ColonyMetadata(agent?: null, metadata?: null): ColonyMetadataEventFilter;
        "ColonyMetadataDelta(address,string)"(agent?: null, metadata?: null): ColonyMetadataDeltaEventFilter;
        ColonyMetadataDelta(agent?: null, metadata?: null): ColonyMetadataDeltaEventFilter;
        "ColonyRewardInverseSet(address,uint256)"(agent?: null, rewardInverse?: null): ColonyRewardInverseSetEventFilter;
        ColonyRewardInverseSet(agent?: null, rewardInverse?: null): ColonyRewardInverseSetEventFilter;
        "ColonyRoleSet(address,address,uint256,uint8,bool)"(agent?: null, user?: string | null, domainId?: BigNumberish | null, role?: BigNumberish | null, setTo?: null): ColonyRoleSetEventFilter;
        ColonyRoleSet(agent?: null, user?: string | null, domainId?: BigNumberish | null, role?: BigNumberish | null, setTo?: null): ColonyRoleSetEventFilter;
        "ColonyUpgraded(address,uint256,uint256)"(agent?: null, oldVersion?: null, newVersion?: null): ColonyUpgradedEventFilter;
        ColonyUpgraded(agent?: null, oldVersion?: null, newVersion?: null): ColonyUpgradedEventFilter;
        "DomainAdded(address,uint256)"(agent?: null, domainId?: null): DomainAddedEventFilter;
        DomainAdded(agent?: null, domainId?: null): DomainAddedEventFilter;
        "DomainDeprecated(address,uint256,bool)"(agent?: null, domainId?: BigNumberish | null, deprecated?: null): DomainDeprecatedEventFilter;
        DomainDeprecated(agent?: null, domainId?: BigNumberish | null, deprecated?: null): DomainDeprecatedEventFilter;
        "DomainMetadata(address,uint256,string)"(agent?: null, domainId?: BigNumberish | null, metadata?: null): DomainMetadataEventFilter;
        DomainMetadata(agent?: null, domainId?: BigNumberish | null, metadata?: null): DomainMetadataEventFilter;
        "ExpenditureAdded(address,uint256)"(agent?: null, expenditureId?: null): ExpenditureAddedEventFilter;
        ExpenditureAdded(agent?: null, expenditureId?: null): ExpenditureAddedEventFilter;
        "ExpenditureCancelled(address,uint256)"(agent?: null, expenditureId?: BigNumberish | null): ExpenditureCancelledEventFilter;
        ExpenditureCancelled(agent?: null, expenditureId?: BigNumberish | null): ExpenditureCancelledEventFilter;
        "ExpenditureClaimDelaySet(address,uint256,uint256,uint256)"(agent?: null, expenditureId?: BigNumberish | null, slot?: BigNumberish | null, claimDelay?: null): ExpenditureClaimDelaySetEventFilter;
        ExpenditureClaimDelaySet(agent?: null, expenditureId?: BigNumberish | null, slot?: BigNumberish | null, claimDelay?: null): ExpenditureClaimDelaySetEventFilter;
        "ExpenditureFinalized(address,uint256)"(agent?: null, expenditureId?: BigNumberish | null): ExpenditureFinalizedEventFilter;
        ExpenditureFinalized(agent?: null, expenditureId?: BigNumberish | null): ExpenditureFinalizedEventFilter;
        "ExpenditureGlobalClaimDelaySet(address,uint256)"(agent?: null, globalClaimDelay?: null): ExpenditureGlobalClaimDelaySetEventFilter;
        ExpenditureGlobalClaimDelaySet(agent?: null, globalClaimDelay?: null): ExpenditureGlobalClaimDelaySetEventFilter;
        "ExpenditureLocked(address,uint256)"(agent?: null, expenditureId?: BigNumberish | null): ExpenditureLockedEventFilter;
        ExpenditureLocked(agent?: null, expenditureId?: BigNumberish | null): ExpenditureLockedEventFilter;
        "ExpenditureMetadataSet(address,uint256,string)"(agent?: null, expenditureId?: BigNumberish | null, metadata?: null): ExpenditureMetadataSetEventFilter;
        ExpenditureMetadataSet(agent?: null, expenditureId?: BigNumberish | null, metadata?: null): ExpenditureMetadataSetEventFilter;
        "ExpenditurePayoutModifierSet(address,uint256,uint256,int256)"(agent?: null, expenditureId?: BigNumberish | null, slot?: BigNumberish | null, payoutModifier?: null): ExpenditurePayoutModifierSetEventFilter;
        ExpenditurePayoutModifierSet(agent?: null, expenditureId?: BigNumberish | null, slot?: BigNumberish | null, payoutModifier?: null): ExpenditurePayoutModifierSetEventFilter;
        "ExpenditurePayoutSet(address,uint256,uint256,address,uint256)"(agent?: null, expenditureId?: BigNumberish | null, slot?: BigNumberish | null, token?: string | null, amount?: null): ExpenditurePayoutSetEventFilter;
        ExpenditurePayoutSet(agent?: null, expenditureId?: BigNumberish | null, slot?: BigNumberish | null, token?: string | null, amount?: null): ExpenditurePayoutSetEventFilter;
        "ExpenditureRecipientSet(address,uint256,uint256,address)"(agent?: null, expenditureId?: BigNumberish | null, slot?: BigNumberish | null, recipient?: string | null): ExpenditureRecipientSetEventFilter;
        ExpenditureRecipientSet(agent?: null, expenditureId?: BigNumberish | null, slot?: BigNumberish | null, recipient?: string | null): ExpenditureRecipientSetEventFilter;
        "ExpenditureSkillSet(address,uint256,uint256,uint256)"(agent?: null, expenditureId?: BigNumberish | null, slot?: BigNumberish | null, skillId?: BigNumberish | null): ExpenditureSkillSetEventFilter;
        ExpenditureSkillSet(agent?: null, expenditureId?: BigNumberish | null, slot?: BigNumberish | null, skillId?: BigNumberish | null): ExpenditureSkillSetEventFilter;
        "ExpenditureStateChanged(address,uint256,uint256,bool[],bytes32[],bytes32)"(agent?: null, expenditureId?: BigNumberish | null, storageSlot?: BigNumberish | null, mask?: null, keys?: null, value?: null): ExpenditureStateChangedEventFilter;
        ExpenditureStateChanged(agent?: null, expenditureId?: BigNumberish | null, storageSlot?: BigNumberish | null, mask?: null, keys?: null, value?: null): ExpenditureStateChangedEventFilter;
        "ExpenditureTransferred(address,uint256,address)"(agent?: null, expenditureId?: BigNumberish | null, owner?: string | null): ExpenditureTransferredEventFilter;
        ExpenditureTransferred(agent?: null, expenditureId?: BigNumberish | null, owner?: string | null): ExpenditureTransferredEventFilter;
        "FundingPotAdded(uint256)"(fundingPotId?: null): FundingPotAddedEventFilter;
        FundingPotAdded(fundingPotId?: null): FundingPotAddedEventFilter;
        "LocalSkillAdded(address,uint256)"(agent?: null, localSkillId?: null): LocalSkillAddedEventFilter;
        LocalSkillAdded(agent?: null, localSkillId?: null): LocalSkillAddedEventFilter;
        "LocalSkillDeprecated(address,uint256,bool)"(agent?: null, localSkillId?: null, deprecated?: null): LocalSkillDeprecatedEventFilter;
        LocalSkillDeprecated(agent?: null, localSkillId?: null, deprecated?: null): LocalSkillDeprecatedEventFilter;
        "MetaTransactionExecuted(address,address,bytes)"(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
        MetaTransactionExecuted(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
        "PaymentAdded(address,uint256)"(agent?: null, paymentId?: null): PaymentAddedEventFilter;
        PaymentAdded(agent?: null, paymentId?: null): PaymentAddedEventFilter;
        "PaymentFinalized(address,uint256)"(agent?: null, paymentId?: BigNumberish | null): PaymentFinalizedEventFilter;
        PaymentFinalized(agent?: null, paymentId?: BigNumberish | null): PaymentFinalizedEventFilter;
        "PaymentPayoutSet(address,uint256,address,uint256)"(agent?: null, paymentId?: BigNumberish | null, token?: null, amount?: null): PaymentPayoutSetEventFilter;
        PaymentPayoutSet(agent?: null, paymentId?: BigNumberish | null, token?: null, amount?: null): PaymentPayoutSetEventFilter;
        "PaymentRecipientSet(address,uint256,address)"(agent?: null, paymentId?: BigNumberish | null, recipient?: null): PaymentRecipientSetEventFilter;
        PaymentRecipientSet(agent?: null, paymentId?: BigNumberish | null, recipient?: null): PaymentRecipientSetEventFilter;
        "PaymentSkillSet(address,uint256,uint256)"(agent?: null, paymentId?: BigNumberish | null, skillId?: null): PaymentSkillSetEventFilter;
        PaymentSkillSet(agent?: null, paymentId?: BigNumberish | null, skillId?: null): PaymentSkillSetEventFilter;
        "PayoutClaimed(address,uint256,address,uint256)"(agent?: null, fundingPotId?: BigNumberish | null, token?: null, amount?: null): PayoutClaimed_address_uint256_address_uint256_EventFilter;
        "PayoutClaimed(address,uint256,uint256,address,uint256)"(agent?: null, id?: null, slot?: null, token?: null, tokenPayout?: null): PayoutClaimed_address_uint256_uint256_address_uint256_EventFilter;
        "RecoveryModeEntered(address)"(user?: null): RecoveryModeEnteredEventFilter;
        RecoveryModeEntered(user?: null): RecoveryModeEnteredEventFilter;
        "RecoveryModeExitApproved(address)"(user?: null): RecoveryModeExitApprovedEventFilter;
        RecoveryModeExitApproved(user?: null): RecoveryModeExitApprovedEventFilter;
        "RecoveryModeExited(address)"(user?: null): RecoveryModeExitedEventFilter;
        RecoveryModeExited(user?: null): RecoveryModeExitedEventFilter;
        "RecoveryRoleSet(address,bool)"(user?: string | null, setTo?: null): RecoveryRoleSetEventFilter;
        RecoveryRoleSet(user?: string | null, setTo?: null): RecoveryRoleSetEventFilter;
        "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)"(user?: null, slot?: null, fromValue?: null, toValue?: null): RecoveryStorageSlotSetEventFilter;
        RecoveryStorageSlotSet(user?: null, slot?: null, fromValue?: null, toValue?: null): RecoveryStorageSlotSetEventFilter;
        "RewardPayoutClaimed(uint256,address,uint256,uint256)"(rewardPayoutId?: null, user?: null, fee?: null, rewardRemainder?: null): RewardPayoutClaimedEventFilter;
        RewardPayoutClaimed(rewardPayoutId?: null, user?: null, fee?: null, rewardRemainder?: null): RewardPayoutClaimedEventFilter;
        "RewardPayoutCycleEnded(address,uint256)"(agent?: null, rewardPayoutId?: null): RewardPayoutCycleEndedEventFilter;
        RewardPayoutCycleEnded(agent?: null, rewardPayoutId?: null): RewardPayoutCycleEndedEventFilter;
        "RewardPayoutCycleStarted(address,uint256)"(agent?: null, rewardPayoutId?: null): RewardPayoutCycleStartedEventFilter;
        RewardPayoutCycleStarted(agent?: null, rewardPayoutId?: null): RewardPayoutCycleStartedEventFilter;
        "TaskAdded(address,uint256)"(agent?: null, taskId?: null): TaskAddedEventFilter;
        TaskAdded(agent?: null, taskId?: null): TaskAddedEventFilter;
        "TaskBriefSet(uint256,bytes32)"(taskId?: BigNumberish | null, specificationHash?: null): TaskBriefSetEventFilter;
        TaskBriefSet(taskId?: BigNumberish | null, specificationHash?: null): TaskBriefSetEventFilter;
        "TaskCanceled(uint256)"(taskId?: BigNumberish | null): TaskCanceledEventFilter;
        TaskCanceled(taskId?: BigNumberish | null): TaskCanceledEventFilter;
        "TaskChangedViaSignatures(address[])"(reviewerAddresses?: null): TaskChangedViaSignaturesEventFilter;
        TaskChangedViaSignatures(reviewerAddresses?: null): TaskChangedViaSignaturesEventFilter;
        "TaskCompleted(address,uint256)"(agent?: null, taskId?: BigNumberish | null): TaskCompletedEventFilter;
        TaskCompleted(agent?: null, taskId?: BigNumberish | null): TaskCompletedEventFilter;
        "TaskDeliverableSubmitted(address,uint256,bytes32)"(agent?: null, taskId?: BigNumberish | null, deliverableHash?: null): TaskDeliverableSubmittedEventFilter;
        TaskDeliverableSubmitted(agent?: null, taskId?: BigNumberish | null, deliverableHash?: null): TaskDeliverableSubmittedEventFilter;
        "TaskDueDateSet(uint256,uint256)"(taskId?: BigNumberish | null, dueDate?: null): TaskDueDateSetEventFilter;
        TaskDueDateSet(taskId?: BigNumberish | null, dueDate?: null): TaskDueDateSetEventFilter;
        "TaskFinalized(address,uint256)"(agent?: null, taskId?: BigNumberish | null): TaskFinalizedEventFilter;
        TaskFinalized(agent?: null, taskId?: BigNumberish | null): TaskFinalizedEventFilter;
        "TaskPayoutSet(uint256,uint8,address,uint256)"(taskId?: BigNumberish | null, role?: null, token?: null, amount?: null): TaskPayoutSetEventFilter;
        TaskPayoutSet(taskId?: BigNumberish | null, role?: null, token?: null, amount?: null): TaskPayoutSetEventFilter;
        "TaskRoleUserSet(uint256,uint8,address)"(taskId?: BigNumberish | null, role?: null, user?: string | null): TaskRoleUserSetEventFilter;
        TaskRoleUserSet(taskId?: BigNumberish | null, role?: null, user?: string | null): TaskRoleUserSetEventFilter;
        "TaskSkillSet(uint256,uint256)"(taskId?: BigNumberish | null, skillId?: BigNumberish | null): TaskSkillSetEventFilter;
        TaskSkillSet(taskId?: BigNumberish | null, skillId?: BigNumberish | null): TaskSkillSetEventFilter;
        "TaskWorkRatingRevealed(address,uint256,uint8,uint8)"(agent?: null, taskId?: BigNumberish | null, role?: null, rating?: null): TaskWorkRatingRevealedEventFilter;
        TaskWorkRatingRevealed(agent?: null, taskId?: BigNumberish | null, role?: null, rating?: null): TaskWorkRatingRevealedEventFilter;
        "TokenUnlocked(address)"(agent?: null): TokenUnlockedEventFilter;
        TokenUnlocked(agent?: null): TokenUnlockedEventFilter;
        "TokensBurned(address,address,uint256)"(agent?: null, token?: null, amount?: null): TokensBurnedEventFilter;
        TokensBurned(agent?: null, token?: null, amount?: null): TokensBurnedEventFilter;
        "TokensMinted(address,address,uint256)"(agent?: null, who?: null, amount?: null): TokensMintedEventFilter;
        TokensMinted(agent?: null, who?: null, amount?: null): TokensMintedEventFilter;
    };
    estimateGas: {
        "addDomain(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _parentDomainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "addDomain(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _parentDomainId: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        addLocalSkill(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "addLocalSkill()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        annotateTransaction(_txHash: BytesLike, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "annotateTransaction(bytes32,string)"(_txHash: BytesLike, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        approveExitRecovery(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "approveExitRecovery()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        approveStake(_approvee: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "approveStake(address,uint256,uint256)"(_approvee: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        authority(overrides?: CallOverrides): Promise<BigNumber>;
        "authority()"(overrides?: CallOverrides): Promise<BigNumber>;
        bootstrapColony(_users: string[], _amount: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "bootstrapColony(address[],int256[])"(_users: string[], _amount: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        burnTokens(token: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "burnTokens(address,uint256)"(token: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        cancelExpenditure(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "cancelExpenditure(uint256)"(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        cancelExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "cancelExpenditureViaArbitration(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        checkNotAdditionalProtectedVariable(_slot: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "checkNotAdditionalProtectedVariable(uint256)"(_slot: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        claimColonyFunds(_token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "claimColonyFunds(address)"(_token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        claimExpenditurePayout(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "claimExpenditurePayout(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        claimRewardPayout(_payoutId: BigNumberish, _squareRoots: BigNumberish[], key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(_payoutId: BigNumberish, _squareRoots: BigNumberish[], key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        deobligateStake(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "deobligateStake(address,uint256,uint256)"(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        deprecateDomain(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "deprecateDomain(uint256,uint256,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        deprecateExtension(extensionId: BytesLike, deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "deprecateExtension(bytes32,bool)"(extensionId: BytesLike, deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        deprecateLocalSkill(localSkillId: BigNumberish, deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "deprecateLocalSkill(uint256,bool)"(localSkillId: BigNumberish, deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        editColony(_metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "editColony(string)"(_metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        editColonyByDelta(_metadataDelta: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "editColonyByDelta(string)"(_metadataDelta: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        editDomain(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "editDomain(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        emitDomainReputationPenalty(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        emitDomainReputationReward(_domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "emitDomainReputationReward(uint256,address,int256)"(_domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        emitSkillReputationPenalty(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "emitSkillReputationPenalty(uint256,address,int256)"(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        emitSkillReputationReward(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "emitSkillReputationReward(uint256,address,int256)"(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        enterRecoveryMode(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "enterRecoveryMode()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        exitRecoveryMode(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "exitRecoveryMode()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        finalizeExpenditure(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "finalizeExpenditure(uint256)"(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        finalizeExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "finalizeExpenditureViaArbitration(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        finalizeRewardPayout(_payoutId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "finalizeRewardPayout(uint256)"(_payoutId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        finishUpgrade(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "finishUpgrade()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        getApproval(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getApproval(address,address,uint256)"(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getCapabilityRoles(_sig: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "getCapabilityRoles(bytes4)"(_sig: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getColonyNetwork(overrides?: CallOverrides): Promise<BigNumber>;
        "getColonyNetwork()"(overrides?: CallOverrides): Promise<BigNumber>;
        getDomain(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getDomain(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getDomainCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getDomainCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getDomainFromFundingPot(_fundingPotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getDomainFromFundingPot(uint256)"(_fundingPotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditure(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditure(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditureCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditureCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditureSlot(_id: BigNumberish, _slot: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditureSlot(uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditureSlotPayout(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditureSlotPayout(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
        getFundingPot(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getFundingPot(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getFundingPotBalance(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getFundingPotBalance(uint256,address)"(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
        getFundingPotCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getFundingPotCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getFundingPotPayout(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getFundingPotPayout(uint256,address)"(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<BigNumber>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        getNonRewardPotsTotal(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getNonRewardPotsTotal(address)"(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        getObligation(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getObligation(address,address,uint256)"(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getPayment(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getPayment(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getPaymentCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getPaymentCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getRewardInverse(overrides?: CallOverrides): Promise<BigNumber>;
        "getRewardInverse()"(overrides?: CallOverrides): Promise<BigNumber>;
        getRewardPayoutInfo(_payoutId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getRewardPayoutInfo(uint256)"(_payoutId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getRootLocalSkill(overrides?: CallOverrides): Promise<BigNumber>;
        "getRootLocalSkill()"(overrides?: CallOverrides): Promise<BigNumber>;
        getTask(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getTask(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getTaskChangeNonce(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getTaskChangeNonce(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getTaskCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getTaskCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getTaskRole(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getTaskRole(uint256,uint8)"(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getTaskWorkRatingSecret(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getTaskWorkRatingSecret(uint256,uint8)"(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getTaskWorkRatingSecretsInfo(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getTaskWorkRatingSecretsInfo(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getToken(overrides?: CallOverrides): Promise<BigNumber>;
        "getToken()"(overrides?: CallOverrides): Promise<BigNumber>;
        getTokenApproval(token: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getTokenApproval(address,address)"(token: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;
        getTotalTokenApproval(token: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getTotalTokenApproval(address)"(token: string, overrides?: CallOverrides): Promise<BigNumber>;
        getUserRoles(_user: string, _domain: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getUserRoles(address,uint256)"(_user: string, _domain: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        hasInheritedUserRole(_user: string, _domainId: BigNumberish, _role: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(_user: string, _domainId: BigNumberish, _role: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        hasUserRole(_user: string, _domainId: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "hasUserRole(address,uint256,uint8)"(_user: string, _domainId: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        initialiseColony(_colonyNetworkAddress: string, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "initialiseColony(address,address)"(_colonyNetworkAddress: string, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        initialiseRootLocalSkill(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "initialiseRootLocalSkill()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        installExtension(extensionId: BytesLike, version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "installExtension(bytes32,uint256)"(extensionId: BytesLike, version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        isInRecoveryMode(overrides?: CallOverrides): Promise<BigNumber>;
        "isInRecoveryMode()"(overrides?: CallOverrides): Promise<BigNumber>;
        lockExpenditure(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "lockExpenditure(uint256)"(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        lockToken(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "lockToken()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        makeArbitraryTransaction(_to: string, _action: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "makeArbitraryTransaction(address,bytes)"(_to: string, _action: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        makeArbitraryTransactions(_targets: string[], _actions: BytesLike[], _strict: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "makeArbitraryTransactions(address[],bytes[],bool)"(_targets: string[], _actions: BytesLike[], _strict: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        makeExpenditure(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "makeExpenditure(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        makeSingleArbitraryTransaction(_target: string, _action: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "makeSingleArbitraryTransaction(address,bytes)"(_target: string, _action: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        mintTokens(_wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "mintTokens(uint256)"(_wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        mintTokensFor(_guy: string, _wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "mintTokensFor(address,uint256)"(_guy: string, _wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _fromChildSkillIndex: BigNumberish, _toChildSkillIndex: BigNumberish, _fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _fromChildSkillIndex: BigNumberish, _toChildSkillIndex: BigNumberish, _fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "multicall(bytes[])"(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;
        "numRecoveryRoles()"(overrides?: CallOverrides): Promise<BigNumber>;
        obligateStake(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "obligateStake(address,uint256,uint256)"(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        "owner()"(overrides?: CallOverrides): Promise<BigNumber>;
        registerColonyLabel(colonyName: string, orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "registerColonyLabel(string,string)"(colonyName: string, orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        removeRecoveryRole(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "removeRecoveryRole(address)"(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setAdministrationRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setAdministrationRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setArbitrationRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setArbitrationRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setArchitectureRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setArchitectureRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setDefaultGlobalClaimDelay(_globalClaimDelay: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setDefaultGlobalClaimDelay(uint256)"(_globalClaimDelay: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setExpenditureClaimDelay(_id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditureClaimDelay(uint256,uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setExpenditureClaimDelays(_id: BigNumberish, _slots: BigNumberish[], _claimDelays: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _claimDelays: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditureMetadata(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditureMetadata(uint256,string)"(_id: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditurePayout(uint256,uint256,address,uint256)"(_id: BigNumberish, _slot: BigNumberish, _token: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _slot: BigNumberish, _token: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setExpenditurePayoutModifiers(_id: BigNumberish, _slots: BigNumberish[], _payoutModifiers: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(_id: BigNumberish, _slots: BigNumberish[], _payoutModifiers: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setExpenditurePayouts(_id: BigNumberish, _slots: BigNumberish[], _token: string, _amounts: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _token: string, _amounts: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setExpenditureRecipient(_id: BigNumberish, _slot: BigNumberish, _recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditureRecipient(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setExpenditureRecipients(_id: BigNumberish, _slots: BigNumberish[], _recipients: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditureRecipients(uint256,uint256[],address[])"(_id: BigNumberish, _slots: BigNumberish[], _recipients: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setExpenditureSkill(_id: BigNumberish, _slot: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditureSkill(uint256,uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setExpenditureSkills(_id: BigNumberish, _slots: BigNumberish[], _skillIds: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditureSkills(uint256,uint256[],uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _skillIds: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setExpenditureState(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _storageSlot: BigNumberish, _mask: boolean[], _keys: BytesLike[], _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _storageSlot: BigNumberish, _mask: boolean[], _keys: BytesLike[], _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setFundingRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setFundingRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setRecoveryRole(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setRecoveryRole(address)"(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setRewardInverse(_rewardInverse: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setRewardInverse(uint256)"(_rewardInverse: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setRootRole(_user: string, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setRootRole(address,bool)"(_user: string, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setStorageSlotRecovery(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setStorageSlotRecovery(uint256,bytes32)"(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setUserRoles(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _roles: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setUserRoles(uint256,uint256,address,uint256,bytes32)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _roles: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        startNextRewardPayout(_token: string, key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(_token: string, key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        transferExpenditure(_id: BigNumberish, _newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "transferExpenditure(uint256,address)"(_id: BigNumberish, _newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        transferExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        transferStake(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _obligator: string, _user: string, _domainId: BigNumberish, _amount: BigNumberish, _recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _obligator: string, _user: string, _domainId: BigNumberish, _amount: BigNumberish, _recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        uninstallExtension(extensionId: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "uninstallExtension(bytes32)"(extensionId: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        unlockToken(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "unlockToken()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        unlockTokenForUser(user: string, lockId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "unlockTokenForUser(address,uint256)"(user: string, lockId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        updateApprovalAmount(token: string, spender: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "updateApprovalAmount(address,address)"(token: string, spender: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        updateColonyOrbitDB(orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "updateColonyOrbitDB(string)"(orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        upgrade(_newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "upgrade(uint256)"(_newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        upgradeExtension(extensionId: BytesLike, newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "upgradeExtension(bytes32,uint256)"(extensionId: BytesLike, newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        userCanSetRoles(_user: string, _domainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "userCanSetRoles(address,uint256,uint256,uint256)"(_user: string, _domainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        validateDomainInheritance(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "validateDomainInheritance(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        verifyReputationProof(key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;
        "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        "version()"(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        "addDomain(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _parentDomainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "addDomain(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _parentDomainId: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        addLocalSkill(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "addLocalSkill()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        annotateTransaction(_txHash: BytesLike, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "annotateTransaction(bytes32,string)"(_txHash: BytesLike, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        approveExitRecovery(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "approveExitRecovery()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        approveStake(_approvee: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "approveStake(address,uint256,uint256)"(_approvee: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "authority()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        bootstrapColony(_users: string[], _amount: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "bootstrapColony(address[],int256[])"(_users: string[], _amount: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        burnTokens(token: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "burnTokens(address,uint256)"(token: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        cancelExpenditure(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "cancelExpenditure(uint256)"(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        cancelExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "cancelExpenditureViaArbitration(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        checkNotAdditionalProtectedVariable(_slot: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "checkNotAdditionalProtectedVariable(uint256)"(_slot: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        claimColonyFunds(_token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "claimColonyFunds(address)"(_token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        claimExpenditurePayout(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "claimExpenditurePayout(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        claimRewardPayout(_payoutId: BigNumberish, _squareRoots: BigNumberish[], key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "claimRewardPayout(uint256,uint256[7],bytes,bytes,uint256,bytes32[])"(_payoutId: BigNumberish, _squareRoots: BigNumberish[], key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        deobligateStake(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "deobligateStake(address,uint256,uint256)"(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        deprecateDomain(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "deprecateDomain(uint256,uint256,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        deprecateExtension(extensionId: BytesLike, deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "deprecateExtension(bytes32,bool)"(extensionId: BytesLike, deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        deprecateLocalSkill(localSkillId: BigNumberish, deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "deprecateLocalSkill(uint256,bool)"(localSkillId: BigNumberish, deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        editColony(_metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "editColony(string)"(_metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        editColonyByDelta(_metadataDelta: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "editColonyByDelta(string)"(_metadataDelta: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        editDomain(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "editDomain(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        emitDomainReputationPenalty(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "emitDomainReputationPenalty(uint256,uint256,uint256,address,int256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        emitDomainReputationReward(_domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "emitDomainReputationReward(uint256,address,int256)"(_domainId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        emitSkillReputationPenalty(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "emitSkillReputationPenalty(uint256,address,int256)"(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        emitSkillReputationReward(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "emitSkillReputationReward(uint256,address,int256)"(_skillId: BigNumberish, _user: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        enterRecoveryMode(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "enterRecoveryMode()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        exitRecoveryMode(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "exitRecoveryMode()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        finalizeExpenditure(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "finalizeExpenditure(uint256)"(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        finalizeExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "finalizeExpenditureViaArbitration(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        finalizeRewardPayout(_payoutId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "finalizeRewardPayout(uint256)"(_payoutId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        finishUpgrade(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "finishUpgrade()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        getApproval(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getApproval(address,address,uint256)"(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCapabilityRoles(_sig: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getCapabilityRoles(bytes4)"(_sig: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getColonyNetwork(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getColonyNetwork()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDomain(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getDomain(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDomainCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getDomainCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDomainFromFundingPot(_fundingPotId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getDomainFromFundingPot(uint256)"(_fundingPotId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExpenditure(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getExpenditure(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExpenditureCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getExpenditureCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExpenditureSlot(_id: BigNumberish, _slot: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getExpenditureSlot(uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExpenditureSlotPayout(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getExpenditureSlotPayout(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFundingPot(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getFundingPot(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFundingPotBalance(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getFundingPotBalance(uint256,address)"(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFundingPotCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getFundingPotCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFundingPotPayout(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getFundingPotPayout(uint256,address)"(_potId: BigNumberish, _token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getNonRewardPotsTotal(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getNonRewardPotsTotal(address)"(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getObligation(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getObligation(address,address,uint256)"(_user: string, _obligator: string, _domainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPayment(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getPayment(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPaymentCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getPaymentCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRewardInverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getRewardInverse()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRewardPayoutInfo(_payoutId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getRewardPayoutInfo(uint256)"(_payoutId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRootLocalSkill(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getRootLocalSkill()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTask(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getTask(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTaskChangeNonce(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getTaskChangeNonce(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTaskCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getTaskCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTaskRole(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getTaskRole(uint256,uint8)"(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTaskWorkRatingSecret(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getTaskWorkRatingSecret(uint256,uint8)"(_id: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTaskWorkRatingSecretsInfo(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getTaskWorkRatingSecretsInfo(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTokenApproval(token: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getTokenApproval(address,address)"(token: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTotalTokenApproval(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getTotalTokenApproval(address)"(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUserRoles(_user: string, _domain: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getUserRoles(address,uint256)"(_user: string, _domain: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasInheritedUserRole(_user: string, _domainId: BigNumberish, _role: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "hasInheritedUserRole(address,uint256,uint8,uint256,uint256)"(_user: string, _domainId: BigNumberish, _role: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasUserRole(_user: string, _domainId: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "hasUserRole(address,uint256,uint8)"(_user: string, _domainId: BigNumberish, _role: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialiseColony(_colonyNetworkAddress: string, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "initialiseColony(address,address)"(_colonyNetworkAddress: string, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        initialiseRootLocalSkill(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "initialiseRootLocalSkill()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        installExtension(extensionId: BytesLike, version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "installExtension(bytes32,uint256)"(extensionId: BytesLike, version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        isInRecoveryMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "isInRecoveryMode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lockExpenditure(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "lockExpenditure(uint256)"(_id: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        lockToken(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "lockToken()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        makeArbitraryTransaction(_to: string, _action: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "makeArbitraryTransaction(address,bytes)"(_to: string, _action: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        makeArbitraryTransactions(_targets: string[], _actions: BytesLike[], _strict: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "makeArbitraryTransactions(address[],bytes[],bool)"(_targets: string[], _actions: BytesLike[], _strict: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        makeExpenditure(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "makeExpenditure(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        makeSingleArbitraryTransaction(_target: string, _action: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "makeSingleArbitraryTransaction(address,bytes)"(_target: string, _action: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        mintTokens(_wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "mintTokens(uint256)"(_wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        mintTokensFor(_guy: string, _wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "mintTokensFor(address,uint256)"(_guy: string, _wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish, _fromChildSkillIndex: BigNumberish, _toChildSkillIndex: BigNumberish, _fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "moveFundsBetweenPots(uint256,uint256,uint256,uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _fromChildSkillIndex: BigNumberish, _toChildSkillIndex: BigNumberish, _fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "multicall(bytes[])"(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        numRecoveryRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "numRecoveryRoles()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        obligateStake(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "obligateStake(address,uint256,uint256)"(_user: string, _domainId: BigNumberish, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerColonyLabel(colonyName: string, orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "registerColonyLabel(string,string)"(colonyName: string, orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        removeRecoveryRole(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "removeRecoveryRole(address)"(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setAdministrationRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setAdministrationRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setArbitrationRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setArbitrationRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setArchitectureRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setArchitectureRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setDefaultGlobalClaimDelay(_globalClaimDelay: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setDefaultGlobalClaimDelay(uint256)"(_globalClaimDelay: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setExpenditureClaimDelay(_id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditureClaimDelay(uint256,uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setExpenditureClaimDelays(_id: BigNumberish, _slots: BigNumberish[], _claimDelays: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditureClaimDelays(uint256,uint256[],uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _claimDelays: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditureMetadata(uint256,uint256,uint256,string)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditureMetadata(uint256,string)"(_id: BigNumberish, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditurePayout(uint256,uint256,address,uint256)"(_id: BigNumberish, _slot: BigNumberish, _token: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditurePayout(uint256,uint256,uint256,uint256,address,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _slot: BigNumberish, _token: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setExpenditurePayoutModifiers(_id: BigNumberish, _slots: BigNumberish[], _payoutModifiers: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditurePayoutModifiers(uint256,uint256[],int256[])"(_id: BigNumberish, _slots: BigNumberish[], _payoutModifiers: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setExpenditurePayouts(_id: BigNumberish, _slots: BigNumberish[], _token: string, _amounts: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditurePayouts(uint256,uint256[],address,uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _token: string, _amounts: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setExpenditureRecipient(_id: BigNumberish, _slot: BigNumberish, _recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditureRecipient(uint256,uint256,address)"(_id: BigNumberish, _slot: BigNumberish, _recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setExpenditureRecipients(_id: BigNumberish, _slots: BigNumberish[], _recipients: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditureRecipients(uint256,uint256[],address[])"(_id: BigNumberish, _slots: BigNumberish[], _recipients: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setExpenditureSkill(_id: BigNumberish, _slot: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditureSkill(uint256,uint256,uint256)"(_id: BigNumberish, _slot: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setExpenditureSkills(_id: BigNumberish, _slots: BigNumberish[], _skillIds: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditureSkills(uint256,uint256[],uint256[])"(_id: BigNumberish, _slots: BigNumberish[], _skillIds: BigNumberish[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setExpenditureState(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _storageSlot: BigNumberish, _mask: boolean[], _keys: BytesLike[], _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setExpenditureState(uint256,uint256,uint256,uint256,bool[],bytes32[],bytes32)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _storageSlot: BigNumberish, _mask: boolean[], _keys: BytesLike[], _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setFundingRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setFundingRole(uint256,uint256,address,uint256,bool)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setRecoveryRole(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setRecoveryRole(address)"(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setRewardInverse(_rewardInverse: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setRewardInverse(uint256)"(_rewardInverse: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setRootRole(_user: string, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setRootRole(address,bool)"(_user: string, _setTo: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setStorageSlotRecovery(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setStorageSlotRecovery(uint256,bytes32)"(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setUserRoles(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _roles: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setUserRoles(uint256,uint256,address,uint256,bytes32)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _roles: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        startNextRewardPayout(_token: string, key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "startNextRewardPayout(address,bytes,bytes,uint256,bytes32[])"(_token: string, key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        transferExpenditure(_id: BigNumberish, _newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "transferExpenditure(uint256,address)"(_id: BigNumberish, _newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        transferExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "transferExpenditureViaArbitration(uint256,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        transferStake(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _obligator: string, _user: string, _domainId: BigNumberish, _amount: BigNumberish, _recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "transferStake(uint256,uint256,address,address,uint256,uint256,address)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _obligator: string, _user: string, _domainId: BigNumberish, _amount: BigNumberish, _recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        uninstallExtension(extensionId: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "uninstallExtension(bytes32)"(extensionId: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        unlockToken(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "unlockToken()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        unlockTokenForUser(user: string, lockId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "unlockTokenForUser(address,uint256)"(user: string, lockId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        updateApprovalAmount(token: string, spender: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "updateApprovalAmount(address,address)"(token: string, spender: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        updateColonyOrbitDB(orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "updateColonyOrbitDB(string)"(orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        upgrade(_newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "upgrade(uint256)"(_newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        upgradeExtension(extensionId: BytesLike, newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "upgradeExtension(bytes32,uint256)"(extensionId: BytesLike, newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        userCanSetRoles(_user: string, _domainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "userCanSetRoles(address,uint256,uint256,uint256)"(_user: string, _domainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        validateDomainInheritance(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "validateDomainInheritance(uint256,uint256,uint256)"(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifyReputationProof(key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "verifyReputationProof(bytes,bytes,uint256,bytes32[])"(key: BytesLike, value: BytesLike, branchMask: BigNumberish, siblings: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
