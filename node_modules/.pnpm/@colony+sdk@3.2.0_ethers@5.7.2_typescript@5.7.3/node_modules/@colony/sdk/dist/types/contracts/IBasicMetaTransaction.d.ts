import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common.js";
export interface IBasicMetaTransactionInterface extends utils.Interface {
    functions: {
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
        "getMetatransactionNonce(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "executeMetaTransaction" | "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)" | "getMetatransactionNonce" | "getMetatransactionNonce(address)"): FunctionFragment;
    encodeFunctionData(functionFragment: "executeMetaTransaction", values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)", values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getMetatransactionNonce", values: [string]): string;
    encodeFunctionData(functionFragment: "getMetatransactionNonce(address)", values: [string]): string;
    decodeFunctionResult(functionFragment: "executeMetaTransaction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetatransactionNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetatransactionNonce(address)", data: BytesLike): Result;
    events: {
        "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted(address,address,bytes)"): EventFragment;
}
export interface MetaTransactionExecutedEventObject {
    userAddress: string;
    relayerAddress: string;
    payload: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<[
    string,
    string,
    string
], MetaTransactionExecutedEventObject>;
export type MetaTransactionExecutedEventFilter = TypedEventFilter<MetaTransactionExecutedEvent>;
export interface IBasicMetaTransaction extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IBasicMetaTransactionInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
    };
    executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
    "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: CallOverrides): Promise<string>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "MetaTransactionExecuted(address,address,bytes)"(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
        MetaTransactionExecuted(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
    };
    estimateGas: {
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
