import { type Abi, type AbiParametersToPrimitiveTypes, type Address, type ExtractAbiFunction, type ExtractAbiFunctionNames } from 'abitype';
import { type ContractReceipt, type EventData, type TxConfig } from '.pnpm/@colony+sdk@3.2.0_ethers@5.7.2_typescript@5.7.3/node_modules/@colony/sdk';
import CustomTxCreator from '../TxCreator/CustomTxCreator.js';
import { type ContractConfig } from '../ContractConfig.js';
export declare class CustomContract<A extends Abi> {
    private abi;
    private contract;
    address: Address;
    config: ContractConfig;
    /**
     * Creates a new instance of a custom contract
     *
     * This is your main entry point to talk to the Colony Network Smart Contracts.
     * From here you should be able to instantiate all the required instances for Colonies and their extensions.
     *
     * @param address - Address of the deployed contract
     * @param abi - JSON ABI of the contract
     * @param config - An instance of a ContractConfig (mind: _not_ ContractOptions!)
     * @returns A CustomContract instance
     */
    constructor(address: Address, abi: A, config: ContractConfig);
    /**
     * Creates a new {@link CustomTxCreator} for custom, permissioned transactions or metatransactions
     *
     * @param method - The transaction method to execute on the contract
     * @param args - The arguments for the method
     * @param eventData - A function that extracts the relevant event data from the {@link ContractReceipt}
     * @param txConfig - More configuration options, like {@link MetadataType} if the event contains metadata or if methods are unsupported
     * @returns A {@link CustomTxCreator}
     */
    createTxCreator<M extends ExtractAbiFunctionNames<A, 'payable' | 'nonpayable'>, E extends EventData>(method: M, args: AbiParametersToPrimitiveTypes<ExtractAbiFunction<A, M>['inputs'], 'inputs'>, eventData?: (receipt: ContractReceipt) => Promise<E>, txConfig?: TxConfig): CustomTxCreator<A, M, E>;
    /**
     * Read a contract value
     *
     * @param method - The pure/view method to read from the contract
     * @param args - The arguments for the method
     * @returns A promise resolving into the specific type for the contract return value
     */
    read<M extends ExtractAbiFunctionNames<A, 'pure' | 'view'>>(method: M, args: AbiParametersToPrimitiveTypes<ExtractAbiFunction<A, M>['inputs'], 'inputs'>): Promise<AbiParametersToPrimitiveTypes<ExtractAbiFunction<A, M>['outputs'], 'outputs'>[0]>;
}
