import { type BigNumberish, type ContractReceipt, type ContractTransaction } from 'ethers';
import { type ColonyRole } from '@colony/core';
import { type MetadataType, type VotingReputationEvents } from '@colony/events';
import type { TransactionResponse } from '@ethersproject/abstract-provider';
import { type Colony } from '../ColonyNetwork/index.js';
import { type TxCreatorConfig, type EventData, type ColonyTransaction, type ColonyMetaTransaction } from './TxCreator.js';
import { type MetaTxBaseContract, MetaTxCreator } from './MetaTxCreator.js';
import { type ParsedLogTransactionReceipt } from '../types.js';
export interface PermissionConfig {
    domain: BigNumberish;
    roles: ColonyRole | ColonyRole[];
    address?: string;
}
interface MetaMotionsConfig<C, M, E, MD> extends TxCreatorConfig<C, M, E, MD> {
    colony: Colony;
    permissionConfig?: PermissionConfig;
}
/**
 * An umbrella API for all kinds of transactions within colonies
 *
 * The `ColonyTxCreator` allows for a simple API to cover all the different cases of transactions within a colony. Once a `ColonyTxCreator` is created using a method on the base contracts (e.g. {@link Colony} or extensions like {@link VotingReputation}) there are four options available:
 *
 * ## Create a standard transaction ("force" in dApp)
 *
 * - {@link ColonyTxCreator.tx}: force a Colony transaction, knowing you have the permissions to do so
 * - {@link ColonyTxCreator.metaTx}: same as `tx()`, but send as a gasless metatransaction
 *
 * ## Create a motion to trigger an action once it passes
 *
 * - {@link ColonyTxCreator.motion}: create a motion (needs the motion's domain as a parameter)
 * - {@link ColonyTxCreator.metaMotion}: same as `motion()`, but sends a gasless metatransaction
 *
 * Learn more about these functions in their individual documentation
 */
export declare class ColonyTxCreator<C extends MetaTxBaseContract, M extends keyof C['functions'], E extends EventData, MD extends MetadataType> extends MetaTxCreator<C, M, E, MD> {
    private colony;
    private permissionConfig?;
    constructor(config: MetaMotionsConfig<C, M, E, MD>);
    private getMotionTx;
    private getMotionMined;
    private getEncodedMotionTx;
    private getMetaMotionTx;
    private getMetaMotionMinded;
    protected getArgs(): Promise<unknown[]>;
    /**
     * Creates a motion for an action
     *
     * You can specify a team (domain) this motion should be created in. It will be created in the Root team by default.
     *
     * After creation, you can then `send` the transaction or wait for it to be `mined`.
     * See also {@link ColonyTransaction} and https://docs.colony.io/colonysdk/guides/transactions for more information
     *
     * @remarks This will only work if the {@link VotingReputation} extension is installed for the Colony that's being acted on
     *
     * @returns A motion transaction that can be `send` or `mined` or `encode`d.
     */
    motion(motionDomain?: BigNumberish): ColonyTransaction<ContractTransaction, VotingReputationEvents.MotionCreatedEventObject, ContractReceipt, MD>;
    /**
     * Creates a motion for an action, using a gasless transaction
     *
     * You can specify a team (domain) this motion should be created in. It will be created in the Root team by default.
     *
     * After creation, you can then `send` the transaction or wait for it to be `mined`.
     * See also {@link TxCreator.tx} and https://docs.colony.io/colonysdk/guides/transactions for more information
     *
     * @remarks This will only work if the {@link VotingReputation} extension is installed for the Colony that's being acted on
     *
     * @returns A motion transaction that can be `send` or `mined` or `encode`d.
     */
    metaMotion(motionDomain?: BigNumberish): ColonyMetaTransaction<TransactionResponse, VotingReputationEvents.MotionCreatedEventObject, ParsedLogTransactionReceipt, MD>;
}
export {};
