import { type MetadataType } from '@colony/events';
import type { TransactionResponse } from '@ethersproject/abstract-provider';
import type { IBasicMetaTransaction } from '../contracts/index.js';
import { type BaseContract, type ColonyMetaTransaction, type EventData, TxCreator } from './TxCreator.js';
import { type ParsedLogTransactionReceipt } from '../types.js';
type MetaTxFunctions = IBasicMetaTransaction['functions'];
type MetaTxInterface = IBasicMetaTransaction['interface'];
interface Functions extends MetaTxFunctions {
    [key: string]: (...args: any[]) => Promise<any>;
}
interface Interface extends MetaTxInterface {
    encodeFunctionData(functionFragment: string, values: any[]): string;
}
export interface MetaTxBaseContract extends BaseContract {
    functions: Functions;
    interface: Interface;
}
/**
 * An umbrella API for all kinds of transactions
 *
 * The `MetaTxCreator` allows for a simple API to cover all the different cases of transactions within the Colony Network. The `MetaTxCreator` supports sending a standard transaction ({@link MetaTxCreator.tx}) as well as metatransactions ({@link MetaTxCreator.metaTx}).
 *
 * ## Create a standard transaction ("force" in dApp)
 *
 * - {@link MetaTxCreator.tx}: force a Colony transaction, knowing you have the permissions to do so
 * - {@link MetaTxCreator.metaTx}: same as `tx()`, but send as a gasless metatransaction
 *
 * Learn more about these functions in their individual documentation
 */
export declare class MetaTxCreator<C extends MetaTxBaseContract, M extends keyof C['functions'], E extends EventData, MD extends MetadataType = MetadataType.DEFAULT> extends TxCreator<C, M, E, MD> {
    protected sendMetaTransaction(encodedTransaction: string, target: string): Promise<TransactionResponse>;
    private getMetaTx;
    private getMetaMined;
    /**
     * Create a gasless MetaTransaction ("force" in dApp)
     *
     * After creation, you can then `send` the transaction or wait for it to be `mined`.
     * See also {@link TxCreator.tx} and https://docs.colony.io/colonysdk/guides/transactions for more information
     *
     * @remarks The user sending this transaction has to have the appropriate permissions to do so. Learn more about permissions in Colony [here](/develop/dev-learning/permissions).
     *
     * @returns A transaction that can be `send` or `mined`.
     */
    metaTx(): ColonyMetaTransaction<TransactionResponse, E, ParsedLogTransactionReceipt, MD>;
}
export {};
