import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common.js";
export type ActionSummaryStruct = {
    sig: BytesLike;
    domainSkillId: BigNumberish;
    expenditureId: BigNumberish;
    requiredPermissions: BytesLike;
};
export type ActionSummaryStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string
] & {
    sig: string;
    domainSkillId: BigNumber;
    expenditureId: BigNumber;
    requiredPermissions: string;
};
export declare namespace VotingReputationDataTypes {
    type MotionStruct = {
        events: [BigNumberish, BigNumberish, BigNumberish];
        rootHash: BytesLike;
        domainId: BigNumberish;
        skillId: BigNumberish;
        skillRep: BigNumberish;
        repSubmitted: BigNumberish;
        paidVoterComp: BigNumberish;
        pastVoterComp: [BigNumberish, BigNumberish];
        stakes: [BigNumberish, BigNumberish];
        votes: [BigNumberish, BigNumberish];
        escalated: boolean;
        finalized: boolean;
        altTarget: string;
        sig: BytesLike;
        action: BytesLike;
    };
    type MotionStructOutput = [
        [
            BigNumber,
            BigNumber,
            BigNumber
        ],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
            BigNumber,
            BigNumber
        ],
        [
            BigNumber,
            BigNumber
        ],
        [
            BigNumber,
            BigNumber
        ],
        boolean,
        boolean,
        string,
        string,
        string
    ] & {
        events: [BigNumber, BigNumber, BigNumber];
        rootHash: string;
        domainId: BigNumber;
        skillId: BigNumber;
        skillRep: BigNumber;
        repSubmitted: BigNumber;
        paidVoterComp: BigNumber;
        pastVoterComp: [BigNumber, BigNumber];
        stakes: [BigNumber, BigNumber];
        votes: [BigNumber, BigNumber];
        escalated: boolean;
        finalized: boolean;
        altTarget: string;
        sig: string;
        action: string;
    };
}
export interface IVotingReputationInterface extends utils.Interface {
    functions: {
        "claimMisalignedReward(uint256,uint256,uint256,address,uint256)": FunctionFragment;
        "claimReward(uint256,uint256,uint256,address,uint256)": FunctionFragment;
        "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])": FunctionFragment;
        "deprecate(bool)": FunctionFragment;
        "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])": FunctionFragment;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
        "failingExecutionAllowed(uint256)": FunctionFragment;
        "finalizeMotion(uint256)": FunctionFragment;
        "finalizeMotionWithoutFailure(uint256)": FunctionFragment;
        "finishUpgrade()": FunctionFragment;
        "getActionSummary(bytes,address)": FunctionFragment;
        "getCapabilityRoles(bytes4)": FunctionFragment;
        "getColony()": FunctionFragment;
        "getDeprecated()": FunctionFragment;
        "getEscalationPeriod()": FunctionFragment;
        "getExpenditureMotionCount(bytes32)": FunctionFragment;
        "getExpenditureMotionLock(uint256)": FunctionFragment;
        "getExpenditurePastVote(uint256)": FunctionFragment;
        "getExpenditurePastVotes_DEPRECATED(bytes32)": FunctionFragment;
        "getMaxVoteFraction()": FunctionFragment;
        "getMetatransactionNonce(address)": FunctionFragment;
        "getMotion(uint256)": FunctionFragment;
        "getMotionCount()": FunctionFragment;
        "getMotionState(uint256)": FunctionFragment;
        "getRevealPeriod()": FunctionFragment;
        "getStake(uint256,address,uint256)": FunctionFragment;
        "getStakePeriod()": FunctionFragment;
        "getStakerReward(uint256,address,uint256)": FunctionFragment;
        "getSubmitPeriod()": FunctionFragment;
        "getTotalStakeFraction()": FunctionFragment;
        "getUserMinStakeFraction()": FunctionFragment;
        "getVoterReward(uint256,uint256)": FunctionFragment;
        "getVoterRewardFraction()": FunctionFragment;
        "getVoterRewardRange(uint256,uint256,address)": FunctionFragment;
        "identifier()": FunctionFragment;
        "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
        "install(address)": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])": FunctionFragment;
        "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])": FunctionFragment;
        "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])": FunctionFragment;
        "uninstall()": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "claimMisalignedReward" | "claimMisalignedReward(uint256,uint256,uint256,address,uint256)" | "claimReward" | "claimReward(uint256,uint256,uint256,address,uint256)" | "createMotion" | "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])" | "deprecate" | "deprecate(bool)" | "escalateMotion" | "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])" | "executeMetaTransaction" | "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)" | "failingExecutionAllowed" | "failingExecutionAllowed(uint256)" | "finalizeMotion" | "finalizeMotion(uint256)" | "finalizeMotionWithoutFailure" | "finalizeMotionWithoutFailure(uint256)" | "finishUpgrade" | "finishUpgrade()" | "getActionSummary" | "getActionSummary(bytes,address)" | "getCapabilityRoles" | "getCapabilityRoles(bytes4)" | "getColony" | "getColony()" | "getDeprecated" | "getDeprecated()" | "getEscalationPeriod" | "getEscalationPeriod()" | "getExpenditureMotionCount" | "getExpenditureMotionCount(bytes32)" | "getExpenditureMotionLock" | "getExpenditureMotionLock(uint256)" | "getExpenditurePastVote" | "getExpenditurePastVote(uint256)" | "getExpenditurePastVotes_DEPRECATED" | "getExpenditurePastVotes_DEPRECATED(bytes32)" | "getMaxVoteFraction" | "getMaxVoteFraction()" | "getMetatransactionNonce" | "getMetatransactionNonce(address)" | "getMotion" | "getMotion(uint256)" | "getMotionCount" | "getMotionCount()" | "getMotionState" | "getMotionState(uint256)" | "getRevealPeriod" | "getRevealPeriod()" | "getStake" | "getStake(uint256,address,uint256)" | "getStakePeriod" | "getStakePeriod()" | "getStakerReward" | "getStakerReward(uint256,address,uint256)" | "getSubmitPeriod" | "getSubmitPeriod()" | "getTotalStakeFraction" | "getTotalStakeFraction()" | "getUserMinStakeFraction" | "getUserMinStakeFraction()" | "getVoterReward" | "getVoterReward(uint256,uint256)" | "getVoterRewardFraction" | "getVoterRewardFraction()" | "getVoterRewardRange" | "getVoterRewardRange(uint256,uint256,address)" | "identifier" | "identifier()" | "initialise" | "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)" | "install" | "install(address)" | "multicall" | "multicall(bytes[])" | "revealVote" | "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])" | "stakeMotion" | "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])" | "submitVote" | "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])" | "uninstall" | "uninstall()" | "version" | "version()"): FunctionFragment;
    encodeFunctionData(functionFragment: "claimMisalignedReward", values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "claimMisalignedReward(uint256,uint256,uint256,address,uint256)", values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "claimReward", values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "claimReward(uint256,uint256,uint256,address,uint256)", values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "createMotion", values: [
        BigNumberish,
        BigNumberish,
        string,
        BytesLike,
        BytesLike,
        BytesLike,
        BigNumberish,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])", values: [
        BigNumberish,
        BigNumberish,
        string,
        BytesLike,
        BytesLike,
        BytesLike,
        BigNumberish,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "deprecate", values: [boolean]): string;
    encodeFunctionData(functionFragment: "deprecate(bool)", values: [boolean]): string;
    encodeFunctionData(functionFragment: "escalateMotion", values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike,
        BigNumberish,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])", values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike,
        BigNumberish,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "executeMetaTransaction", values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)", values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "failingExecutionAllowed", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "failingExecutionAllowed(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "finalizeMotion", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "finalizeMotion(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "finalizeMotionWithoutFailure", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "finalizeMotionWithoutFailure(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "finishUpgrade", values?: undefined): string;
    encodeFunctionData(functionFragment: "finishUpgrade()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getActionSummary", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "getActionSummary(bytes,address)", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "getCapabilityRoles", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getCapabilityRoles(bytes4)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getColony", values?: undefined): string;
    encodeFunctionData(functionFragment: "getColony()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getDeprecated", values?: undefined): string;
    encodeFunctionData(functionFragment: "getDeprecated()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getEscalationPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "getEscalationPeriod()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getExpenditureMotionCount", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getExpenditureMotionCount(bytes32)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getExpenditureMotionLock", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getExpenditureMotionLock(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getExpenditurePastVote", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getExpenditurePastVote(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getExpenditurePastVotes_DEPRECATED", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getExpenditurePastVotes_DEPRECATED(bytes32)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getMaxVoteFraction", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMaxVoteFraction()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMetatransactionNonce", values: [string]): string;
    encodeFunctionData(functionFragment: "getMetatransactionNonce(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "getMotion", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getMotion(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getMotionCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMotionCount()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMotionState", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getMotionState(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRevealPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRevealPeriod()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getStake", values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getStake(uint256,address,uint256)", values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getStakePeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "getStakePeriod()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getStakerReward", values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getStakerReward(uint256,address,uint256)", values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getSubmitPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSubmitPeriod()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTotalStakeFraction", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTotalStakeFraction()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getUserMinStakeFraction", values?: undefined): string;
    encodeFunctionData(functionFragment: "getUserMinStakeFraction()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVoterReward", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getVoterReward(uint256,uint256)", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getVoterRewardFraction", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVoterRewardFraction()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVoterRewardRange", values: [BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "getVoterRewardRange(uint256,uint256,address)", values: [BigNumberish, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "identifier", values?: undefined): string;
    encodeFunctionData(functionFragment: "identifier()", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialise", values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)", values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "install", values: [string]): string;
    encodeFunctionData(functionFragment: "install(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "multicall(bytes[])", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "revealVote", values: [
        BigNumberish,
        BytesLike,
        BigNumberish,
        BytesLike,
        BytesLike,
        BigNumberish,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])", values: [
        BigNumberish,
        BytesLike,
        BigNumberish,
        BytesLike,
        BytesLike,
        BigNumberish,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "stakeMotion", values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike,
        BigNumberish,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])", values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike,
        BigNumberish,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "submitVote", values: [
        BigNumberish,
        BytesLike,
        BytesLike,
        BytesLike,
        BigNumberish,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])", values: [
        BigNumberish,
        BytesLike,
        BytesLike,
        BytesLike,
        BigNumberish,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "uninstall", values?: undefined): string;
    encodeFunctionData(functionFragment: "uninstall()", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "version()", values?: undefined): string;
    decodeFunctionResult(functionFragment: "claimMisalignedReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimMisalignedReward(uint256,uint256,uint256,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimReward(uint256,uint256,uint256,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createMotion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deprecate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deprecate(bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "escalateMotion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeMetaTransaction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failingExecutionAllowed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failingExecutionAllowed(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeMotion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeMotion(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeMotionWithoutFailure", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeMotionWithoutFailure(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finishUpgrade", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finishUpgrade()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getActionSummary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getActionSummary(bytes,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCapabilityRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCapabilityRoles(bytes4)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColony", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColony()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDeprecated", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDeprecated()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getEscalationPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getEscalationPeriod()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditureMotionCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditureMotionCount(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditureMotionLock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditureMotionLock(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditurePastVote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditurePastVote(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditurePastVotes_DEPRECATED", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpenditurePastVotes_DEPRECATED(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMaxVoteFraction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMaxVoteFraction()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetatransactionNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetatransactionNonce(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMotion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMotion(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMotionCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMotionCount()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMotionState", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMotionState(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRevealPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRevealPeriod()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStake(uint256,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStakePeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStakePeriod()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStakerReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStakerReward(uint256,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSubmitPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSubmitPeriod()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTotalStakeFraction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTotalStakeFraction()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUserMinStakeFraction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUserMinStakeFraction()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVoterReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVoterReward(uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVoterRewardFraction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVoterRewardFraction()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVoterRewardRange", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVoterRewardRange(uint256,uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "identifier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "identifier()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "install", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "install(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall(bytes[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revealVote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakeMotion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uninstall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uninstall()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version()", data: BytesLike): Result;
    events: {
        "MetaTransactionExecuted(address,address,bytes)": EventFragment;
        "MotionCreated(uint256,address,uint256)": EventFragment;
        "MotionEscalated(uint256,address,uint256,uint256)": EventFragment;
        "MotionEventSet(uint256,uint256)": EventFragment;
        "MotionFinalized(uint256,bytes,bool)": EventFragment;
        "MotionRewardClaimed(uint256,address,uint256,uint256)": EventFragment;
        "MotionStaked(uint256,address,uint256,uint256)": EventFragment;
        "MotionVoteRevealed(uint256,address,uint256)": EventFragment;
        "MotionVoteSubmitted(uint256,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted(address,address,bytes)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionCreated(uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionEscalated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionEscalated(uint256,address,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionEventSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionEventSet(uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionFinalized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionFinalized(uint256,bytes,bool)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionRewardClaimed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionRewardClaimed(uint256,address,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionStaked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionStaked(uint256,address,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionVoteRevealed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionVoteRevealed(uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionVoteSubmitted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MotionVoteSubmitted(uint256,address)"): EventFragment;
}
export interface MetaTransactionExecutedEventObject {
    userAddress: string;
    relayerAddress: string;
    payload: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<[
    string,
    string,
    string
], MetaTransactionExecutedEventObject>;
export type MetaTransactionExecutedEventFilter = TypedEventFilter<MetaTransactionExecutedEvent>;
export interface MotionCreatedEventObject {
    motionId: BigNumber;
    creator: string;
    domainId: BigNumber;
}
export type MotionCreatedEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber
], MotionCreatedEventObject>;
export type MotionCreatedEventFilter = TypedEventFilter<MotionCreatedEvent>;
export interface MotionEscalatedEventObject {
    motionId: BigNumber;
    escalator: string;
    domainId: BigNumber;
    newDomainId: BigNumber;
}
export type MotionEscalatedEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber,
    BigNumber
], MotionEscalatedEventObject>;
export type MotionEscalatedEventFilter = TypedEventFilter<MotionEscalatedEvent>;
export interface MotionEventSetEventObject {
    motionId: BigNumber;
    eventIndex: BigNumber;
}
export type MotionEventSetEvent = TypedEvent<[
    BigNumber,
    BigNumber
], MotionEventSetEventObject>;
export type MotionEventSetEventFilter = TypedEventFilter<MotionEventSetEvent>;
export interface MotionFinalizedEventObject {
    motionId: BigNumber;
    action: string;
    executed: boolean;
}
export type MotionFinalizedEvent = TypedEvent<[
    BigNumber,
    string,
    boolean
], MotionFinalizedEventObject>;
export type MotionFinalizedEventFilter = TypedEventFilter<MotionFinalizedEvent>;
export interface MotionRewardClaimedEventObject {
    motionId: BigNumber;
    staker: string;
    vote: BigNumber;
    amount: BigNumber;
}
export type MotionRewardClaimedEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber,
    BigNumber
], MotionRewardClaimedEventObject>;
export type MotionRewardClaimedEventFilter = TypedEventFilter<MotionRewardClaimedEvent>;
export interface MotionStakedEventObject {
    motionId: BigNumber;
    staker: string;
    vote: BigNumber;
    amount: BigNumber;
}
export type MotionStakedEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber,
    BigNumber
], MotionStakedEventObject>;
export type MotionStakedEventFilter = TypedEventFilter<MotionStakedEvent>;
export interface MotionVoteRevealedEventObject {
    motionId: BigNumber;
    voter: string;
    vote: BigNumber;
}
export type MotionVoteRevealedEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber
], MotionVoteRevealedEventObject>;
export type MotionVoteRevealedEventFilter = TypedEventFilter<MotionVoteRevealedEvent>;
export interface MotionVoteSubmittedEventObject {
    motionId: BigNumber;
    voter: string;
}
export type MotionVoteSubmittedEvent = TypedEvent<[
    BigNumber,
    string
], MotionVoteSubmittedEventObject>;
export type MotionVoteSubmittedEventFilter = TypedEventFilter<MotionVoteSubmittedEvent>;
export interface IVotingReputation extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IVotingReputationInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        claimMisalignedReward(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "claimMisalignedReward(uint256,uint256,uint256,address,uint256)"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        claimReward(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "claimReward(uint256,uint256,uint256,address,uint256)"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        createMotion(_domainId: BigNumberish, _childSkillIndex: BigNumberish, _altTarget: string, _action: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])"(_domainId: BigNumberish, _childSkillIndex: BigNumberish, _altTarget: string, _action: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        deprecate(_deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "deprecate(bool)"(_deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        escalateMotion(_motionId: BigNumberish, _newDomainId: BigNumberish, _childSkillIndex: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _newDomainId: BigNumberish, _childSkillIndex: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        failingExecutionAllowed(_motionId: BigNumberish, overrides?: CallOverrides): Promise<[boolean] & {
            _allowed: boolean;
        }>;
        "failingExecutionAllowed(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<[boolean] & {
            _allowed: boolean;
        }>;
        finalizeMotion(_motionId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "finalizeMotion(uint256)"(_motionId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        finalizeMotionWithoutFailure(_motionId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "finalizeMotionWithoutFailure(uint256)"(_motionId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        finishUpgrade(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "finishUpgrade()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        getActionSummary(_action: BytesLike, _altTarget: string, overrides?: CallOverrides): Promise<[
            ActionSummaryStructOutput
        ] & {
            _summary: ActionSummaryStructOutput;
        }>;
        "getActionSummary(bytes,address)"(_action: BytesLike, _altTarget: string, overrides?: CallOverrides): Promise<[
            ActionSummaryStructOutput
        ] & {
            _summary: ActionSummaryStructOutput;
        }>;
        getCapabilityRoles(_sig: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            roles: string;
        }>;
        "getCapabilityRoles(bytes4)"(_sig: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            roles: string;
        }>;
        getColony(overrides?: CallOverrides): Promise<[string] & {
            colony: string;
        }>;
        "getColony()"(overrides?: CallOverrides): Promise<[string] & {
            colony: string;
        }>;
        getDeprecated(overrides?: CallOverrides): Promise<[boolean] & {
            deprecated: boolean;
        }>;
        "getDeprecated()"(overrides?: CallOverrides): Promise<[boolean] & {
            deprecated: boolean;
        }>;
        getEscalationPeriod(overrides?: CallOverrides): Promise<[BigNumber] & {
            _period: BigNumber;
        }>;
        "getEscalationPeriod()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _period: BigNumber;
        }>;
        getExpenditureMotionCount(_structHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber] & {
            _count: BigNumber;
        }>;
        "getExpenditureMotionCount(bytes32)"(_structHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber] & {
            _count: BigNumber;
        }>;
        getExpenditureMotionLock(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _motionId: BigNumber;
        }>;
        "getExpenditureMotionLock(uint256)"(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _motionId: BigNumber;
        }>;
        getExpenditurePastVote(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _vote: BigNumber;
        }>;
        "getExpenditurePastVote(uint256)"(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _vote: BigNumber;
        }>;
        getExpenditurePastVotes_DEPRECATED(_slotSignature: BytesLike, overrides?: CallOverrides): Promise<[BigNumber] & {
            _vote: BigNumber;
        }>;
        "getExpenditurePastVotes_DEPRECATED(bytes32)"(_slotSignature: BytesLike, overrides?: CallOverrides): Promise<[BigNumber] & {
            _vote: BigNumber;
        }>;
        getMaxVoteFraction(overrides?: CallOverrides): Promise<[BigNumber] & {
            _fraction: BigNumber;
        }>;
        "getMaxVoteFraction()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _fraction: BigNumber;
        }>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        getMotion(_motionId: BigNumberish, overrides?: CallOverrides): Promise<[
            VotingReputationDataTypes.MotionStructOutput
        ] & {
            _motion: VotingReputationDataTypes.MotionStructOutput;
        }>;
        "getMotion(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<[
            VotingReputationDataTypes.MotionStructOutput
        ] & {
            _motion: VotingReputationDataTypes.MotionStructOutput;
        }>;
        getMotionCount(overrides?: CallOverrides): Promise<[BigNumber] & {
            _count: BigNumber;
        }>;
        "getMotionCount()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _count: BigNumber;
        }>;
        getMotionState(_motionId: BigNumberish, overrides?: CallOverrides): Promise<[number] & {
            _motionState: number;
        }>;
        "getMotionState(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<[number] & {
            _motionState: number;
        }>;
        getRevealPeriod(overrides?: CallOverrides): Promise<[BigNumber] & {
            _period: BigNumber;
        }>;
        "getRevealPeriod()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _period: BigNumber;
        }>;
        getStake(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _stake: BigNumber;
        }>;
        "getStake(uint256,address,uint256)"(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _stake: BigNumber;
        }>;
        getStakePeriod(overrides?: CallOverrides): Promise<[BigNumber] & {
            _period: BigNumber;
        }>;
        "getStakePeriod()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _period: BigNumber;
        }>;
        getStakerReward(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            _reward: BigNumber;
            _penalty: BigNumber;
        }>;
        "getStakerReward(uint256,address,uint256)"(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            _reward: BigNumber;
            _penalty: BigNumber;
        }>;
        getSubmitPeriod(overrides?: CallOverrides): Promise<[BigNumber] & {
            _period: BigNumber;
        }>;
        "getSubmitPeriod()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _period: BigNumber;
        }>;
        getTotalStakeFraction(overrides?: CallOverrides): Promise<[BigNumber] & {
            _fraction: BigNumber;
        }>;
        "getTotalStakeFraction()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _fraction: BigNumber;
        }>;
        getUserMinStakeFraction(overrides?: CallOverrides): Promise<[BigNumber] & {
            _fraction: BigNumber;
        }>;
        "getUserMinStakeFraction()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _fraction: BigNumber;
        }>;
        getVoterReward(_motionId: BigNumberish, _voterRep: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _reward: BigNumber;
        }>;
        "getVoterReward(uint256,uint256)"(_motionId: BigNumberish, _voterRep: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _reward: BigNumber;
        }>;
        getVoterRewardFraction(overrides?: CallOverrides): Promise<[BigNumber] & {
            _fraction: BigNumber;
        }>;
        "getVoterRewardFraction()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _fraction: BigNumber;
        }>;
        getVoterRewardRange(_motionId: BigNumberish, _voterRep: BigNumberish, _voterAddress: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            _rewardMin: BigNumber;
            _rewardMax: BigNumber;
        }>;
        "getVoterRewardRange(uint256,uint256,address)"(_motionId: BigNumberish, _voterRep: BigNumberish, _voterAddress: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            _rewardMin: BigNumber;
            _rewardMax: BigNumber;
        }>;
        identifier(overrides?: CallOverrides): Promise<[string] & {
            identifier: string;
        }>;
        "identifier()"(overrides?: CallOverrides): Promise<[string] & {
            identifier: string;
        }>;
        initialise(_totalStakeFraction: BigNumberish, _voterRewardFraction: BigNumberish, _userMinStakeFraction: BigNumberish, _maxVoteFraction: BigNumberish, _stakePeriod: BigNumberish, _submitPeriod: BigNumberish, _revealPeriod: BigNumberish, _escalationPeriod: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(_totalStakeFraction: BigNumberish, _voterRewardFraction: BigNumberish, _userMinStakeFraction: BigNumberish, _maxVoteFraction: BigNumberish, _stakePeriod: BigNumberish, _submitPeriod: BigNumberish, _revealPeriod: BigNumberish, _escalationPeriod: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        install(_colony: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "install(address)"(_colony: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        multicall(_data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "multicall(bytes[])"(_data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        revealVote(_motionId: BigNumberish, _salt: BytesLike, _vote: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _salt: BytesLike, _vote: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        stakeMotion(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _vote: BigNumberish, _amount: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _vote: BigNumberish, _amount: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        submitVote(_motionId: BigNumberish, _voteSecret: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _voteSecret: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        uninstall(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "uninstall()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[BigNumber] & {
            version: BigNumber;
        }>;
        "version()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            version: BigNumber;
        }>;
    };
    claimMisalignedReward(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "claimMisalignedReward(uint256,uint256,uint256,address,uint256)"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    claimReward(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "claimReward(uint256,uint256,uint256,address,uint256)"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    createMotion(_domainId: BigNumberish, _childSkillIndex: BigNumberish, _altTarget: string, _action: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])"(_domainId: BigNumberish, _childSkillIndex: BigNumberish, _altTarget: string, _action: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    deprecate(_deprecated: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "deprecate(bool)"(_deprecated: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    escalateMotion(_motionId: BigNumberish, _newDomainId: BigNumberish, _childSkillIndex: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _newDomainId: BigNumberish, _childSkillIndex: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    failingExecutionAllowed(_motionId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    "failingExecutionAllowed(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    finalizeMotion(_motionId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "finalizeMotion(uint256)"(_motionId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    finalizeMotionWithoutFailure(_motionId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "finalizeMotionWithoutFailure(uint256)"(_motionId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    finishUpgrade(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "finishUpgrade()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    getActionSummary(_action: BytesLike, _altTarget: string, overrides?: CallOverrides): Promise<ActionSummaryStructOutput>;
    "getActionSummary(bytes,address)"(_action: BytesLike, _altTarget: string, overrides?: CallOverrides): Promise<ActionSummaryStructOutput>;
    getCapabilityRoles(_sig: BytesLike, overrides?: CallOverrides): Promise<string>;
    "getCapabilityRoles(bytes4)"(_sig: BytesLike, overrides?: CallOverrides): Promise<string>;
    getColony(overrides?: CallOverrides): Promise<string>;
    "getColony()"(overrides?: CallOverrides): Promise<string>;
    getDeprecated(overrides?: CallOverrides): Promise<boolean>;
    "getDeprecated()"(overrides?: CallOverrides): Promise<boolean>;
    getEscalationPeriod(overrides?: CallOverrides): Promise<BigNumber>;
    "getEscalationPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
    getExpenditureMotionCount(_structHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    "getExpenditureMotionCount(bytes32)"(_structHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    getExpenditureMotionLock(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "getExpenditureMotionLock(uint256)"(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getExpenditurePastVote(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "getExpenditurePastVote(uint256)"(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getExpenditurePastVotes_DEPRECATED(_slotSignature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    "getExpenditurePastVotes_DEPRECATED(bytes32)"(_slotSignature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    getMaxVoteFraction(overrides?: CallOverrides): Promise<BigNumber>;
    "getMaxVoteFraction()"(overrides?: CallOverrides): Promise<BigNumber>;
    getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
    "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
    getMotion(_motionId: BigNumberish, overrides?: CallOverrides): Promise<VotingReputationDataTypes.MotionStructOutput>;
    "getMotion(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<VotingReputationDataTypes.MotionStructOutput>;
    getMotionCount(overrides?: CallOverrides): Promise<BigNumber>;
    "getMotionCount()"(overrides?: CallOverrides): Promise<BigNumber>;
    getMotionState(_motionId: BigNumberish, overrides?: CallOverrides): Promise<number>;
    "getMotionState(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<number>;
    getRevealPeriod(overrides?: CallOverrides): Promise<BigNumber>;
    "getRevealPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
    getStake(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "getStake(uint256,address,uint256)"(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getStakePeriod(overrides?: CallOverrides): Promise<BigNumber>;
    "getStakePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
    getStakerReward(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        _reward: BigNumber;
        _penalty: BigNumber;
    }>;
    "getStakerReward(uint256,address,uint256)"(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        _reward: BigNumber;
        _penalty: BigNumber;
    }>;
    getSubmitPeriod(overrides?: CallOverrides): Promise<BigNumber>;
    "getSubmitPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
    getTotalStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;
    "getTotalStakeFraction()"(overrides?: CallOverrides): Promise<BigNumber>;
    getUserMinStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;
    "getUserMinStakeFraction()"(overrides?: CallOverrides): Promise<BigNumber>;
    getVoterReward(_motionId: BigNumberish, _voterRep: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "getVoterReward(uint256,uint256)"(_motionId: BigNumberish, _voterRep: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getVoterRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;
    "getVoterRewardFraction()"(overrides?: CallOverrides): Promise<BigNumber>;
    getVoterRewardRange(_motionId: BigNumberish, _voterRep: BigNumberish, _voterAddress: string, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        _rewardMin: BigNumber;
        _rewardMax: BigNumber;
    }>;
    "getVoterRewardRange(uint256,uint256,address)"(_motionId: BigNumberish, _voterRep: BigNumberish, _voterAddress: string, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        _rewardMin: BigNumber;
        _rewardMax: BigNumber;
    }>;
    identifier(overrides?: CallOverrides): Promise<string>;
    "identifier()"(overrides?: CallOverrides): Promise<string>;
    initialise(_totalStakeFraction: BigNumberish, _voterRewardFraction: BigNumberish, _userMinStakeFraction: BigNumberish, _maxVoteFraction: BigNumberish, _stakePeriod: BigNumberish, _submitPeriod: BigNumberish, _revealPeriod: BigNumberish, _escalationPeriod: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(_totalStakeFraction: BigNumberish, _voterRewardFraction: BigNumberish, _userMinStakeFraction: BigNumberish, _maxVoteFraction: BigNumberish, _stakePeriod: BigNumberish, _submitPeriod: BigNumberish, _revealPeriod: BigNumberish, _escalationPeriod: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    install(_colony: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "install(address)"(_colony: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    multicall(_data: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "multicall(bytes[])"(_data: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    revealVote(_motionId: BigNumberish, _salt: BytesLike, _vote: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _salt: BytesLike, _vote: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    stakeMotion(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _vote: BigNumberish, _amount: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _vote: BigNumberish, _amount: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    submitVote(_motionId: BigNumberish, _voteSecret: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _voteSecret: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    uninstall(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "uninstall()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<BigNumber>;
    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        claimMisalignedReward(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "claimMisalignedReward(uint256,uint256,uint256,address,uint256)"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<void>;
        claimReward(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "claimReward(uint256,uint256,uint256,address,uint256)"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<void>;
        createMotion(_domainId: BigNumberish, _childSkillIndex: BigNumberish, _altTarget: string, _action: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])"(_domainId: BigNumberish, _childSkillIndex: BigNumberish, _altTarget: string, _action: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        deprecate(_deprecated: boolean, overrides?: CallOverrides): Promise<void>;
        "deprecate(bool)"(_deprecated: boolean, overrides?: CallOverrides): Promise<void>;
        escalateMotion(_motionId: BigNumberish, _newDomainId: BigNumberish, _childSkillIndex: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _newDomainId: BigNumberish, _childSkillIndex: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: CallOverrides): Promise<string>;
        failingExecutionAllowed(_motionId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        "failingExecutionAllowed(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        finalizeMotion(_motionId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "finalizeMotion(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        finalizeMotionWithoutFailure(_motionId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "finalizeMotionWithoutFailure(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        finishUpgrade(overrides?: CallOverrides): Promise<void>;
        "finishUpgrade()"(overrides?: CallOverrides): Promise<void>;
        getActionSummary(_action: BytesLike, _altTarget: string, overrides?: CallOverrides): Promise<ActionSummaryStructOutput>;
        "getActionSummary(bytes,address)"(_action: BytesLike, _altTarget: string, overrides?: CallOverrides): Promise<ActionSummaryStructOutput>;
        getCapabilityRoles(_sig: BytesLike, overrides?: CallOverrides): Promise<string>;
        "getCapabilityRoles(bytes4)"(_sig: BytesLike, overrides?: CallOverrides): Promise<string>;
        getColony(overrides?: CallOverrides): Promise<string>;
        "getColony()"(overrides?: CallOverrides): Promise<string>;
        getDeprecated(overrides?: CallOverrides): Promise<boolean>;
        "getDeprecated()"(overrides?: CallOverrides): Promise<boolean>;
        getEscalationPeriod(overrides?: CallOverrides): Promise<BigNumber>;
        "getEscalationPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditureMotionCount(_structHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditureMotionCount(bytes32)"(_structHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditureMotionLock(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditureMotionLock(uint256)"(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditurePastVote(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditurePastVote(uint256)"(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditurePastVotes_DEPRECATED(_slotSignature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditurePastVotes_DEPRECATED(bytes32)"(_slotSignature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getMaxVoteFraction(overrides?: CallOverrides): Promise<BigNumber>;
        "getMaxVoteFraction()"(overrides?: CallOverrides): Promise<BigNumber>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        getMotion(_motionId: BigNumberish, overrides?: CallOverrides): Promise<VotingReputationDataTypes.MotionStructOutput>;
        "getMotion(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<VotingReputationDataTypes.MotionStructOutput>;
        getMotionCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getMotionCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getMotionState(_motionId: BigNumberish, overrides?: CallOverrides): Promise<number>;
        "getMotionState(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<number>;
        getRevealPeriod(overrides?: CallOverrides): Promise<BigNumber>;
        "getRevealPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
        getStake(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getStake(uint256,address,uint256)"(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getStakePeriod(overrides?: CallOverrides): Promise<BigNumber>;
        "getStakePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
        getStakerReward(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            _reward: BigNumber;
            _penalty: BigNumber;
        }>;
        "getStakerReward(uint256,address,uint256)"(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            _reward: BigNumber;
            _penalty: BigNumber;
        }>;
        getSubmitPeriod(overrides?: CallOverrides): Promise<BigNumber>;
        "getSubmitPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
        getTotalStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;
        "getTotalStakeFraction()"(overrides?: CallOverrides): Promise<BigNumber>;
        getUserMinStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;
        "getUserMinStakeFraction()"(overrides?: CallOverrides): Promise<BigNumber>;
        getVoterReward(_motionId: BigNumberish, _voterRep: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getVoterReward(uint256,uint256)"(_motionId: BigNumberish, _voterRep: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getVoterRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;
        "getVoterRewardFraction()"(overrides?: CallOverrides): Promise<BigNumber>;
        getVoterRewardRange(_motionId: BigNumberish, _voterRep: BigNumberish, _voterAddress: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            _rewardMin: BigNumber;
            _rewardMax: BigNumber;
        }>;
        "getVoterRewardRange(uint256,uint256,address)"(_motionId: BigNumberish, _voterRep: BigNumberish, _voterAddress: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            _rewardMin: BigNumber;
            _rewardMax: BigNumber;
        }>;
        identifier(overrides?: CallOverrides): Promise<string>;
        "identifier()"(overrides?: CallOverrides): Promise<string>;
        initialise(_totalStakeFraction: BigNumberish, _voterRewardFraction: BigNumberish, _userMinStakeFraction: BigNumberish, _maxVoteFraction: BigNumberish, _stakePeriod: BigNumberish, _submitPeriod: BigNumberish, _revealPeriod: BigNumberish, _escalationPeriod: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(_totalStakeFraction: BigNumberish, _voterRewardFraction: BigNumberish, _userMinStakeFraction: BigNumberish, _maxVoteFraction: BigNumberish, _stakePeriod: BigNumberish, _submitPeriod: BigNumberish, _revealPeriod: BigNumberish, _escalationPeriod: BigNumberish, overrides?: CallOverrides): Promise<void>;
        install(_colony: string, overrides?: CallOverrides): Promise<void>;
        "install(address)"(_colony: string, overrides?: CallOverrides): Promise<void>;
        multicall(_data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
        "multicall(bytes[])"(_data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
        revealVote(_motionId: BigNumberish, _salt: BytesLike, _vote: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _salt: BytesLike, _vote: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        stakeMotion(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _vote: BigNumberish, _amount: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _vote: BigNumberish, _amount: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        submitVote(_motionId: BigNumberish, _voteSecret: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _voteSecret: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: CallOverrides): Promise<void>;
        uninstall(overrides?: CallOverrides): Promise<void>;
        "uninstall()"(overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        "version()"(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "MetaTransactionExecuted(address,address,bytes)"(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
        MetaTransactionExecuted(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
        "MotionCreated(uint256,address,uint256)"(motionId?: BigNumberish | null, creator?: null, domainId?: BigNumberish | null): MotionCreatedEventFilter;
        MotionCreated(motionId?: BigNumberish | null, creator?: null, domainId?: BigNumberish | null): MotionCreatedEventFilter;
        "MotionEscalated(uint256,address,uint256,uint256)"(motionId?: BigNumberish | null, escalator?: null, domainId?: BigNumberish | null, newDomainId?: BigNumberish | null): MotionEscalatedEventFilter;
        MotionEscalated(motionId?: BigNumberish | null, escalator?: null, domainId?: BigNumberish | null, newDomainId?: BigNumberish | null): MotionEscalatedEventFilter;
        "MotionEventSet(uint256,uint256)"(motionId?: BigNumberish | null, eventIndex?: null): MotionEventSetEventFilter;
        MotionEventSet(motionId?: BigNumberish | null, eventIndex?: null): MotionEventSetEventFilter;
        "MotionFinalized(uint256,bytes,bool)"(motionId?: BigNumberish | null, action?: null, executed?: null): MotionFinalizedEventFilter;
        MotionFinalized(motionId?: BigNumberish | null, action?: null, executed?: null): MotionFinalizedEventFilter;
        "MotionRewardClaimed(uint256,address,uint256,uint256)"(motionId?: BigNumberish | null, staker?: string | null, vote?: BigNumberish | null, amount?: null): MotionRewardClaimedEventFilter;
        MotionRewardClaimed(motionId?: BigNumberish | null, staker?: string | null, vote?: BigNumberish | null, amount?: null): MotionRewardClaimedEventFilter;
        "MotionStaked(uint256,address,uint256,uint256)"(motionId?: BigNumberish | null, staker?: string | null, vote?: BigNumberish | null, amount?: null): MotionStakedEventFilter;
        MotionStaked(motionId?: BigNumberish | null, staker?: string | null, vote?: BigNumberish | null, amount?: null): MotionStakedEventFilter;
        "MotionVoteRevealed(uint256,address,uint256)"(motionId?: BigNumberish | null, voter?: string | null, vote?: BigNumberish | null): MotionVoteRevealedEventFilter;
        MotionVoteRevealed(motionId?: BigNumberish | null, voter?: string | null, vote?: BigNumberish | null): MotionVoteRevealedEventFilter;
        "MotionVoteSubmitted(uint256,address)"(motionId?: BigNumberish | null, voter?: string | null): MotionVoteSubmittedEventFilter;
        MotionVoteSubmitted(motionId?: BigNumberish | null, voter?: string | null): MotionVoteSubmittedEventFilter;
    };
    estimateGas: {
        claimMisalignedReward(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "claimMisalignedReward(uint256,uint256,uint256,address,uint256)"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        claimReward(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "claimReward(uint256,uint256,uint256,address,uint256)"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        createMotion(_domainId: BigNumberish, _childSkillIndex: BigNumberish, _altTarget: string, _action: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])"(_domainId: BigNumberish, _childSkillIndex: BigNumberish, _altTarget: string, _action: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        deprecate(_deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "deprecate(bool)"(_deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        escalateMotion(_motionId: BigNumberish, _newDomainId: BigNumberish, _childSkillIndex: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _newDomainId: BigNumberish, _childSkillIndex: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        failingExecutionAllowed(_motionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "failingExecutionAllowed(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        finalizeMotion(_motionId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "finalizeMotion(uint256)"(_motionId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        finalizeMotionWithoutFailure(_motionId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "finalizeMotionWithoutFailure(uint256)"(_motionId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        finishUpgrade(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "finishUpgrade()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        getActionSummary(_action: BytesLike, _altTarget: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getActionSummary(bytes,address)"(_action: BytesLike, _altTarget: string, overrides?: CallOverrides): Promise<BigNumber>;
        getCapabilityRoles(_sig: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "getCapabilityRoles(bytes4)"(_sig: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getColony(overrides?: CallOverrides): Promise<BigNumber>;
        "getColony()"(overrides?: CallOverrides): Promise<BigNumber>;
        getDeprecated(overrides?: CallOverrides): Promise<BigNumber>;
        "getDeprecated()"(overrides?: CallOverrides): Promise<BigNumber>;
        getEscalationPeriod(overrides?: CallOverrides): Promise<BigNumber>;
        "getEscalationPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditureMotionCount(_structHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditureMotionCount(bytes32)"(_structHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditureMotionLock(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditureMotionLock(uint256)"(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditurePastVote(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditurePastVote(uint256)"(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getExpenditurePastVotes_DEPRECATED(_slotSignature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "getExpenditurePastVotes_DEPRECATED(bytes32)"(_slotSignature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getMaxVoteFraction(overrides?: CallOverrides): Promise<BigNumber>;
        "getMaxVoteFraction()"(overrides?: CallOverrides): Promise<BigNumber>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        getMotion(_motionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getMotion(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getMotionCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getMotionCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getMotionState(_motionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getMotionState(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getRevealPeriod(overrides?: CallOverrides): Promise<BigNumber>;
        "getRevealPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
        getStake(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getStake(uint256,address,uint256)"(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getStakePeriod(overrides?: CallOverrides): Promise<BigNumber>;
        "getStakePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
        getStakerReward(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getStakerReward(uint256,address,uint256)"(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getSubmitPeriod(overrides?: CallOverrides): Promise<BigNumber>;
        "getSubmitPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
        getTotalStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;
        "getTotalStakeFraction()"(overrides?: CallOverrides): Promise<BigNumber>;
        getUserMinStakeFraction(overrides?: CallOverrides): Promise<BigNumber>;
        "getUserMinStakeFraction()"(overrides?: CallOverrides): Promise<BigNumber>;
        getVoterReward(_motionId: BigNumberish, _voterRep: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getVoterReward(uint256,uint256)"(_motionId: BigNumberish, _voterRep: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getVoterRewardFraction(overrides?: CallOverrides): Promise<BigNumber>;
        "getVoterRewardFraction()"(overrides?: CallOverrides): Promise<BigNumber>;
        getVoterRewardRange(_motionId: BigNumberish, _voterRep: BigNumberish, _voterAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getVoterRewardRange(uint256,uint256,address)"(_motionId: BigNumberish, _voterRep: BigNumberish, _voterAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        identifier(overrides?: CallOverrides): Promise<BigNumber>;
        "identifier()"(overrides?: CallOverrides): Promise<BigNumber>;
        initialise(_totalStakeFraction: BigNumberish, _voterRewardFraction: BigNumberish, _userMinStakeFraction: BigNumberish, _maxVoteFraction: BigNumberish, _stakePeriod: BigNumberish, _submitPeriod: BigNumberish, _revealPeriod: BigNumberish, _escalationPeriod: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(_totalStakeFraction: BigNumberish, _voterRewardFraction: BigNumberish, _userMinStakeFraction: BigNumberish, _maxVoteFraction: BigNumberish, _stakePeriod: BigNumberish, _submitPeriod: BigNumberish, _revealPeriod: BigNumberish, _escalationPeriod: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        install(_colony: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "install(address)"(_colony: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        multicall(_data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "multicall(bytes[])"(_data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        revealVote(_motionId: BigNumberish, _salt: BytesLike, _vote: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _salt: BytesLike, _vote: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        stakeMotion(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _vote: BigNumberish, _amount: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _vote: BigNumberish, _amount: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        submitVote(_motionId: BigNumberish, _voteSecret: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _voteSecret: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        uninstall(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "uninstall()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        "version()"(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        claimMisalignedReward(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "claimMisalignedReward(uint256,uint256,uint256,address,uint256)"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        claimReward(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "claimReward(uint256,uint256,uint256,address,uint256)"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        createMotion(_domainId: BigNumberish, _childSkillIndex: BigNumberish, _altTarget: string, _action: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "createMotion(uint256,uint256,address,bytes,bytes,bytes,uint256,bytes32[])"(_domainId: BigNumberish, _childSkillIndex: BigNumberish, _altTarget: string, _action: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        deprecate(_deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "deprecate(bool)"(_deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        escalateMotion(_motionId: BigNumberish, _newDomainId: BigNumberish, _childSkillIndex: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "escalateMotion(uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _newDomainId: BigNumberish, _childSkillIndex: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        failingExecutionAllowed(_motionId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "failingExecutionAllowed(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        finalizeMotion(_motionId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "finalizeMotion(uint256)"(_motionId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        finalizeMotionWithoutFailure(_motionId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "finalizeMotionWithoutFailure(uint256)"(_motionId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        finishUpgrade(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "finishUpgrade()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        getActionSummary(_action: BytesLike, _altTarget: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getActionSummary(bytes,address)"(_action: BytesLike, _altTarget: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCapabilityRoles(_sig: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getCapabilityRoles(bytes4)"(_sig: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getColony(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getColony()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDeprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getDeprecated()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getEscalationPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getEscalationPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExpenditureMotionCount(_structHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getExpenditureMotionCount(bytes32)"(_structHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExpenditureMotionLock(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getExpenditureMotionLock(uint256)"(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExpenditurePastVote(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getExpenditurePastVote(uint256)"(_expenditureId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExpenditurePastVotes_DEPRECATED(_slotSignature: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getExpenditurePastVotes_DEPRECATED(bytes32)"(_slotSignature: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMaxVoteFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMaxVoteFraction()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMotion(_motionId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMotion(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMotionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMotionCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMotionState(_motionId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMotionState(uint256)"(_motionId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRevealPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getRevealPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getStake(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getStake(uint256,address,uint256)"(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getStakePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getStakePeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getStakerReward(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getStakerReward(uint256,address,uint256)"(_motionId: BigNumberish, _staker: string, _vote: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSubmitPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getSubmitPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTotalStakeFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getTotalStakeFraction()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUserMinStakeFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getUserMinStakeFraction()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getVoterReward(_motionId: BigNumberish, _voterRep: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getVoterReward(uint256,uint256)"(_motionId: BigNumberish, _voterRep: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getVoterRewardFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getVoterRewardFraction()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getVoterRewardRange(_motionId: BigNumberish, _voterRep: BigNumberish, _voterAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getVoterRewardRange(uint256,uint256,address)"(_motionId: BigNumberish, _voterRep: BigNumberish, _voterAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "identifier()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialise(_totalStakeFraction: BigNumberish, _voterRewardFraction: BigNumberish, _userMinStakeFraction: BigNumberish, _maxVoteFraction: BigNumberish, _stakePeriod: BigNumberish, _submitPeriod: BigNumberish, _revealPeriod: BigNumberish, _escalationPeriod: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "initialise(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(_totalStakeFraction: BigNumberish, _voterRewardFraction: BigNumberish, _userMinStakeFraction: BigNumberish, _maxVoteFraction: BigNumberish, _stakePeriod: BigNumberish, _submitPeriod: BigNumberish, _revealPeriod: BigNumberish, _escalationPeriod: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        install(_colony: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "install(address)"(_colony: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        multicall(_data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "multicall(bytes[])"(_data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        revealVote(_motionId: BigNumberish, _salt: BytesLike, _vote: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "revealVote(uint256,bytes32,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _salt: BytesLike, _vote: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        stakeMotion(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _vote: BigNumberish, _amount: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "stakeMotion(uint256,uint256,uint256,uint256,uint256,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _vote: BigNumberish, _amount: BigNumberish, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        submitVote(_motionId: BigNumberish, _voteSecret: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "submitVote(uint256,bytes32,bytes,bytes,uint256,bytes32[])"(_motionId: BigNumberish, _voteSecret: BytesLike, _key: BytesLike, _value: BytesLike, _branchMask: BigNumberish, _siblings: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        uninstall(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "uninstall()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
