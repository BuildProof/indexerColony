import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common.js";
export declare namespace ColonyNetworkDataTypes {
    type MiningStakeStruct = {
        amount: BigNumberish;
        timestamp: BigNumberish;
    };
    type MiningStakeStructOutput = [BigNumber, BigNumber] & {
        amount: BigNumber;
        timestamp: BigNumber;
    };
    type PendingReputationUpdateStruct = {
        user: string;
        amount: BigNumberish;
        skillId: BigNumberish;
        colony: string;
        timestamp: BigNumberish;
    };
    type PendingReputationUpdateStructOutput = [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber
    ] & {
        user: string;
        amount: BigNumber;
        skillId: BigNumber;
        colony: string;
        timestamp: BigNumber;
    };
    type ReputationLogEntryStruct = {
        user: string;
        amount: BigNumberish;
        skillId: BigNumberish;
        colony: string;
        nUpdates: BigNumberish;
        nPreviousUpdates: BigNumberish;
    };
    type ReputationLogEntryStructOutput = [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
    ] & {
        user: string;
        amount: BigNumber;
        skillId: BigNumber;
        colony: string;
        nUpdates: BigNumber;
        nPreviousUpdates: BigNumber;
    };
    type SkillStruct = {
        nParents: BigNumberish;
        nChildren: BigNumberish;
        parents: BigNumberish[];
        children: BigNumberish[];
        DEPRECATED_globalSkill: boolean;
        DEPRECATED_deprecated: boolean;
    };
    type SkillStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber[],
        BigNumber[],
        boolean,
        boolean
    ] & {
        nParents: BigNumber;
        nChildren: BigNumber;
        parents: BigNumber[];
        children: BigNumber[];
        DEPRECATED_globalSkill: boolean;
        DEPRECATED_deprecated: boolean;
    };
}
export interface IColonyNetworkInterface extends utils.Interface {
    functions: {
        "addColonyVersion(uint256,address)": FunctionFragment;
        "addExtensionToNetwork(bytes32,address)": FunctionFragment;
        "addPendingReputationUpdate(uint256,address)": FunctionFragment;
        "addPendingSkill(uint256)": FunctionFragment;
        "addReputationUpdateLogFromBridge(address,address,int256,uint256,uint256)": FunctionFragment;
        "addSkill(uint256)": FunctionFragment;
        "addSkillFromBridge(uint256,uint256)": FunctionFragment;
        "addr(bytes32)": FunctionFragment;
        "appendReputationUpdateLog(address,int256,uint256)": FunctionFragment;
        "approveExitRecovery()": FunctionFragment;
        "bridgeCurrentRootHash(uint256)": FunctionFragment;
        "bridgePendingReputationUpdate(address,uint256)": FunctionFragment;
        "bridgeSkillIfNotMiningChain(uint256)": FunctionFragment;
        "burnUnneededRewards(uint256)": FunctionFragment;
        "calculateMinerWeight(uint256,uint256)": FunctionFragment;
        "checkNotAdditionalProtectedVariable(uint256)": FunctionFragment;
        "claimMiningReward(address)": FunctionFragment;
        "createColony(address)": FunctionFragment;
        "createColony(address,uint256,string,string)": FunctionFragment;
        "createColony(address,uint256,string)": FunctionFragment;
        "createColony(address,uint256,string,string,bool)": FunctionFragment;
        "createColonyForFrontend(address,string,string,uint8,uint256,string,string)": FunctionFragment;
        "createMetaColony(address)": FunctionFragment;
        "deployTokenAuthority(address,address,address[])": FunctionFragment;
        "deployTokenViaNetwork(string,string,uint8)": FunctionFragment;
        "deprecateExtension(bytes32,bool)": FunctionFragment;
        "deprecateSkill(uint256,bool)": FunctionFragment;
        "enterRecoveryMode()": FunctionFragment;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
        "exitRecoveryMode()": FunctionFragment;
        "getBridgedReputationUpdateCount(uint256,address)": FunctionFragment;
        "getBridgedSkillCounts(uint256)": FunctionFragment;
        "getChildSkillId(uint256,uint256)": FunctionFragment;
        "getColony(uint256)": FunctionFragment;
        "getColonyBridgeAddress()": FunctionFragment;
        "getColonyCount()": FunctionFragment;
        "getColonyCreationSalt()": FunctionFragment;
        "getColonyVersionResolver(uint256)": FunctionFragment;
        "getCurrentColonyVersion()": FunctionFragment;
        "getENSRegistrar()": FunctionFragment;
        "getExtensionInstallation(bytes32,address)": FunctionFragment;
        "getExtensionResolver(bytes32,uint256)": FunctionFragment;
        "getFeeInverse()": FunctionFragment;
        "getMetaColony()": FunctionFragment;
        "getMetatransactionNonce(address)": FunctionFragment;
        "getMiningChainId()": FunctionFragment;
        "getMiningDelegator(address)": FunctionFragment;
        "getMiningResolver()": FunctionFragment;
        "getMiningStake(address)": FunctionFragment;
        "getParentSkillId(uint256,uint256)": FunctionFragment;
        "getPayoutWhitelist(address)": FunctionFragment;
        "getPendingReputationUpdate(uint256,address,uint256)": FunctionFragment;
        "getPendingSkillAddition(uint256,uint256)": FunctionFragment;
        "getProfileDBAddress(bytes32)": FunctionFragment;
        "getReplacementReputationUpdateLogEntry(address,uint256)": FunctionFragment;
        "getReplacementReputationUpdateLogsExist(address)": FunctionFragment;
        "getReputationMiningCycle(bool)": FunctionFragment;
        "getReputationMiningCycleReward()": FunctionFragment;
        "getReputationMiningSkillId()": FunctionFragment;
        "getReputationRootHash()": FunctionFragment;
        "getReputationRootHashNLeaves()": FunctionFragment;
        "getReputationRootHashNNodes()": FunctionFragment;
        "getSkill(uint256)": FunctionFragment;
        "getSkillCount()": FunctionFragment;
        "getTokenLocking()": FunctionFragment;
        "initialise(address,uint256)": FunctionFragment;
        "initialiseReputationMining(uint256,bytes32,uint256)": FunctionFragment;
        "initialiseRootLocalSkill()": FunctionFragment;
        "installExtension(bytes32,uint256)": FunctionFragment;
        "isColony(address)": FunctionFragment;
        "isInRecoveryMode()": FunctionFragment;
        "lookupRegisteredENSDomain(address)": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "numRecoveryRoles()": FunctionFragment;
        "punishStakers(address[],uint256)": FunctionFragment;
        "registerColonyLabel(string,string)": FunctionFragment;
        "registerUserLabel(string,string)": FunctionFragment;
        "removeRecoveryRole(address)": FunctionFragment;
        "reward(address,uint256)": FunctionFragment;
        "setColonyBridgeAddress(address)": FunctionFragment;
        "setFeeInverse(uint256)": FunctionFragment;
        "setMiningDelegate(address,bool)": FunctionFragment;
        "setMiningResolver(address)": FunctionFragment;
        "setPayoutWhitelist(address,bool)": FunctionFragment;
        "setRecoveryRole(address)": FunctionFragment;
        "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)": FunctionFragment;
        "setReputationMiningCycleReward(uint256)": FunctionFragment;
        "setReputationRootHash(bytes32,uint256,address[])": FunctionFragment;
        "setReputationRootHashFromBridge(bytes32,uint256,uint256)": FunctionFragment;
        "setStorageSlotRecovery(uint256,bytes32)": FunctionFragment;
        "setTokenLocking(address)": FunctionFragment;
        "setupRegistrar(address,bytes32)": FunctionFragment;
        "stakeForMining(uint256)": FunctionFragment;
        "startNextCycle()": FunctionFragment;
        "startTokenAuction(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "uninstallExtension(bytes32)": FunctionFragment;
        "unstakeForMining(uint256)": FunctionFragment;
        "updateColonyOrbitDB(string)": FunctionFragment;
        "updateUserOrbitDB(string)": FunctionFragment;
        "upgradeExtension(bytes32,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addColonyVersion" | "addColonyVersion(uint256,address)" | "addExtensionToNetwork" | "addExtensionToNetwork(bytes32,address)" | "addPendingReputationUpdate" | "addPendingReputationUpdate(uint256,address)" | "addPendingSkill" | "addPendingSkill(uint256)" | "addReputationUpdateLogFromBridge" | "addReputationUpdateLogFromBridge(address,address,int256,uint256,uint256)" | "addSkill" | "addSkill(uint256)" | "addSkillFromBridge" | "addSkillFromBridge(uint256,uint256)" | "addr" | "addr(bytes32)" | "appendReputationUpdateLog" | "appendReputationUpdateLog(address,int256,uint256)" | "approveExitRecovery" | "approveExitRecovery()" | "bridgeCurrentRootHash" | "bridgeCurrentRootHash(uint256)" | "bridgePendingReputationUpdate" | "bridgePendingReputationUpdate(address,uint256)" | "bridgeSkillIfNotMiningChain" | "bridgeSkillIfNotMiningChain(uint256)" | "burnUnneededRewards" | "burnUnneededRewards(uint256)" | "calculateMinerWeight" | "calculateMinerWeight(uint256,uint256)" | "checkNotAdditionalProtectedVariable" | "checkNotAdditionalProtectedVariable(uint256)" | "claimMiningReward" | "claimMiningReward(address)" | "createColony(address)" | "createColony(address,uint256,string,string)" | "createColony(address,uint256,string)" | "createColony(address,uint256,string,string,bool)" | "createColonyForFrontend" | "createColonyForFrontend(address,string,string,uint8,uint256,string,string)" | "createMetaColony" | "createMetaColony(address)" | "deployTokenAuthority" | "deployTokenAuthority(address,address,address[])" | "deployTokenViaNetwork" | "deployTokenViaNetwork(string,string,uint8)" | "deprecateExtension" | "deprecateExtension(bytes32,bool)" | "deprecateSkill" | "deprecateSkill(uint256,bool)" | "enterRecoveryMode" | "enterRecoveryMode()" | "executeMetaTransaction" | "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)" | "exitRecoveryMode" | "exitRecoveryMode()" | "getBridgedReputationUpdateCount" | "getBridgedReputationUpdateCount(uint256,address)" | "getBridgedSkillCounts" | "getBridgedSkillCounts(uint256)" | "getChildSkillId" | "getChildSkillId(uint256,uint256)" | "getColony" | "getColony(uint256)" | "getColonyBridgeAddress" | "getColonyBridgeAddress()" | "getColonyCount" | "getColonyCount()" | "getColonyCreationSalt" | "getColonyCreationSalt()" | "getColonyVersionResolver" | "getColonyVersionResolver(uint256)" | "getCurrentColonyVersion" | "getCurrentColonyVersion()" | "getENSRegistrar" | "getENSRegistrar()" | "getExtensionInstallation" | "getExtensionInstallation(bytes32,address)" | "getExtensionResolver" | "getExtensionResolver(bytes32,uint256)" | "getFeeInverse" | "getFeeInverse()" | "getMetaColony" | "getMetaColony()" | "getMetatransactionNonce" | "getMetatransactionNonce(address)" | "getMiningChainId" | "getMiningChainId()" | "getMiningDelegator" | "getMiningDelegator(address)" | "getMiningResolver" | "getMiningResolver()" | "getMiningStake" | "getMiningStake(address)" | "getParentSkillId" | "getParentSkillId(uint256,uint256)" | "getPayoutWhitelist" | "getPayoutWhitelist(address)" | "getPendingReputationUpdate" | "getPendingReputationUpdate(uint256,address,uint256)" | "getPendingSkillAddition" | "getPendingSkillAddition(uint256,uint256)" | "getProfileDBAddress" | "getProfileDBAddress(bytes32)" | "getReplacementReputationUpdateLogEntry" | "getReplacementReputationUpdateLogEntry(address,uint256)" | "getReplacementReputationUpdateLogsExist" | "getReplacementReputationUpdateLogsExist(address)" | "getReputationMiningCycle" | "getReputationMiningCycle(bool)" | "getReputationMiningCycleReward" | "getReputationMiningCycleReward()" | "getReputationMiningSkillId" | "getReputationMiningSkillId()" | "getReputationRootHash" | "getReputationRootHash()" | "getReputationRootHashNLeaves" | "getReputationRootHashNLeaves()" | "getReputationRootHashNNodes" | "getReputationRootHashNNodes()" | "getSkill" | "getSkill(uint256)" | "getSkillCount" | "getSkillCount()" | "getTokenLocking" | "getTokenLocking()" | "initialise" | "initialise(address,uint256)" | "initialiseReputationMining" | "initialiseReputationMining(uint256,bytes32,uint256)" | "initialiseRootLocalSkill" | "initialiseRootLocalSkill()" | "installExtension" | "installExtension(bytes32,uint256)" | "isColony" | "isColony(address)" | "isInRecoveryMode" | "isInRecoveryMode()" | "lookupRegisteredENSDomain" | "lookupRegisteredENSDomain(address)" | "multicall" | "multicall(bytes[])" | "numRecoveryRoles" | "numRecoveryRoles()" | "punishStakers" | "punishStakers(address[],uint256)" | "registerColonyLabel" | "registerColonyLabel(string,string)" | "registerUserLabel" | "registerUserLabel(string,string)" | "removeRecoveryRole" | "removeRecoveryRole(address)" | "reward" | "reward(address,uint256)" | "setColonyBridgeAddress" | "setColonyBridgeAddress(address)" | "setFeeInverse" | "setFeeInverse(uint256)" | "setMiningDelegate" | "setMiningDelegate(address,bool)" | "setMiningResolver" | "setMiningResolver(address)" | "setPayoutWhitelist" | "setPayoutWhitelist(address,bool)" | "setRecoveryRole" | "setRecoveryRole(address)" | "setReplacementReputationUpdateLogEntry" | "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)" | "setReputationMiningCycleReward" | "setReputationMiningCycleReward(uint256)" | "setReputationRootHash" | "setReputationRootHash(bytes32,uint256,address[])" | "setReputationRootHashFromBridge" | "setReputationRootHashFromBridge(bytes32,uint256,uint256)" | "setStorageSlotRecovery" | "setStorageSlotRecovery(uint256,bytes32)" | "setTokenLocking" | "setTokenLocking(address)" | "setupRegistrar" | "setupRegistrar(address,bytes32)" | "stakeForMining" | "stakeForMining(uint256)" | "startNextCycle" | "startNextCycle()" | "startTokenAuction" | "startTokenAuction(address)" | "supportsInterface" | "supportsInterface(bytes4)" | "uninstallExtension" | "uninstallExtension(bytes32)" | "unstakeForMining" | "unstakeForMining(uint256)" | "updateColonyOrbitDB" | "updateColonyOrbitDB(string)" | "updateUserOrbitDB" | "updateUserOrbitDB(string)" | "upgradeExtension" | "upgradeExtension(bytes32,uint256)"): FunctionFragment;
    encodeFunctionData(functionFragment: "addColonyVersion", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "addColonyVersion(uint256,address)", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "addExtensionToNetwork", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "addExtensionToNetwork(bytes32,address)", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "addPendingReputationUpdate", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "addPendingReputationUpdate(uint256,address)", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "addPendingSkill", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "addPendingSkill(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "addReputationUpdateLogFromBridge", values: [string, string, BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "addReputationUpdateLogFromBridge(address,address,int256,uint256,uint256)", values: [string, string, BigNumberish, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "addSkill", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "addSkill(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "addSkillFromBridge", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "addSkillFromBridge(uint256,uint256)", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "addr", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "addr(bytes32)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "appendReputationUpdateLog", values: [string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "appendReputationUpdateLog(address,int256,uint256)", values: [string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "approveExitRecovery", values?: undefined): string;
    encodeFunctionData(functionFragment: "approveExitRecovery()", values?: undefined): string;
    encodeFunctionData(functionFragment: "bridgeCurrentRootHash", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "bridgeCurrentRootHash(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "bridgePendingReputationUpdate", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "bridgePendingReputationUpdate(address,uint256)", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "bridgeSkillIfNotMiningChain", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "bridgeSkillIfNotMiningChain(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "burnUnneededRewards", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "burnUnneededRewards(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "calculateMinerWeight", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "calculateMinerWeight(uint256,uint256)", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "checkNotAdditionalProtectedVariable", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "checkNotAdditionalProtectedVariable(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "claimMiningReward", values: [string]): string;
    encodeFunctionData(functionFragment: "claimMiningReward(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "createColony(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "createColony(address,uint256,string,string)", values: [string, BigNumberish, string, string]): string;
    encodeFunctionData(functionFragment: "createColony(address,uint256,string)", values: [string, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "createColony(address,uint256,string,string,bool)", values: [string, BigNumberish, string, string, boolean]): string;
    encodeFunctionData(functionFragment: "createColonyForFrontend", values: [string, string, string, BigNumberish, BigNumberish, string, string]): string;
    encodeFunctionData(functionFragment: "createColonyForFrontend(address,string,string,uint8,uint256,string,string)", values: [string, string, string, BigNumberish, BigNumberish, string, string]): string;
    encodeFunctionData(functionFragment: "createMetaColony", values: [string]): string;
    encodeFunctionData(functionFragment: "createMetaColony(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "deployTokenAuthority", values: [string, string, string[]]): string;
    encodeFunctionData(functionFragment: "deployTokenAuthority(address,address,address[])", values: [string, string, string[]]): string;
    encodeFunctionData(functionFragment: "deployTokenViaNetwork", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "deployTokenViaNetwork(string,string,uint8)", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "deprecateExtension", values: [BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "deprecateExtension(bytes32,bool)", values: [BytesLike, boolean]): string;
    encodeFunctionData(functionFragment: "deprecateSkill", values: [BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "deprecateSkill(uint256,bool)", values: [BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "enterRecoveryMode", values?: undefined): string;
    encodeFunctionData(functionFragment: "enterRecoveryMode()", values?: undefined): string;
    encodeFunctionData(functionFragment: "executeMetaTransaction", values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)", values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "exitRecoveryMode", values?: undefined): string;
    encodeFunctionData(functionFragment: "exitRecoveryMode()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBridgedReputationUpdateCount", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "getBridgedReputationUpdateCount(uint256,address)", values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "getBridgedSkillCounts", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getBridgedSkillCounts(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getChildSkillId", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getChildSkillId(uint256,uint256)", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getColony", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getColony(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getColonyBridgeAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "getColonyBridgeAddress()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getColonyCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "getColonyCount()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getColonyCreationSalt", values?: undefined): string;
    encodeFunctionData(functionFragment: "getColonyCreationSalt()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getColonyVersionResolver", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getColonyVersionResolver(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getCurrentColonyVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCurrentColonyVersion()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getENSRegistrar", values?: undefined): string;
    encodeFunctionData(functionFragment: "getENSRegistrar()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getExtensionInstallation", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "getExtensionInstallation(bytes32,address)", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "getExtensionResolver", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getExtensionResolver(bytes32,uint256)", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getFeeInverse", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFeeInverse()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMetaColony", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMetaColony()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMetatransactionNonce", values: [string]): string;
    encodeFunctionData(functionFragment: "getMetatransactionNonce(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "getMiningChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMiningChainId()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMiningDelegator", values: [string]): string;
    encodeFunctionData(functionFragment: "getMiningDelegator(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "getMiningResolver", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMiningResolver()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMiningStake", values: [string]): string;
    encodeFunctionData(functionFragment: "getMiningStake(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "getParentSkillId", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getParentSkillId(uint256,uint256)", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPayoutWhitelist", values: [string]): string;
    encodeFunctionData(functionFragment: "getPayoutWhitelist(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "getPendingReputationUpdate", values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPendingReputationUpdate(uint256,address,uint256)", values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPendingSkillAddition", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getPendingSkillAddition(uint256,uint256)", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getProfileDBAddress", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getProfileDBAddress(bytes32)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getReplacementReputationUpdateLogEntry", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getReplacementReputationUpdateLogEntry(address,uint256)", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getReplacementReputationUpdateLogsExist", values: [string]): string;
    encodeFunctionData(functionFragment: "getReplacementReputationUpdateLogsExist(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "getReputationMiningCycle", values: [boolean]): string;
    encodeFunctionData(functionFragment: "getReputationMiningCycle(bool)", values: [boolean]): string;
    encodeFunctionData(functionFragment: "getReputationMiningCycleReward", values?: undefined): string;
    encodeFunctionData(functionFragment: "getReputationMiningCycleReward()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getReputationMiningSkillId", values?: undefined): string;
    encodeFunctionData(functionFragment: "getReputationMiningSkillId()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getReputationRootHash", values?: undefined): string;
    encodeFunctionData(functionFragment: "getReputationRootHash()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getReputationRootHashNLeaves", values?: undefined): string;
    encodeFunctionData(functionFragment: "getReputationRootHashNLeaves()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getReputationRootHashNNodes", values?: undefined): string;
    encodeFunctionData(functionFragment: "getReputationRootHashNNodes()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSkill", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getSkill(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getSkillCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSkillCount()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTokenLocking", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTokenLocking()", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialise", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "initialise(address,uint256)", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "initialiseReputationMining", values: [BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "initialiseReputationMining(uint256,bytes32,uint256)", values: [BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "initialiseRootLocalSkill", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialiseRootLocalSkill()", values?: undefined): string;
    encodeFunctionData(functionFragment: "installExtension", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "installExtension(bytes32,uint256)", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isColony", values: [string]): string;
    encodeFunctionData(functionFragment: "isColony(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "isInRecoveryMode", values?: undefined): string;
    encodeFunctionData(functionFragment: "isInRecoveryMode()", values?: undefined): string;
    encodeFunctionData(functionFragment: "lookupRegisteredENSDomain", values: [string]): string;
    encodeFunctionData(functionFragment: "lookupRegisteredENSDomain(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "multicall(bytes[])", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "numRecoveryRoles", values?: undefined): string;
    encodeFunctionData(functionFragment: "numRecoveryRoles()", values?: undefined): string;
    encodeFunctionData(functionFragment: "punishStakers", values: [string[], BigNumberish]): string;
    encodeFunctionData(functionFragment: "punishStakers(address[],uint256)", values: [string[], BigNumberish]): string;
    encodeFunctionData(functionFragment: "registerColonyLabel", values: [string, string]): string;
    encodeFunctionData(functionFragment: "registerColonyLabel(string,string)", values: [string, string]): string;
    encodeFunctionData(functionFragment: "registerUserLabel", values: [string, string]): string;
    encodeFunctionData(functionFragment: "registerUserLabel(string,string)", values: [string, string]): string;
    encodeFunctionData(functionFragment: "removeRecoveryRole", values: [string]): string;
    encodeFunctionData(functionFragment: "removeRecoveryRole(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "reward", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "reward(address,uint256)", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setColonyBridgeAddress", values: [string]): string;
    encodeFunctionData(functionFragment: "setColonyBridgeAddress(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "setFeeInverse", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setFeeInverse(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setMiningDelegate", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setMiningDelegate(address,bool)", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setMiningResolver", values: [string]): string;
    encodeFunctionData(functionFragment: "setMiningResolver(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "setPayoutWhitelist", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setPayoutWhitelist(address,bool)", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setRecoveryRole", values: [string]): string;
    encodeFunctionData(functionFragment: "setRecoveryRole(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "setReplacementReputationUpdateLogEntry", values: [
        string,
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)", values: [
        string,
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "setReputationMiningCycleReward", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setReputationMiningCycleReward(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setReputationRootHash", values: [BytesLike, BigNumberish, string[]]): string;
    encodeFunctionData(functionFragment: "setReputationRootHash(bytes32,uint256,address[])", values: [BytesLike, BigNumberish, string[]]): string;
    encodeFunctionData(functionFragment: "setReputationRootHashFromBridge", values: [BytesLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setReputationRootHashFromBridge(bytes32,uint256,uint256)", values: [BytesLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setStorageSlotRecovery", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setStorageSlotRecovery(uint256,bytes32)", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setTokenLocking", values: [string]): string;
    encodeFunctionData(functionFragment: "setTokenLocking(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "setupRegistrar", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "setupRegistrar(address,bytes32)", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "stakeForMining", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "stakeForMining(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "startNextCycle", values?: undefined): string;
    encodeFunctionData(functionFragment: "startNextCycle()", values?: undefined): string;
    encodeFunctionData(functionFragment: "startTokenAuction", values: [string]): string;
    encodeFunctionData(functionFragment: "startTokenAuction(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface(bytes4)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "uninstallExtension", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "uninstallExtension(bytes32)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "unstakeForMining", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "unstakeForMining(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateColonyOrbitDB", values: [string]): string;
    encodeFunctionData(functionFragment: "updateColonyOrbitDB(string)", values: [string]): string;
    encodeFunctionData(functionFragment: "updateUserOrbitDB", values: [string]): string;
    encodeFunctionData(functionFragment: "updateUserOrbitDB(string)", values: [string]): string;
    encodeFunctionData(functionFragment: "upgradeExtension", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "upgradeExtension(bytes32,uint256)", values: [BytesLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "addColonyVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addColonyVersion(uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addExtensionToNetwork", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addExtensionToNetwork(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addPendingReputationUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addPendingReputationUpdate(uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addPendingSkill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addPendingSkill(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addReputationUpdateLogFromBridge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addReputationUpdateLogFromBridge(address,address,int256,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addSkill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addSkill(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addSkillFromBridge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addSkillFromBridge(uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addr(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appendReputationUpdateLog", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "appendReputationUpdateLog(address,int256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approveExitRecovery", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approveExitRecovery()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeCurrentRootHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeCurrentRootHash(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgePendingReputationUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgePendingReputationUpdate(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeSkillIfNotMiningChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeSkillIfNotMiningChain(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burnUnneededRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burnUnneededRewards(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calculateMinerWeight", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calculateMinerWeight(uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkNotAdditionalProtectedVariable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkNotAdditionalProtectedVariable(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimMiningReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimMiningReward(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createColony(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createColony(address,uint256,string,string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createColony(address,uint256,string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createColony(address,uint256,string,string,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createColonyForFrontend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createColonyForFrontend(address,string,string,uint8,uint256,string,string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createMetaColony", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createMetaColony(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployTokenAuthority", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployTokenAuthority(address,address,address[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployTokenViaNetwork", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployTokenViaNetwork(string,string,uint8)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deprecateExtension", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deprecateExtension(bytes32,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deprecateSkill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deprecateSkill(uint256,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enterRecoveryMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enterRecoveryMode()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeMetaTransaction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "exitRecoveryMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "exitRecoveryMode()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBridgedReputationUpdateCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBridgedReputationUpdateCount(uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBridgedSkillCounts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBridgedSkillCounts(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getChildSkillId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getChildSkillId(uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColony", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColony(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColonyBridgeAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColonyBridgeAddress()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColonyCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColonyCount()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColonyCreationSalt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColonyCreationSalt()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColonyVersionResolver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getColonyVersionResolver(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentColonyVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentColonyVersion()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getENSRegistrar", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getENSRegistrar()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExtensionInstallation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExtensionInstallation(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExtensionResolver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExtensionResolver(bytes32,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeInverse", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeInverse()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetaColony", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetaColony()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetatransactionNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetatransactionNonce(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMiningChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMiningChainId()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMiningDelegator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMiningDelegator(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMiningResolver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMiningResolver()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMiningStake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMiningStake(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getParentSkillId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getParentSkillId(uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPayoutWhitelist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPayoutWhitelist(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPendingReputationUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPendingReputationUpdate(uint256,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPendingSkillAddition", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPendingSkillAddition(uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProfileDBAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProfileDBAddress(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReplacementReputationUpdateLogEntry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReplacementReputationUpdateLogEntry(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReplacementReputationUpdateLogsExist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReplacementReputationUpdateLogsExist(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReputationMiningCycle", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReputationMiningCycle(bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReputationMiningCycleReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReputationMiningCycleReward()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReputationMiningSkillId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReputationMiningSkillId()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReputationRootHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReputationRootHash()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReputationRootHashNLeaves", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReputationRootHashNLeaves()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReputationRootHashNNodes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReputationRootHashNNodes()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSkill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSkill(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSkillCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSkillCount()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTokenLocking", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTokenLocking()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialise(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialiseReputationMining", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialiseReputationMining(uint256,bytes32,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialiseRootLocalSkill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialiseRootLocalSkill()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "installExtension", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "installExtension(bytes32,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isColony", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isColony(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isInRecoveryMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isInRecoveryMode()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lookupRegisteredENSDomain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lookupRegisteredENSDomain(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall(bytes[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "numRecoveryRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "numRecoveryRoles()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "punishStakers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "punishStakers(address[],uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerColonyLabel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerColonyLabel(string,string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerUserLabel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerUserLabel(string,string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeRecoveryRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeRecoveryRole(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reward(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setColonyBridgeAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setColonyBridgeAddress(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeeInverse", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeeInverse(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMiningDelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMiningDelegate(address,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMiningResolver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMiningResolver(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPayoutWhitelist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPayoutWhitelist(address,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRecoveryRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRecoveryRole(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReplacementReputationUpdateLogEntry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReputationMiningCycleReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReputationMiningCycleReward(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReputationRootHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReputationRootHash(bytes32,uint256,address[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReputationRootHashFromBridge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReputationRootHashFromBridge(bytes32,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setStorageSlotRecovery", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setStorageSlotRecovery(uint256,bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTokenLocking", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTokenLocking(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setupRegistrar", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setupRegistrar(address,bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakeForMining", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakeForMining(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "startNextCycle", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "startNextCycle()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "startTokenAuction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "startTokenAuction(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface(bytes4)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uninstallExtension", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uninstallExtension(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unstakeForMining", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unstakeForMining(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateColonyOrbitDB", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateColonyOrbitDB(string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateUserOrbitDB", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateUserOrbitDB(string)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeExtension", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeExtension(bytes32,uint256)", data: BytesLike): Result;
    events: {
        "AuctionCreated(address,address,uint256)": EventFragment;
        "BridgeSet(address)": EventFragment;
        "ColonyAdded(uint256,address,address)": EventFragment;
        "ColonyLabelRegistered(address,bytes32)": EventFragment;
        "ColonyNetworkInitialised(address)": EventFragment;
        "ColonyVersionAdded(uint256,address)": EventFragment;
        "ExtensionAddedToNetwork(bytes32,uint256)": EventFragment;
        "ExtensionDeprecated(bytes32,address,bool)": EventFragment;
        "ExtensionInstalled(bytes32,address,uint256)": EventFragment;
        "ExtensionUninstalled(bytes32,address)": EventFragment;
        "ExtensionUpgraded(bytes32,address,uint256)": EventFragment;
        "MetaColonyCreated(address,address,uint256)": EventFragment;
        "MetaTransactionExecuted(address,address,bytes)": EventFragment;
        "MiningCycleResolverSet(address)": EventFragment;
        "NetworkFeeInverseSet(uint256)": EventFragment;
        "RecoveryModeEntered(address)": EventFragment;
        "RecoveryModeExitApproved(address)": EventFragment;
        "RecoveryModeExited(address)": EventFragment;
        "RecoveryRoleSet(address,bool)": EventFragment;
        "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)": EventFragment;
        "RegistrarInitialised(address,bytes32)": EventFragment;
        "ReputationMinerPenalised(address,uint256)": EventFragment;
        "ReputationMiningCycleComplete(bytes32,uint256)": EventFragment;
        "ReputationMiningInitialised(address)": EventFragment;
        "ReputationMiningRewardSet(uint256)": EventFragment;
        "ReputationRootHashSet(bytes32,uint256,address[],uint256)": EventFragment;
        "ReputationUpdateAddedFromBridge(uint256,address,uint256)": EventFragment;
        "ReputationUpdateSentToBridge(address,uint256)": EventFragment;
        "ReputationUpdateStored(address,uint256)": EventFragment;
        "ReputationUpdateStoredFromBridge(uint256,address,uint256)": EventFragment;
        "SkillAdded(uint256,uint256)": EventFragment;
        "SkillAddedFromBridge(uint256)": EventFragment;
        "SkillCreationStored(uint256)": EventFragment;
        "SkillStoredFromBridge(uint256)": EventFragment;
        "TokenAuthorityDeployed(address)": EventFragment;
        "TokenDeployed(address)": EventFragment;
        "TokenLockingAddressSet(address)": EventFragment;
        "TokenWhitelisted(address,bool)": EventFragment;
        "UserLabelRegistered(address,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AuctionCreated(address,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BridgeSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BridgeSet(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyAdded(uint256,address,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyLabelRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyLabelRegistered(address,bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyNetworkInitialised"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyNetworkInitialised(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyVersionAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyVersionAdded(uint256,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionAddedToNetwork"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionAddedToNetwork(bytes32,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionDeprecated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionDeprecated(bytes32,address,bool)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionInstalled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionInstalled(bytes32,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionUninstalled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionUninstalled(bytes32,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionUpgraded(bytes32,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaColonyCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaColonyCreated(address,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted(address,address,bytes)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MiningCycleResolverSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MiningCycleResolverSet(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NetworkFeeInverseSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NetworkFeeInverseSet(uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeEntered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeEntered(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeExitApproved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeExitApproved(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeExited"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeExited(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryRoleSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryRoleSet(address,bool)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryStorageSlotSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RegistrarInitialised"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RegistrarInitialised(address,bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMinerPenalised"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMinerPenalised(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMiningCycleComplete"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMiningCycleComplete(bytes32,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMiningInitialised"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMiningInitialised(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMiningRewardSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMiningRewardSet(uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationRootHashSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationRootHashSet(bytes32,uint256,address[],uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateAddedFromBridge"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateAddedFromBridge(uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateSentToBridge"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateSentToBridge(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateStored"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateStored(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateStoredFromBridge"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateStoredFromBridge(uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillAdded(uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillAddedFromBridge"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillAddedFromBridge(uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillCreationStored"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillCreationStored(uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillStoredFromBridge"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillStoredFromBridge(uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenAuthorityDeployed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenAuthorityDeployed(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenDeployed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenDeployed(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenLockingAddressSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenLockingAddressSet(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenWhitelisted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenWhitelisted(address,bool)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UserLabelRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UserLabelRegistered(address,bytes32)"): EventFragment;
}
export interface AuctionCreatedEventObject {
    auction: string;
    token: string;
    quantity: BigNumber;
}
export type AuctionCreatedEvent = TypedEvent<[
    string,
    string,
    BigNumber
], AuctionCreatedEventObject>;
export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;
export interface BridgeSetEventObject {
    bridgeAddress: string;
}
export type BridgeSetEvent = TypedEvent<[string], BridgeSetEventObject>;
export type BridgeSetEventFilter = TypedEventFilter<BridgeSetEvent>;
export interface ColonyAddedEventObject {
    colonyId: BigNumber;
    colonyAddress: string;
    token: string;
}
export type ColonyAddedEvent = TypedEvent<[
    BigNumber,
    string,
    string
], ColonyAddedEventObject>;
export type ColonyAddedEventFilter = TypedEventFilter<ColonyAddedEvent>;
export interface ColonyLabelRegisteredEventObject {
    colony: string;
    label: string;
}
export type ColonyLabelRegisteredEvent = TypedEvent<[
    string,
    string
], ColonyLabelRegisteredEventObject>;
export type ColonyLabelRegisteredEventFilter = TypedEventFilter<ColonyLabelRegisteredEvent>;
export interface ColonyNetworkInitialisedEventObject {
    resolver: string;
}
export type ColonyNetworkInitialisedEvent = TypedEvent<[
    string
], ColonyNetworkInitialisedEventObject>;
export type ColonyNetworkInitialisedEventFilter = TypedEventFilter<ColonyNetworkInitialisedEvent>;
export interface ColonyVersionAddedEventObject {
    version: BigNumber;
    resolver: string;
}
export type ColonyVersionAddedEvent = TypedEvent<[
    BigNumber,
    string
], ColonyVersionAddedEventObject>;
export type ColonyVersionAddedEventFilter = TypedEventFilter<ColonyVersionAddedEvent>;
export interface ExtensionAddedToNetworkEventObject {
    extensionId: string;
    version: BigNumber;
}
export type ExtensionAddedToNetworkEvent = TypedEvent<[
    string,
    BigNumber
], ExtensionAddedToNetworkEventObject>;
export type ExtensionAddedToNetworkEventFilter = TypedEventFilter<ExtensionAddedToNetworkEvent>;
export interface ExtensionDeprecatedEventObject {
    extensionId: string;
    colony: string;
    deprecated: boolean;
}
export type ExtensionDeprecatedEvent = TypedEvent<[
    string,
    string,
    boolean
], ExtensionDeprecatedEventObject>;
export type ExtensionDeprecatedEventFilter = TypedEventFilter<ExtensionDeprecatedEvent>;
export interface ExtensionInstalledEventObject {
    extensionId: string;
    colony: string;
    version: BigNumber;
}
export type ExtensionInstalledEvent = TypedEvent<[
    string,
    string,
    BigNumber
], ExtensionInstalledEventObject>;
export type ExtensionInstalledEventFilter = TypedEventFilter<ExtensionInstalledEvent>;
export interface ExtensionUninstalledEventObject {
    extensionId: string;
    colony: string;
}
export type ExtensionUninstalledEvent = TypedEvent<[
    string,
    string
], ExtensionUninstalledEventObject>;
export type ExtensionUninstalledEventFilter = TypedEventFilter<ExtensionUninstalledEvent>;
export interface ExtensionUpgradedEventObject {
    extensionId: string;
    colony: string;
    version: BigNumber;
}
export type ExtensionUpgradedEvent = TypedEvent<[
    string,
    string,
    BigNumber
], ExtensionUpgradedEventObject>;
export type ExtensionUpgradedEventFilter = TypedEventFilter<ExtensionUpgradedEvent>;
export interface MetaColonyCreatedEventObject {
    metaColony: string;
    token: string;
    rootSkillId: BigNumber;
}
export type MetaColonyCreatedEvent = TypedEvent<[
    string,
    string,
    BigNumber
], MetaColonyCreatedEventObject>;
export type MetaColonyCreatedEventFilter = TypedEventFilter<MetaColonyCreatedEvent>;
export interface MetaTransactionExecutedEventObject {
    userAddress: string;
    relayerAddress: string;
    payload: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<[
    string,
    string,
    string
], MetaTransactionExecutedEventObject>;
export type MetaTransactionExecutedEventFilter = TypedEventFilter<MetaTransactionExecutedEvent>;
export interface MiningCycleResolverSetEventObject {
    miningCycleResolver: string;
}
export type MiningCycleResolverSetEvent = TypedEvent<[
    string
], MiningCycleResolverSetEventObject>;
export type MiningCycleResolverSetEventFilter = TypedEventFilter<MiningCycleResolverSetEvent>;
export interface NetworkFeeInverseSetEventObject {
    feeInverse: BigNumber;
}
export type NetworkFeeInverseSetEvent = TypedEvent<[
    BigNumber
], NetworkFeeInverseSetEventObject>;
export type NetworkFeeInverseSetEventFilter = TypedEventFilter<NetworkFeeInverseSetEvent>;
export interface RecoveryModeEnteredEventObject {
    user: string;
}
export type RecoveryModeEnteredEvent = TypedEvent<[
    string
], RecoveryModeEnteredEventObject>;
export type RecoveryModeEnteredEventFilter = TypedEventFilter<RecoveryModeEnteredEvent>;
export interface RecoveryModeExitApprovedEventObject {
    user: string;
}
export type RecoveryModeExitApprovedEvent = TypedEvent<[
    string
], RecoveryModeExitApprovedEventObject>;
export type RecoveryModeExitApprovedEventFilter = TypedEventFilter<RecoveryModeExitApprovedEvent>;
export interface RecoveryModeExitedEventObject {
    user: string;
}
export type RecoveryModeExitedEvent = TypedEvent<[
    string
], RecoveryModeExitedEventObject>;
export type RecoveryModeExitedEventFilter = TypedEventFilter<RecoveryModeExitedEvent>;
export interface RecoveryRoleSetEventObject {
    user: string;
    setTo: boolean;
}
export type RecoveryRoleSetEvent = TypedEvent<[
    string,
    boolean
], RecoveryRoleSetEventObject>;
export type RecoveryRoleSetEventFilter = TypedEventFilter<RecoveryRoleSetEvent>;
export interface RecoveryStorageSlotSetEventObject {
    user: string;
    slot: BigNumber;
    fromValue: string;
    toValue: string;
}
export type RecoveryStorageSlotSetEvent = TypedEvent<[
    string,
    BigNumber,
    string,
    string
], RecoveryStorageSlotSetEventObject>;
export type RecoveryStorageSlotSetEventFilter = TypedEventFilter<RecoveryStorageSlotSetEvent>;
export interface RegistrarInitialisedEventObject {
    ens: string;
    rootNode: string;
}
export type RegistrarInitialisedEvent = TypedEvent<[
    string,
    string
], RegistrarInitialisedEventObject>;
export type RegistrarInitialisedEventFilter = TypedEventFilter<RegistrarInitialisedEvent>;
export interface ReputationMinerPenalisedEventObject {
    miner: string;
    tokensLost: BigNumber;
}
export type ReputationMinerPenalisedEvent = TypedEvent<[
    string,
    BigNumber
], ReputationMinerPenalisedEventObject>;
export type ReputationMinerPenalisedEventFilter = TypedEventFilter<ReputationMinerPenalisedEvent>;
export interface ReputationMiningCycleCompleteEventObject {
    hash: string;
    nLeaves: BigNumber;
}
export type ReputationMiningCycleCompleteEvent = TypedEvent<[
    string,
    BigNumber
], ReputationMiningCycleCompleteEventObject>;
export type ReputationMiningCycleCompleteEventFilter = TypedEventFilter<ReputationMiningCycleCompleteEvent>;
export interface ReputationMiningInitialisedEventObject {
    inactiveReputationMiningCycle: string;
}
export type ReputationMiningInitialisedEvent = TypedEvent<[
    string
], ReputationMiningInitialisedEventObject>;
export type ReputationMiningInitialisedEventFilter = TypedEventFilter<ReputationMiningInitialisedEvent>;
export interface ReputationMiningRewardSetEventObject {
    amount: BigNumber;
}
export type ReputationMiningRewardSetEvent = TypedEvent<[
    BigNumber
], ReputationMiningRewardSetEventObject>;
export type ReputationMiningRewardSetEventFilter = TypedEventFilter<ReputationMiningRewardSetEvent>;
export interface ReputationRootHashSetEventObject {
    newHash: string;
    newNLeaves: BigNumber;
    stakers: string[];
    reward: BigNumber;
}
export type ReputationRootHashSetEvent = TypedEvent<[
    string,
    BigNumber,
    string[],
    BigNumber
], ReputationRootHashSetEventObject>;
export type ReputationRootHashSetEventFilter = TypedEventFilter<ReputationRootHashSetEvent>;
export interface ReputationUpdateAddedFromBridgeEventObject {
    chainId: BigNumber;
    colony: string;
    updateNumber: BigNumber;
}
export type ReputationUpdateAddedFromBridgeEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber
], ReputationUpdateAddedFromBridgeEventObject>;
export type ReputationUpdateAddedFromBridgeEventFilter = TypedEventFilter<ReputationUpdateAddedFromBridgeEvent>;
export interface ReputationUpdateSentToBridgeEventObject {
    colony: string;
    count: BigNumber;
}
export type ReputationUpdateSentToBridgeEvent = TypedEvent<[
    string,
    BigNumber
], ReputationUpdateSentToBridgeEventObject>;
export type ReputationUpdateSentToBridgeEventFilter = TypedEventFilter<ReputationUpdateSentToBridgeEvent>;
export interface ReputationUpdateStoredEventObject {
    colony: string;
    count: BigNumber;
}
export type ReputationUpdateStoredEvent = TypedEvent<[
    string,
    BigNumber
], ReputationUpdateStoredEventObject>;
export type ReputationUpdateStoredEventFilter = TypedEventFilter<ReputationUpdateStoredEvent>;
export interface ReputationUpdateStoredFromBridgeEventObject {
    chainId: BigNumber;
    colony: string;
    updateNumber: BigNumber;
}
export type ReputationUpdateStoredFromBridgeEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber
], ReputationUpdateStoredFromBridgeEventObject>;
export type ReputationUpdateStoredFromBridgeEventFilter = TypedEventFilter<ReputationUpdateStoredFromBridgeEvent>;
export interface SkillAddedEventObject {
    skillId: BigNumber;
    parentSkillId: BigNumber;
}
export type SkillAddedEvent = TypedEvent<[
    BigNumber,
    BigNumber
], SkillAddedEventObject>;
export type SkillAddedEventFilter = TypedEventFilter<SkillAddedEvent>;
export interface SkillAddedFromBridgeEventObject {
    skillId: BigNumber;
}
export type SkillAddedFromBridgeEvent = TypedEvent<[
    BigNumber
], SkillAddedFromBridgeEventObject>;
export type SkillAddedFromBridgeEventFilter = TypedEventFilter<SkillAddedFromBridgeEvent>;
export interface SkillCreationStoredEventObject {
    skillId: BigNumber;
}
export type SkillCreationStoredEvent = TypedEvent<[
    BigNumber
], SkillCreationStoredEventObject>;
export type SkillCreationStoredEventFilter = TypedEventFilter<SkillCreationStoredEvent>;
export interface SkillStoredFromBridgeEventObject {
    skillId: BigNumber;
}
export type SkillStoredFromBridgeEvent = TypedEvent<[
    BigNumber
], SkillStoredFromBridgeEventObject>;
export type SkillStoredFromBridgeEventFilter = TypedEventFilter<SkillStoredFromBridgeEvent>;
export interface TokenAuthorityDeployedEventObject {
    tokenAuthorityAddress: string;
}
export type TokenAuthorityDeployedEvent = TypedEvent<[
    string
], TokenAuthorityDeployedEventObject>;
export type TokenAuthorityDeployedEventFilter = TypedEventFilter<TokenAuthorityDeployedEvent>;
export interface TokenDeployedEventObject {
    tokenAddress: string;
}
export type TokenDeployedEvent = TypedEvent<[string], TokenDeployedEventObject>;
export type TokenDeployedEventFilter = TypedEventFilter<TokenDeployedEvent>;
export interface TokenLockingAddressSetEventObject {
    tokenLocking: string;
}
export type TokenLockingAddressSetEvent = TypedEvent<[
    string
], TokenLockingAddressSetEventObject>;
export type TokenLockingAddressSetEventFilter = TypedEventFilter<TokenLockingAddressSetEvent>;
export interface TokenWhitelistedEventObject {
    token: string;
    status: boolean;
}
export type TokenWhitelistedEvent = TypedEvent<[
    string,
    boolean
], TokenWhitelistedEventObject>;
export type TokenWhitelistedEventFilter = TypedEventFilter<TokenWhitelistedEvent>;
export interface UserLabelRegisteredEventObject {
    user: string;
    label: string;
}
export type UserLabelRegisteredEvent = TypedEvent<[
    string,
    string
], UserLabelRegisteredEventObject>;
export type UserLabelRegisteredEventFilter = TypedEventFilter<UserLabelRegisteredEvent>;
export interface IColonyNetwork extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IColonyNetworkInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addColonyVersion(_version: BigNumberish, _resolver: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "addColonyVersion(uint256,address)"(_version: BigNumberish, _resolver: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        addExtensionToNetwork(_extensionId: BytesLike, _resolver: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "addExtensionToNetwork(bytes32,address)"(_extensionId: BytesLike, _resolver: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        addPendingReputationUpdate(_chainId: BigNumberish, _colony: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "addPendingReputationUpdate(uint256,address)"(_chainId: BigNumberish, _colony: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        addPendingSkill(_skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "addPendingSkill(uint256)"(_skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        addReputationUpdateLogFromBridge(_colony: string, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _updateNumber: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "addReputationUpdateLogFromBridge(address,address,int256,uint256,uint256)"(_colony: string, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _updateNumber: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        addSkill(_parentSkillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "addSkill(uint256)"(_parentSkillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        addSkillFromBridge(_parentSkillId: BigNumberish, _skillCount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "addSkillFromBridge(uint256,uint256)"(_parentSkillId: BigNumberish, _skillCount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        addr(_node: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            _address: string;
        }>;
        "addr(bytes32)"(_node: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            _address: string;
        }>;
        appendReputationUpdateLog(_user: string, _amount: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "appendReputationUpdateLog(address,int256,uint256)"(_user: string, _amount: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        approveExitRecovery(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "approveExitRecovery()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        bridgeCurrentRootHash(chainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "bridgeCurrentRootHash(uint256)"(chainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        bridgePendingReputationUpdate(_colony: string, _updateNumber: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "bridgePendingReputationUpdate(address,uint256)"(_colony: string, _updateNumber: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        bridgeSkillIfNotMiningChain(skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "bridgeSkillIfNotMiningChain(uint256)"(skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        burnUnneededRewards(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "burnUnneededRewards(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        calculateMinerWeight(_timeStaked: BigNumberish, _submissonIndex: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _minerWeight: BigNumber;
        }>;
        "calculateMinerWeight(uint256,uint256)"(_timeStaked: BigNumberish, _submissonIndex: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _minerWeight: BigNumber;
        }>;
        checkNotAdditionalProtectedVariable(_slot: BigNumberish, overrides?: CallOverrides): Promise<[void]>;
        "checkNotAdditionalProtectedVariable(uint256)"(_slot: BigNumberish, overrides?: CallOverrides): Promise<[void]>;
        claimMiningReward(_recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "claimMiningReward(address)"(_recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "createColony(address)"(_tokenAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "createColony(address,uint256,string,string)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "createColony(address,uint256,string)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "createColony(address,uint256,string,string,bool)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, _orbitdb: string, _useExtensionManager: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        createColonyForFrontend(_tokenAddress: string, _name: string, _symbol: string, _decimals: BigNumberish, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "createColonyForFrontend(address,string,string,uint8,uint256,string,string)"(_tokenAddress: string, _name: string, _symbol: string, _decimals: BigNumberish, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        createMetaColony(_tokenAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "createMetaColony(address)"(_tokenAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        deployTokenAuthority(_token: string, _colony: string, _allowedToTransfer: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "deployTokenAuthority(address,address,address[])"(_token: string, _colony: string, _allowedToTransfer: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        deployTokenViaNetwork(_name: string, _symbol: string, _decimals: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "deployTokenViaNetwork(string,string,uint8)"(_name: string, _symbol: string, _decimals: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        deprecateExtension(_extensionId: BytesLike, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "deprecateExtension(bytes32,bool)"(_extensionId: BytesLike, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        deprecateSkill(_skillId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "deprecateSkill(uint256,bool)"(_skillId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        enterRecoveryMode(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "enterRecoveryMode()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        exitRecoveryMode(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "exitRecoveryMode()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        getBridgedReputationUpdateCount(_chainId: BigNumberish, _colony: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            bridgedReputationCount: BigNumber;
        }>;
        "getBridgedReputationUpdateCount(uint256,address)"(_chainId: BigNumberish, _colony: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            bridgedReputationCount: BigNumber;
        }>;
        getBridgedSkillCounts(_chainId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            skillCount: BigNumber;
        }>;
        "getBridgedSkillCounts(uint256)"(_chainId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            skillCount: BigNumber;
        }>;
        getChildSkillId(_skillId: BigNumberish, _childSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _childSkillId: BigNumber;
        }>;
        "getChildSkillId(uint256,uint256)"(_skillId: BigNumberish, _childSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _childSkillId: BigNumber;
        }>;
        getColony(_id: BigNumberish, overrides?: CallOverrides): Promise<[string] & {
            _colonyAddress: string;
        }>;
        "getColony(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<[string] & {
            _colonyAddress: string;
        }>;
        getColonyBridgeAddress(overrides?: CallOverrides): Promise<[string] & {
            bridge: string;
        }>;
        "getColonyBridgeAddress()"(overrides?: CallOverrides): Promise<[string] & {
            bridge: string;
        }>;
        getColonyCount(overrides?: CallOverrides): Promise<[BigNumber] & {
            _count: BigNumber;
        }>;
        "getColonyCount()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _count: BigNumber;
        }>;
        getColonyCreationSalt(overrides?: CallOverrides): Promise<[string] & {
            salt: string;
        }>;
        "getColonyCreationSalt()"(overrides?: CallOverrides): Promise<[string] & {
            salt: string;
        }>;
        getColonyVersionResolver(_version: BigNumberish, overrides?: CallOverrides): Promise<[string] & {
            _resolverAddress: string;
        }>;
        "getColonyVersionResolver(uint256)"(_version: BigNumberish, overrides?: CallOverrides): Promise<[string] & {
            _resolverAddress: string;
        }>;
        getCurrentColonyVersion(overrides?: CallOverrides): Promise<[BigNumber] & {
            _version: BigNumber;
        }>;
        "getCurrentColonyVersion()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _version: BigNumber;
        }>;
        getENSRegistrar(overrides?: CallOverrides): Promise<[string] & {
            _address: string;
        }>;
        "getENSRegistrar()"(overrides?: CallOverrides): Promise<[string] & {
            _address: string;
        }>;
        getExtensionInstallation(_extensionId: BytesLike, _colony: string, overrides?: CallOverrides): Promise<[string] & {
            _installation: string;
        }>;
        "getExtensionInstallation(bytes32,address)"(_extensionId: BytesLike, _colony: string, overrides?: CallOverrides): Promise<[string] & {
            _installation: string;
        }>;
        getExtensionResolver(_extensionId: BytesLike, _version: BigNumberish, overrides?: CallOverrides): Promise<[string] & {
            _resolver: string;
        }>;
        "getExtensionResolver(bytes32,uint256)"(_extensionId: BytesLike, _version: BigNumberish, overrides?: CallOverrides): Promise<[string] & {
            _resolver: string;
        }>;
        getFeeInverse(overrides?: CallOverrides): Promise<[BigNumber] & {
            _feeInverse: BigNumber;
        }>;
        "getFeeInverse()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _feeInverse: BigNumber;
        }>;
        getMetaColony(overrides?: CallOverrides): Promise<[string] & {
            _colonyAddress: string;
        }>;
        "getMetaColony()"(overrides?: CallOverrides): Promise<[string] & {
            _colonyAddress: string;
        }>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        getMiningChainId(overrides?: CallOverrides): Promise<[BigNumber] & {
            reputationMiningChainId: BigNumber;
        }>;
        "getMiningChainId()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            reputationMiningChainId: BigNumber;
        }>;
        getMiningDelegator(_delegate: string, overrides?: CallOverrides): Promise<[string] & {
            _delegator: string;
        }>;
        "getMiningDelegator(address)"(_delegate: string, overrides?: CallOverrides): Promise<[string] & {
            _delegator: string;
        }>;
        getMiningResolver(overrides?: CallOverrides): Promise<[string] & {
            miningResolverAddress: string;
        }>;
        "getMiningResolver()"(overrides?: CallOverrides): Promise<[string] & {
            miningResolverAddress: string;
        }>;
        getMiningStake(_user: string, overrides?: CallOverrides): Promise<[
            ColonyNetworkDataTypes.MiningStakeStructOutput
        ] & {
            _info: ColonyNetworkDataTypes.MiningStakeStructOutput;
        }>;
        "getMiningStake(address)"(_user: string, overrides?: CallOverrides): Promise<[
            ColonyNetworkDataTypes.MiningStakeStructOutput
        ] & {
            _info: ColonyNetworkDataTypes.MiningStakeStructOutput;
        }>;
        getParentSkillId(_skillId: BigNumberish, _parentSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _parentSkillId: BigNumber;
        }>;
        "getParentSkillId(uint256,uint256)"(_skillId: BigNumberish, _parentSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            _parentSkillId: BigNumber;
        }>;
        getPayoutWhitelist(_token: string, overrides?: CallOverrides): Promise<[boolean] & {
            _status: boolean;
        }>;
        "getPayoutWhitelist(address)"(_token: string, overrides?: CallOverrides): Promise<[boolean] & {
            _status: boolean;
        }>;
        getPendingReputationUpdate(_chainId: BigNumberish, _colony: string, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyNetworkDataTypes.PendingReputationUpdateStructOutput
        ] & {
            update: ColonyNetworkDataTypes.PendingReputationUpdateStructOutput;
        }>;
        "getPendingReputationUpdate(uint256,address,uint256)"(_chainId: BigNumberish, _colony: string, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyNetworkDataTypes.PendingReputationUpdateStructOutput
        ] & {
            update: ColonyNetworkDataTypes.PendingReputationUpdateStructOutput;
        }>;
        getPendingSkillAddition(_chainId: BigNumberish, _skillCount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            parentId: BigNumber;
        }>;
        "getPendingSkillAddition(uint256,uint256)"(_chainId: BigNumberish, _skillCount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            parentId: BigNumber;
        }>;
        getProfileDBAddress(_node: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            _orbitdb: string;
        }>;
        "getProfileDBAddress(bytes32)"(_node: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            _orbitdb: string;
        }>;
        getReplacementReputationUpdateLogEntry(_reputationMiningCycle: string, _id: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyNetworkDataTypes.ReputationLogEntryStructOutput
        ] & {
            _reputationLogEntry: ColonyNetworkDataTypes.ReputationLogEntryStructOutput;
        }>;
        "getReplacementReputationUpdateLogEntry(address,uint256)"(_reputationMiningCycle: string, _id: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyNetworkDataTypes.ReputationLogEntryStructOutput
        ] & {
            _reputationLogEntry: ColonyNetworkDataTypes.ReputationLogEntryStructOutput;
        }>;
        getReplacementReputationUpdateLogsExist(_reputationMiningCycle: string, overrides?: CallOverrides): Promise<[boolean] & {
            _exists: boolean;
        }>;
        "getReplacementReputationUpdateLogsExist(address)"(_reputationMiningCycle: string, overrides?: CallOverrides): Promise<[boolean] & {
            _exists: boolean;
        }>;
        getReputationMiningCycle(_active: boolean, overrides?: CallOverrides): Promise<[string] & {
            _repMiningCycleAddress: string;
        }>;
        "getReputationMiningCycle(bool)"(_active: boolean, overrides?: CallOverrides): Promise<[string] & {
            _repMiningCycleAddress: string;
        }>;
        getReputationMiningCycleReward(overrides?: CallOverrides): Promise<[BigNumber] & {
            _amount: BigNumber;
        }>;
        "getReputationMiningCycleReward()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _amount: BigNumber;
        }>;
        getReputationMiningSkillId(overrides?: CallOverrides): Promise<[BigNumber] & {
            _skillId: BigNumber;
        }>;
        "getReputationMiningSkillId()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _skillId: BigNumber;
        }>;
        getReputationRootHash(overrides?: CallOverrides): Promise<[string] & {
            rootHash: string;
        }>;
        "getReputationRootHash()"(overrides?: CallOverrides): Promise<[string] & {
            rootHash: string;
        }>;
        getReputationRootHashNLeaves(overrides?: CallOverrides): Promise<[BigNumber] & {
            nLeaves: BigNumber;
        }>;
        "getReputationRootHashNLeaves()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            nLeaves: BigNumber;
        }>;
        getReputationRootHashNNodes(overrides?: CallOverrides): Promise<[BigNumber] & {
            nNodes: BigNumber;
        }>;
        "getReputationRootHashNNodes()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            nNodes: BigNumber;
        }>;
        getSkill(_skillId: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyNetworkDataTypes.SkillStructOutput
        ] & {
            _skill: ColonyNetworkDataTypes.SkillStructOutput;
        }>;
        "getSkill(uint256)"(_skillId: BigNumberish, overrides?: CallOverrides): Promise<[
            ColonyNetworkDataTypes.SkillStructOutput
        ] & {
            _skill: ColonyNetworkDataTypes.SkillStructOutput;
        }>;
        getSkillCount(overrides?: CallOverrides): Promise<[BigNumber] & {
            _count: BigNumber;
        }>;
        "getSkillCount()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            _count: BigNumber;
        }>;
        getTokenLocking(overrides?: CallOverrides): Promise<[string] & {
            _lockingAddress: string;
        }>;
        "getTokenLocking()"(overrides?: CallOverrides): Promise<[string] & {
            _lockingAddress: string;
        }>;
        initialise(_resolver: string, _version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "initialise(address,uint256)"(_resolver: string, _version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        initialiseReputationMining(miningChainId: BigNumberish, newHash: BytesLike, newNLeaves: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "initialiseReputationMining(uint256,bytes32,uint256)"(miningChainId: BigNumberish, newHash: BytesLike, newNLeaves: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        initialiseRootLocalSkill(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "initialiseRootLocalSkill()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        installExtension(_extensionId: BytesLike, _version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "installExtension(bytes32,uint256)"(_extensionId: BytesLike, _version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        isColony(_colony: string, overrides?: CallOverrides): Promise<[boolean] & {
            _addressIsColony: boolean;
        }>;
        "isColony(address)"(_colony: string, overrides?: CallOverrides): Promise<[boolean] & {
            _addressIsColony: boolean;
        }>;
        isInRecoveryMode(overrides?: CallOverrides): Promise<[boolean] & {
            inRecoveryMode: boolean;
        }>;
        "isInRecoveryMode()"(overrides?: CallOverrides): Promise<[boolean] & {
            inRecoveryMode: boolean;
        }>;
        lookupRegisteredENSDomain(_addr: string, overrides?: CallOverrides): Promise<[string] & {
            _domain: string;
        }>;
        "lookupRegisteredENSDomain(address)"(_addr: string, overrides?: CallOverrides): Promise<[string] & {
            _domain: string;
        }>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "multicall(bytes[])"(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        numRecoveryRoles(overrides?: CallOverrides): Promise<[BigNumber] & {
            numRoles: BigNumber;
        }>;
        "numRecoveryRoles()"(overrides?: CallOverrides): Promise<[BigNumber] & {
            numRoles: BigNumber;
        }>;
        punishStakers(_stakers: string[], _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "punishStakers(address[],uint256)"(_stakers: string[], _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        registerColonyLabel(_colonyName: string, _orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "registerColonyLabel(string,string)"(_colonyName: string, _orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        registerUserLabel(_username: string, _orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "registerUserLabel(string,string)"(_username: string, _orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        removeRecoveryRole(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "removeRecoveryRole(address)"(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        reward(_recipient: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "reward(address,uint256)"(_recipient: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setColonyBridgeAddress(_bridgeAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setColonyBridgeAddress(address)"(_bridgeAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setFeeInverse(_feeInverse: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setFeeInverse(uint256)"(_feeInverse: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setMiningDelegate(_delegate: string, _allowed: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setMiningDelegate(address,bool)"(_delegate: string, _allowed: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setMiningResolver(_miningResolverAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setMiningResolver(address)"(_miningResolverAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setPayoutWhitelist(_token: string, _status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setPayoutWhitelist(address,bool)"(_token: string, _status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setRecoveryRole(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setRecoveryRole(address)"(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setReplacementReputationUpdateLogEntry(_reputationMiningCycle: string, _id: BigNumberish, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _colony: string, _nUpdates: BigNumberish, _nPreviousUpdates: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)"(_reputationMiningCycle: string, _id: BigNumberish, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _colony: string, _nUpdates: BigNumberish, _nPreviousUpdates: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setReputationMiningCycleReward(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setReputationMiningCycleReward(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setReputationRootHash(_newHash: BytesLike, _newNLeaves: BigNumberish, _stakers: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setReputationRootHash(bytes32,uint256,address[])"(_newHash: BytesLike, _newNLeaves: BigNumberish, _stakers: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setReputationRootHashFromBridge(newHash: BytesLike, newNLeaves: BigNumberish, nonce: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setReputationRootHashFromBridge(bytes32,uint256,uint256)"(newHash: BytesLike, newNLeaves: BigNumberish, nonce: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setStorageSlotRecovery(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setStorageSlotRecovery(uint256,bytes32)"(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setTokenLocking(_tokenLockingAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setTokenLocking(address)"(_tokenLockingAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setupRegistrar(_ens: string, _rootNode: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setupRegistrar(address,bytes32)"(_ens: string, _rootNode: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        stakeForMining(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "stakeForMining(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        startNextCycle(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "startNextCycle()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        startTokenAuction(_token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "startTokenAuction(address)"(_token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<[boolean] & {
            _status: boolean;
        }>;
        "supportsInterface(bytes4)"(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<[boolean] & {
            _status: boolean;
        }>;
        uninstallExtension(_extensionId: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "uninstallExtension(bytes32)"(_extensionId: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        unstakeForMining(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "unstakeForMining(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        updateColonyOrbitDB(_orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "updateColonyOrbitDB(string)"(_orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        updateUserOrbitDB(_orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "updateUserOrbitDB(string)"(_orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        upgradeExtension(_extensionId: BytesLike, _newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "upgradeExtension(bytes32,uint256)"(_extensionId: BytesLike, _newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
    };
    addColonyVersion(_version: BigNumberish, _resolver: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "addColonyVersion(uint256,address)"(_version: BigNumberish, _resolver: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    addExtensionToNetwork(_extensionId: BytesLike, _resolver: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "addExtensionToNetwork(bytes32,address)"(_extensionId: BytesLike, _resolver: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    addPendingReputationUpdate(_chainId: BigNumberish, _colony: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "addPendingReputationUpdate(uint256,address)"(_chainId: BigNumberish, _colony: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    addPendingSkill(_skillId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "addPendingSkill(uint256)"(_skillId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    addReputationUpdateLogFromBridge(_colony: string, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _updateNumber: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "addReputationUpdateLogFromBridge(address,address,int256,uint256,uint256)"(_colony: string, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _updateNumber: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    addSkill(_parentSkillId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "addSkill(uint256)"(_parentSkillId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    addSkillFromBridge(_parentSkillId: BigNumberish, _skillCount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "addSkillFromBridge(uint256,uint256)"(_parentSkillId: BigNumberish, _skillCount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    addr(_node: BytesLike, overrides?: CallOverrides): Promise<string>;
    "addr(bytes32)"(_node: BytesLike, overrides?: CallOverrides): Promise<string>;
    appendReputationUpdateLog(_user: string, _amount: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "appendReputationUpdateLog(address,int256,uint256)"(_user: string, _amount: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    approveExitRecovery(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "approveExitRecovery()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    bridgeCurrentRootHash(chainId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "bridgeCurrentRootHash(uint256)"(chainId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    bridgePendingReputationUpdate(_colony: string, _updateNumber: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "bridgePendingReputationUpdate(address,uint256)"(_colony: string, _updateNumber: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    bridgeSkillIfNotMiningChain(skillId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "bridgeSkillIfNotMiningChain(uint256)"(skillId: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    burnUnneededRewards(_amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "burnUnneededRewards(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    calculateMinerWeight(_timeStaked: BigNumberish, _submissonIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "calculateMinerWeight(uint256,uint256)"(_timeStaked: BigNumberish, _submissonIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    checkNotAdditionalProtectedVariable(_slot: BigNumberish, overrides?: CallOverrides): Promise<void>;
    "checkNotAdditionalProtectedVariable(uint256)"(_slot: BigNumberish, overrides?: CallOverrides): Promise<void>;
    claimMiningReward(_recipient: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "claimMiningReward(address)"(_recipient: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "createColony(address)"(_tokenAddress: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "createColony(address,uint256,string,string)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "createColony(address,uint256,string)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "createColony(address,uint256,string,string,bool)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, _orbitdb: string, _useExtensionManager: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    createColonyForFrontend(_tokenAddress: string, _name: string, _symbol: string, _decimals: BigNumberish, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "createColonyForFrontend(address,string,string,uint8,uint256,string,string)"(_tokenAddress: string, _name: string, _symbol: string, _decimals: BigNumberish, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    createMetaColony(_tokenAddress: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "createMetaColony(address)"(_tokenAddress: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    deployTokenAuthority(_token: string, _colony: string, _allowedToTransfer: string[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "deployTokenAuthority(address,address,address[])"(_token: string, _colony: string, _allowedToTransfer: string[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    deployTokenViaNetwork(_name: string, _symbol: string, _decimals: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "deployTokenViaNetwork(string,string,uint8)"(_name: string, _symbol: string, _decimals: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    deprecateExtension(_extensionId: BytesLike, _deprecated: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "deprecateExtension(bytes32,bool)"(_extensionId: BytesLike, _deprecated: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    deprecateSkill(_skillId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "deprecateSkill(uint256,bool)"(_skillId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    enterRecoveryMode(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "enterRecoveryMode()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    exitRecoveryMode(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "exitRecoveryMode()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    getBridgedReputationUpdateCount(_chainId: BigNumberish, _colony: string, overrides?: CallOverrides): Promise<BigNumber>;
    "getBridgedReputationUpdateCount(uint256,address)"(_chainId: BigNumberish, _colony: string, overrides?: CallOverrides): Promise<BigNumber>;
    getBridgedSkillCounts(_chainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "getBridgedSkillCounts(uint256)"(_chainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getChildSkillId(_skillId: BigNumberish, _childSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "getChildSkillId(uint256,uint256)"(_skillId: BigNumberish, _childSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getColony(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;
    "getColony(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;
    getColonyBridgeAddress(overrides?: CallOverrides): Promise<string>;
    "getColonyBridgeAddress()"(overrides?: CallOverrides): Promise<string>;
    getColonyCount(overrides?: CallOverrides): Promise<BigNumber>;
    "getColonyCount()"(overrides?: CallOverrides): Promise<BigNumber>;
    getColonyCreationSalt(overrides?: CallOverrides): Promise<string>;
    "getColonyCreationSalt()"(overrides?: CallOverrides): Promise<string>;
    getColonyVersionResolver(_version: BigNumberish, overrides?: CallOverrides): Promise<string>;
    "getColonyVersionResolver(uint256)"(_version: BigNumberish, overrides?: CallOverrides): Promise<string>;
    getCurrentColonyVersion(overrides?: CallOverrides): Promise<BigNumber>;
    "getCurrentColonyVersion()"(overrides?: CallOverrides): Promise<BigNumber>;
    getENSRegistrar(overrides?: CallOverrides): Promise<string>;
    "getENSRegistrar()"(overrides?: CallOverrides): Promise<string>;
    getExtensionInstallation(_extensionId: BytesLike, _colony: string, overrides?: CallOverrides): Promise<string>;
    "getExtensionInstallation(bytes32,address)"(_extensionId: BytesLike, _colony: string, overrides?: CallOverrides): Promise<string>;
    getExtensionResolver(_extensionId: BytesLike, _version: BigNumberish, overrides?: CallOverrides): Promise<string>;
    "getExtensionResolver(bytes32,uint256)"(_extensionId: BytesLike, _version: BigNumberish, overrides?: CallOverrides): Promise<string>;
    getFeeInverse(overrides?: CallOverrides): Promise<BigNumber>;
    "getFeeInverse()"(overrides?: CallOverrides): Promise<BigNumber>;
    getMetaColony(overrides?: CallOverrides): Promise<string>;
    "getMetaColony()"(overrides?: CallOverrides): Promise<string>;
    getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
    "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
    getMiningChainId(overrides?: CallOverrides): Promise<BigNumber>;
    "getMiningChainId()"(overrides?: CallOverrides): Promise<BigNumber>;
    getMiningDelegator(_delegate: string, overrides?: CallOverrides): Promise<string>;
    "getMiningDelegator(address)"(_delegate: string, overrides?: CallOverrides): Promise<string>;
    getMiningResolver(overrides?: CallOverrides): Promise<string>;
    "getMiningResolver()"(overrides?: CallOverrides): Promise<string>;
    getMiningStake(_user: string, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.MiningStakeStructOutput>;
    "getMiningStake(address)"(_user: string, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.MiningStakeStructOutput>;
    getParentSkillId(_skillId: BigNumberish, _parentSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "getParentSkillId(uint256,uint256)"(_skillId: BigNumberish, _parentSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getPayoutWhitelist(_token: string, overrides?: CallOverrides): Promise<boolean>;
    "getPayoutWhitelist(address)"(_token: string, overrides?: CallOverrides): Promise<boolean>;
    getPendingReputationUpdate(_chainId: BigNumberish, _colony: string, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.PendingReputationUpdateStructOutput>;
    "getPendingReputationUpdate(uint256,address,uint256)"(_chainId: BigNumberish, _colony: string, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.PendingReputationUpdateStructOutput>;
    getPendingSkillAddition(_chainId: BigNumberish, _skillCount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    "getPendingSkillAddition(uint256,uint256)"(_chainId: BigNumberish, _skillCount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getProfileDBAddress(_node: BytesLike, overrides?: CallOverrides): Promise<string>;
    "getProfileDBAddress(bytes32)"(_node: BytesLike, overrides?: CallOverrides): Promise<string>;
    getReplacementReputationUpdateLogEntry(_reputationMiningCycle: string, _id: BigNumberish, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.ReputationLogEntryStructOutput>;
    "getReplacementReputationUpdateLogEntry(address,uint256)"(_reputationMiningCycle: string, _id: BigNumberish, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.ReputationLogEntryStructOutput>;
    getReplacementReputationUpdateLogsExist(_reputationMiningCycle: string, overrides?: CallOverrides): Promise<boolean>;
    "getReplacementReputationUpdateLogsExist(address)"(_reputationMiningCycle: string, overrides?: CallOverrides): Promise<boolean>;
    getReputationMiningCycle(_active: boolean, overrides?: CallOverrides): Promise<string>;
    "getReputationMiningCycle(bool)"(_active: boolean, overrides?: CallOverrides): Promise<string>;
    getReputationMiningCycleReward(overrides?: CallOverrides): Promise<BigNumber>;
    "getReputationMiningCycleReward()"(overrides?: CallOverrides): Promise<BigNumber>;
    getReputationMiningSkillId(overrides?: CallOverrides): Promise<BigNumber>;
    "getReputationMiningSkillId()"(overrides?: CallOverrides): Promise<BigNumber>;
    getReputationRootHash(overrides?: CallOverrides): Promise<string>;
    "getReputationRootHash()"(overrides?: CallOverrides): Promise<string>;
    getReputationRootHashNLeaves(overrides?: CallOverrides): Promise<BigNumber>;
    "getReputationRootHashNLeaves()"(overrides?: CallOverrides): Promise<BigNumber>;
    getReputationRootHashNNodes(overrides?: CallOverrides): Promise<BigNumber>;
    "getReputationRootHashNNodes()"(overrides?: CallOverrides): Promise<BigNumber>;
    getSkill(_skillId: BigNumberish, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.SkillStructOutput>;
    "getSkill(uint256)"(_skillId: BigNumberish, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.SkillStructOutput>;
    getSkillCount(overrides?: CallOverrides): Promise<BigNumber>;
    "getSkillCount()"(overrides?: CallOverrides): Promise<BigNumber>;
    getTokenLocking(overrides?: CallOverrides): Promise<string>;
    "getTokenLocking()"(overrides?: CallOverrides): Promise<string>;
    initialise(_resolver: string, _version: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "initialise(address,uint256)"(_resolver: string, _version: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    initialiseReputationMining(miningChainId: BigNumberish, newHash: BytesLike, newNLeaves: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "initialiseReputationMining(uint256,bytes32,uint256)"(miningChainId: BigNumberish, newHash: BytesLike, newNLeaves: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    initialiseRootLocalSkill(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "initialiseRootLocalSkill()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    installExtension(_extensionId: BytesLike, _version: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "installExtension(bytes32,uint256)"(_extensionId: BytesLike, _version: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    isColony(_colony: string, overrides?: CallOverrides): Promise<boolean>;
    "isColony(address)"(_colony: string, overrides?: CallOverrides): Promise<boolean>;
    isInRecoveryMode(overrides?: CallOverrides): Promise<boolean>;
    "isInRecoveryMode()"(overrides?: CallOverrides): Promise<boolean>;
    lookupRegisteredENSDomain(_addr: string, overrides?: CallOverrides): Promise<string>;
    "lookupRegisteredENSDomain(address)"(_addr: string, overrides?: CallOverrides): Promise<string>;
    multicall(data: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "multicall(bytes[])"(data: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;
    "numRecoveryRoles()"(overrides?: CallOverrides): Promise<BigNumber>;
    punishStakers(_stakers: string[], _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "punishStakers(address[],uint256)"(_stakers: string[], _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    registerColonyLabel(_colonyName: string, _orbitdb: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "registerColonyLabel(string,string)"(_colonyName: string, _orbitdb: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    registerUserLabel(_username: string, _orbitdb: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "registerUserLabel(string,string)"(_username: string, _orbitdb: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    removeRecoveryRole(_user: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "removeRecoveryRole(address)"(_user: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    reward(_recipient: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "reward(address,uint256)"(_recipient: string, _amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setColonyBridgeAddress(_bridgeAddress: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setColonyBridgeAddress(address)"(_bridgeAddress: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setFeeInverse(_feeInverse: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setFeeInverse(uint256)"(_feeInverse: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setMiningDelegate(_delegate: string, _allowed: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setMiningDelegate(address,bool)"(_delegate: string, _allowed: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setMiningResolver(_miningResolverAddress: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setMiningResolver(address)"(_miningResolverAddress: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setPayoutWhitelist(_token: string, _status: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setPayoutWhitelist(address,bool)"(_token: string, _status: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setRecoveryRole(_user: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setRecoveryRole(address)"(_user: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setReplacementReputationUpdateLogEntry(_reputationMiningCycle: string, _id: BigNumberish, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _colony: string, _nUpdates: BigNumberish, _nPreviousUpdates: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)"(_reputationMiningCycle: string, _id: BigNumberish, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _colony: string, _nUpdates: BigNumberish, _nPreviousUpdates: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setReputationMiningCycleReward(_amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setReputationMiningCycleReward(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setReputationRootHash(_newHash: BytesLike, _newNLeaves: BigNumberish, _stakers: string[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setReputationRootHash(bytes32,uint256,address[])"(_newHash: BytesLike, _newNLeaves: BigNumberish, _stakers: string[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setReputationRootHashFromBridge(newHash: BytesLike, newNLeaves: BigNumberish, nonce: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setReputationRootHashFromBridge(bytes32,uint256,uint256)"(newHash: BytesLike, newNLeaves: BigNumberish, nonce: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setStorageSlotRecovery(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setStorageSlotRecovery(uint256,bytes32)"(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setTokenLocking(_tokenLockingAddress: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setTokenLocking(address)"(_tokenLockingAddress: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setupRegistrar(_ens: string, _rootNode: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setupRegistrar(address,bytes32)"(_ens: string, _rootNode: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    stakeForMining(_amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "stakeForMining(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    startNextCycle(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "startNextCycle()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    startTokenAuction(_token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "startTokenAuction(address)"(_token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    "supportsInterface(bytes4)"(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    uninstallExtension(_extensionId: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "uninstallExtension(bytes32)"(_extensionId: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    unstakeForMining(_amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "unstakeForMining(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    updateColonyOrbitDB(_orbitdb: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "updateColonyOrbitDB(string)"(_orbitdb: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    updateUserOrbitDB(_orbitdb: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "updateUserOrbitDB(string)"(_orbitdb: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    upgradeExtension(_extensionId: BytesLike, _newVersion: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "upgradeExtension(bytes32,uint256)"(_extensionId: BytesLike, _newVersion: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    callStatic: {
        addColonyVersion(_version: BigNumberish, _resolver: string, overrides?: CallOverrides): Promise<void>;
        "addColonyVersion(uint256,address)"(_version: BigNumberish, _resolver: string, overrides?: CallOverrides): Promise<void>;
        addExtensionToNetwork(_extensionId: BytesLike, _resolver: string, overrides?: CallOverrides): Promise<void>;
        "addExtensionToNetwork(bytes32,address)"(_extensionId: BytesLike, _resolver: string, overrides?: CallOverrides): Promise<void>;
        addPendingReputationUpdate(_chainId: BigNumberish, _colony: string, overrides?: CallOverrides): Promise<void>;
        "addPendingReputationUpdate(uint256,address)"(_chainId: BigNumberish, _colony: string, overrides?: CallOverrides): Promise<void>;
        addPendingSkill(_skillId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "addPendingSkill(uint256)"(_skillId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        addReputationUpdateLogFromBridge(_colony: string, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "addReputationUpdateLogFromBridge(address,address,int256,uint256,uint256)"(_colony: string, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<void>;
        addSkill(_parentSkillId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "addSkill(uint256)"(_parentSkillId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        addSkillFromBridge(_parentSkillId: BigNumberish, _skillCount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "addSkillFromBridge(uint256,uint256)"(_parentSkillId: BigNumberish, _skillCount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        addr(_node: BytesLike, overrides?: CallOverrides): Promise<string>;
        "addr(bytes32)"(_node: BytesLike, overrides?: CallOverrides): Promise<string>;
        appendReputationUpdateLog(_user: string, _amount: BigNumberish, _skillId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "appendReputationUpdateLog(address,int256,uint256)"(_user: string, _amount: BigNumberish, _skillId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        approveExitRecovery(overrides?: CallOverrides): Promise<void>;
        "approveExitRecovery()"(overrides?: CallOverrides): Promise<void>;
        bridgeCurrentRootHash(chainId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "bridgeCurrentRootHash(uint256)"(chainId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        bridgePendingReputationUpdate(_colony: string, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "bridgePendingReputationUpdate(address,uint256)"(_colony: string, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<void>;
        bridgeSkillIfNotMiningChain(skillId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "bridgeSkillIfNotMiningChain(uint256)"(skillId: BigNumberish, overrides?: CallOverrides): Promise<void>;
        burnUnneededRewards(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "burnUnneededRewards(uint256)"(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        calculateMinerWeight(_timeStaked: BigNumberish, _submissonIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "calculateMinerWeight(uint256,uint256)"(_timeStaked: BigNumberish, _submissonIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        checkNotAdditionalProtectedVariable(_slot: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "checkNotAdditionalProtectedVariable(uint256)"(_slot: BigNumberish, overrides?: CallOverrides): Promise<void>;
        claimMiningReward(_recipient: string, overrides?: CallOverrides): Promise<void>;
        "claimMiningReward(address)"(_recipient: string, overrides?: CallOverrides): Promise<void>;
        "createColony(address)"(_tokenAddress: string, overrides?: CallOverrides): Promise<string>;
        "createColony(address,uint256,string,string)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: CallOverrides): Promise<string>;
        "createColony(address,uint256,string)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, overrides?: CallOverrides): Promise<string>;
        "createColony(address,uint256,string,string,bool)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, _orbitdb: string, _useExtensionManager: boolean, overrides?: CallOverrides): Promise<string>;
        createColonyForFrontend(_tokenAddress: string, _name: string, _symbol: string, _decimals: BigNumberish, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: CallOverrides): Promise<[string, string] & {
            token: string;
            colony: string;
        }>;
        "createColonyForFrontend(address,string,string,uint8,uint256,string,string)"(_tokenAddress: string, _name: string, _symbol: string, _decimals: BigNumberish, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: CallOverrides): Promise<[string, string] & {
            token: string;
            colony: string;
        }>;
        createMetaColony(_tokenAddress: string, overrides?: CallOverrides): Promise<void>;
        "createMetaColony(address)"(_tokenAddress: string, overrides?: CallOverrides): Promise<void>;
        deployTokenAuthority(_token: string, _colony: string, _allowedToTransfer: string[], overrides?: CallOverrides): Promise<string>;
        "deployTokenAuthority(address,address,address[])"(_token: string, _colony: string, _allowedToTransfer: string[], overrides?: CallOverrides): Promise<string>;
        deployTokenViaNetwork(_name: string, _symbol: string, _decimals: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "deployTokenViaNetwork(string,string,uint8)"(_name: string, _symbol: string, _decimals: BigNumberish, overrides?: CallOverrides): Promise<string>;
        deprecateExtension(_extensionId: BytesLike, _deprecated: boolean, overrides?: CallOverrides): Promise<void>;
        "deprecateExtension(bytes32,bool)"(_extensionId: BytesLike, _deprecated: boolean, overrides?: CallOverrides): Promise<void>;
        deprecateSkill(_skillId: BigNumberish, _deprecated: boolean, overrides?: CallOverrides): Promise<boolean>;
        "deprecateSkill(uint256,bool)"(_skillId: BigNumberish, _deprecated: boolean, overrides?: CallOverrides): Promise<boolean>;
        enterRecoveryMode(overrides?: CallOverrides): Promise<void>;
        "enterRecoveryMode()"(overrides?: CallOverrides): Promise<void>;
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: CallOverrides): Promise<string>;
        exitRecoveryMode(overrides?: CallOverrides): Promise<void>;
        "exitRecoveryMode()"(overrides?: CallOverrides): Promise<void>;
        getBridgedReputationUpdateCount(_chainId: BigNumberish, _colony: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getBridgedReputationUpdateCount(uint256,address)"(_chainId: BigNumberish, _colony: string, overrides?: CallOverrides): Promise<BigNumber>;
        getBridgedSkillCounts(_chainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getBridgedSkillCounts(uint256)"(_chainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getChildSkillId(_skillId: BigNumberish, _childSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getChildSkillId(uint256,uint256)"(_skillId: BigNumberish, _childSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getColony(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "getColony(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;
        getColonyBridgeAddress(overrides?: CallOverrides): Promise<string>;
        "getColonyBridgeAddress()"(overrides?: CallOverrides): Promise<string>;
        getColonyCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getColonyCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getColonyCreationSalt(overrides?: CallOverrides): Promise<string>;
        "getColonyCreationSalt()"(overrides?: CallOverrides): Promise<string>;
        getColonyVersionResolver(_version: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "getColonyVersionResolver(uint256)"(_version: BigNumberish, overrides?: CallOverrides): Promise<string>;
        getCurrentColonyVersion(overrides?: CallOverrides): Promise<BigNumber>;
        "getCurrentColonyVersion()"(overrides?: CallOverrides): Promise<BigNumber>;
        getENSRegistrar(overrides?: CallOverrides): Promise<string>;
        "getENSRegistrar()"(overrides?: CallOverrides): Promise<string>;
        getExtensionInstallation(_extensionId: BytesLike, _colony: string, overrides?: CallOverrides): Promise<string>;
        "getExtensionInstallation(bytes32,address)"(_extensionId: BytesLike, _colony: string, overrides?: CallOverrides): Promise<string>;
        getExtensionResolver(_extensionId: BytesLike, _version: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "getExtensionResolver(bytes32,uint256)"(_extensionId: BytesLike, _version: BigNumberish, overrides?: CallOverrides): Promise<string>;
        getFeeInverse(overrides?: CallOverrides): Promise<BigNumber>;
        "getFeeInverse()"(overrides?: CallOverrides): Promise<BigNumber>;
        getMetaColony(overrides?: CallOverrides): Promise<string>;
        "getMetaColony()"(overrides?: CallOverrides): Promise<string>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        getMiningChainId(overrides?: CallOverrides): Promise<BigNumber>;
        "getMiningChainId()"(overrides?: CallOverrides): Promise<BigNumber>;
        getMiningDelegator(_delegate: string, overrides?: CallOverrides): Promise<string>;
        "getMiningDelegator(address)"(_delegate: string, overrides?: CallOverrides): Promise<string>;
        getMiningResolver(overrides?: CallOverrides): Promise<string>;
        "getMiningResolver()"(overrides?: CallOverrides): Promise<string>;
        getMiningStake(_user: string, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.MiningStakeStructOutput>;
        "getMiningStake(address)"(_user: string, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.MiningStakeStructOutput>;
        getParentSkillId(_skillId: BigNumberish, _parentSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getParentSkillId(uint256,uint256)"(_skillId: BigNumberish, _parentSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getPayoutWhitelist(_token: string, overrides?: CallOverrides): Promise<boolean>;
        "getPayoutWhitelist(address)"(_token: string, overrides?: CallOverrides): Promise<boolean>;
        getPendingReputationUpdate(_chainId: BigNumberish, _colony: string, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.PendingReputationUpdateStructOutput>;
        "getPendingReputationUpdate(uint256,address,uint256)"(_chainId: BigNumberish, _colony: string, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.PendingReputationUpdateStructOutput>;
        getPendingSkillAddition(_chainId: BigNumberish, _skillCount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getPendingSkillAddition(uint256,uint256)"(_chainId: BigNumberish, _skillCount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getProfileDBAddress(_node: BytesLike, overrides?: CallOverrides): Promise<string>;
        "getProfileDBAddress(bytes32)"(_node: BytesLike, overrides?: CallOverrides): Promise<string>;
        getReplacementReputationUpdateLogEntry(_reputationMiningCycle: string, _id: BigNumberish, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.ReputationLogEntryStructOutput>;
        "getReplacementReputationUpdateLogEntry(address,uint256)"(_reputationMiningCycle: string, _id: BigNumberish, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.ReputationLogEntryStructOutput>;
        getReplacementReputationUpdateLogsExist(_reputationMiningCycle: string, overrides?: CallOverrides): Promise<boolean>;
        "getReplacementReputationUpdateLogsExist(address)"(_reputationMiningCycle: string, overrides?: CallOverrides): Promise<boolean>;
        getReputationMiningCycle(_active: boolean, overrides?: CallOverrides): Promise<string>;
        "getReputationMiningCycle(bool)"(_active: boolean, overrides?: CallOverrides): Promise<string>;
        getReputationMiningCycleReward(overrides?: CallOverrides): Promise<BigNumber>;
        "getReputationMiningCycleReward()"(overrides?: CallOverrides): Promise<BigNumber>;
        getReputationMiningSkillId(overrides?: CallOverrides): Promise<BigNumber>;
        "getReputationMiningSkillId()"(overrides?: CallOverrides): Promise<BigNumber>;
        getReputationRootHash(overrides?: CallOverrides): Promise<string>;
        "getReputationRootHash()"(overrides?: CallOverrides): Promise<string>;
        getReputationRootHashNLeaves(overrides?: CallOverrides): Promise<BigNumber>;
        "getReputationRootHashNLeaves()"(overrides?: CallOverrides): Promise<BigNumber>;
        getReputationRootHashNNodes(overrides?: CallOverrides): Promise<BigNumber>;
        "getReputationRootHashNNodes()"(overrides?: CallOverrides): Promise<BigNumber>;
        getSkill(_skillId: BigNumberish, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.SkillStructOutput>;
        "getSkill(uint256)"(_skillId: BigNumberish, overrides?: CallOverrides): Promise<ColonyNetworkDataTypes.SkillStructOutput>;
        getSkillCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getSkillCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getTokenLocking(overrides?: CallOverrides): Promise<string>;
        "getTokenLocking()"(overrides?: CallOverrides): Promise<string>;
        initialise(_resolver: string, _version: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "initialise(address,uint256)"(_resolver: string, _version: BigNumberish, overrides?: CallOverrides): Promise<void>;
        initialiseReputationMining(miningChainId: BigNumberish, newHash: BytesLike, newNLeaves: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "initialiseReputationMining(uint256,bytes32,uint256)"(miningChainId: BigNumberish, newHash: BytesLike, newNLeaves: BigNumberish, overrides?: CallOverrides): Promise<void>;
        initialiseRootLocalSkill(overrides?: CallOverrides): Promise<BigNumber>;
        "initialiseRootLocalSkill()"(overrides?: CallOverrides): Promise<BigNumber>;
        installExtension(_extensionId: BytesLike, _version: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "installExtension(bytes32,uint256)"(_extensionId: BytesLike, _version: BigNumberish, overrides?: CallOverrides): Promise<void>;
        isColony(_colony: string, overrides?: CallOverrides): Promise<boolean>;
        "isColony(address)"(_colony: string, overrides?: CallOverrides): Promise<boolean>;
        isInRecoveryMode(overrides?: CallOverrides): Promise<boolean>;
        "isInRecoveryMode()"(overrides?: CallOverrides): Promise<boolean>;
        lookupRegisteredENSDomain(_addr: string, overrides?: CallOverrides): Promise<string>;
        "lookupRegisteredENSDomain(address)"(_addr: string, overrides?: CallOverrides): Promise<string>;
        multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
        "multicall(bytes[])"(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
        numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;
        "numRecoveryRoles()"(overrides?: CallOverrides): Promise<BigNumber>;
        punishStakers(_stakers: string[], _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "punishStakers(address[],uint256)"(_stakers: string[], _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        registerColonyLabel(_colonyName: string, _orbitdb: string, overrides?: CallOverrides): Promise<void>;
        "registerColonyLabel(string,string)"(_colonyName: string, _orbitdb: string, overrides?: CallOverrides): Promise<void>;
        registerUserLabel(_username: string, _orbitdb: string, overrides?: CallOverrides): Promise<void>;
        "registerUserLabel(string,string)"(_username: string, _orbitdb: string, overrides?: CallOverrides): Promise<void>;
        removeRecoveryRole(_user: string, overrides?: CallOverrides): Promise<void>;
        "removeRecoveryRole(address)"(_user: string, overrides?: CallOverrides): Promise<void>;
        reward(_recipient: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "reward(address,uint256)"(_recipient: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setColonyBridgeAddress(_bridgeAddress: string, overrides?: CallOverrides): Promise<void>;
        "setColonyBridgeAddress(address)"(_bridgeAddress: string, overrides?: CallOverrides): Promise<void>;
        setFeeInverse(_feeInverse: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "setFeeInverse(uint256)"(_feeInverse: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setMiningDelegate(_delegate: string, _allowed: boolean, overrides?: CallOverrides): Promise<void>;
        "setMiningDelegate(address,bool)"(_delegate: string, _allowed: boolean, overrides?: CallOverrides): Promise<void>;
        setMiningResolver(_miningResolverAddress: string, overrides?: CallOverrides): Promise<void>;
        "setMiningResolver(address)"(_miningResolverAddress: string, overrides?: CallOverrides): Promise<void>;
        setPayoutWhitelist(_token: string, _status: boolean, overrides?: CallOverrides): Promise<void>;
        "setPayoutWhitelist(address,bool)"(_token: string, _status: boolean, overrides?: CallOverrides): Promise<void>;
        setRecoveryRole(_user: string, overrides?: CallOverrides): Promise<void>;
        "setRecoveryRole(address)"(_user: string, overrides?: CallOverrides): Promise<void>;
        setReplacementReputationUpdateLogEntry(_reputationMiningCycle: string, _id: BigNumberish, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _colony: string, _nUpdates: BigNumberish, _nPreviousUpdates: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)"(_reputationMiningCycle: string, _id: BigNumberish, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _colony: string, _nUpdates: BigNumberish, _nPreviousUpdates: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setReputationMiningCycleReward(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "setReputationMiningCycleReward(uint256)"(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setReputationRootHash(_newHash: BytesLike, _newNLeaves: BigNumberish, _stakers: string[], overrides?: CallOverrides): Promise<void>;
        "setReputationRootHash(bytes32,uint256,address[])"(_newHash: BytesLike, _newNLeaves: BigNumberish, _stakers: string[], overrides?: CallOverrides): Promise<void>;
        setReputationRootHashFromBridge(newHash: BytesLike, newNLeaves: BigNumberish, nonce: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "setReputationRootHashFromBridge(bytes32,uint256,uint256)"(newHash: BytesLike, newNLeaves: BigNumberish, nonce: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setStorageSlotRecovery(_slot: BigNumberish, _value: BytesLike, overrides?: CallOverrides): Promise<void>;
        "setStorageSlotRecovery(uint256,bytes32)"(_slot: BigNumberish, _value: BytesLike, overrides?: CallOverrides): Promise<void>;
        setTokenLocking(_tokenLockingAddress: string, overrides?: CallOverrides): Promise<void>;
        "setTokenLocking(address)"(_tokenLockingAddress: string, overrides?: CallOverrides): Promise<void>;
        setupRegistrar(_ens: string, _rootNode: BytesLike, overrides?: CallOverrides): Promise<void>;
        "setupRegistrar(address,bytes32)"(_ens: string, _rootNode: BytesLike, overrides?: CallOverrides): Promise<void>;
        stakeForMining(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "stakeForMining(uint256)"(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        startNextCycle(overrides?: CallOverrides): Promise<void>;
        "startNextCycle()"(overrides?: CallOverrides): Promise<void>;
        startTokenAuction(_token: string, overrides?: CallOverrides): Promise<void>;
        "startTokenAuction(address)"(_token: string, overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        "supportsInterface(bytes4)"(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        uninstallExtension(_extensionId: BytesLike, overrides?: CallOverrides): Promise<void>;
        "uninstallExtension(bytes32)"(_extensionId: BytesLike, overrides?: CallOverrides): Promise<void>;
        unstakeForMining(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "unstakeForMining(uint256)"(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        updateColonyOrbitDB(_orbitdb: string, overrides?: CallOverrides): Promise<void>;
        "updateColonyOrbitDB(string)"(_orbitdb: string, overrides?: CallOverrides): Promise<void>;
        updateUserOrbitDB(_orbitdb: string, overrides?: CallOverrides): Promise<void>;
        "updateUserOrbitDB(string)"(_orbitdb: string, overrides?: CallOverrides): Promise<void>;
        upgradeExtension(_extensionId: BytesLike, _newVersion: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "upgradeExtension(bytes32,uint256)"(_extensionId: BytesLike, _newVersion: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AuctionCreated(address,address,uint256)"(auction?: null, token?: null, quantity?: null): AuctionCreatedEventFilter;
        AuctionCreated(auction?: null, token?: null, quantity?: null): AuctionCreatedEventFilter;
        "BridgeSet(address)"(bridgeAddress?: null): BridgeSetEventFilter;
        BridgeSet(bridgeAddress?: null): BridgeSetEventFilter;
        "ColonyAdded(uint256,address,address)"(colonyId?: BigNumberish | null, colonyAddress?: string | null, token?: null): ColonyAddedEventFilter;
        ColonyAdded(colonyId?: BigNumberish | null, colonyAddress?: string | null, token?: null): ColonyAddedEventFilter;
        "ColonyLabelRegistered(address,bytes32)"(colony?: string | null, label?: null): ColonyLabelRegisteredEventFilter;
        ColonyLabelRegistered(colony?: string | null, label?: null): ColonyLabelRegisteredEventFilter;
        "ColonyNetworkInitialised(address)"(resolver?: null): ColonyNetworkInitialisedEventFilter;
        ColonyNetworkInitialised(resolver?: null): ColonyNetworkInitialisedEventFilter;
        "ColonyVersionAdded(uint256,address)"(version?: null, resolver?: null): ColonyVersionAddedEventFilter;
        ColonyVersionAdded(version?: null, resolver?: null): ColonyVersionAddedEventFilter;
        "ExtensionAddedToNetwork(bytes32,uint256)"(extensionId?: BytesLike | null, version?: null): ExtensionAddedToNetworkEventFilter;
        ExtensionAddedToNetwork(extensionId?: BytesLike | null, version?: null): ExtensionAddedToNetworkEventFilter;
        "ExtensionDeprecated(bytes32,address,bool)"(extensionId?: BytesLike | null, colony?: string | null, deprecated?: null): ExtensionDeprecatedEventFilter;
        ExtensionDeprecated(extensionId?: BytesLike | null, colony?: string | null, deprecated?: null): ExtensionDeprecatedEventFilter;
        "ExtensionInstalled(bytes32,address,uint256)"(extensionId?: BytesLike | null, colony?: string | null, version?: null): ExtensionInstalledEventFilter;
        ExtensionInstalled(extensionId?: BytesLike | null, colony?: string | null, version?: null): ExtensionInstalledEventFilter;
        "ExtensionUninstalled(bytes32,address)"(extensionId?: BytesLike | null, colony?: string | null): ExtensionUninstalledEventFilter;
        ExtensionUninstalled(extensionId?: BytesLike | null, colony?: string | null): ExtensionUninstalledEventFilter;
        "ExtensionUpgraded(bytes32,address,uint256)"(extensionId?: BytesLike | null, colony?: string | null, version?: null): ExtensionUpgradedEventFilter;
        ExtensionUpgraded(extensionId?: BytesLike | null, colony?: string | null, version?: null): ExtensionUpgradedEventFilter;
        "MetaColonyCreated(address,address,uint256)"(metaColony?: null, token?: null, rootSkillId?: null): MetaColonyCreatedEventFilter;
        MetaColonyCreated(metaColony?: null, token?: null, rootSkillId?: null): MetaColonyCreatedEventFilter;
        "MetaTransactionExecuted(address,address,bytes)"(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
        MetaTransactionExecuted(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
        "MiningCycleResolverSet(address)"(miningCycleResolver?: null): MiningCycleResolverSetEventFilter;
        MiningCycleResolverSet(miningCycleResolver?: null): MiningCycleResolverSetEventFilter;
        "NetworkFeeInverseSet(uint256)"(feeInverse?: null): NetworkFeeInverseSetEventFilter;
        NetworkFeeInverseSet(feeInverse?: null): NetworkFeeInverseSetEventFilter;
        "RecoveryModeEntered(address)"(user?: null): RecoveryModeEnteredEventFilter;
        RecoveryModeEntered(user?: null): RecoveryModeEnteredEventFilter;
        "RecoveryModeExitApproved(address)"(user?: null): RecoveryModeExitApprovedEventFilter;
        RecoveryModeExitApproved(user?: null): RecoveryModeExitApprovedEventFilter;
        "RecoveryModeExited(address)"(user?: null): RecoveryModeExitedEventFilter;
        RecoveryModeExited(user?: null): RecoveryModeExitedEventFilter;
        "RecoveryRoleSet(address,bool)"(user?: string | null, setTo?: null): RecoveryRoleSetEventFilter;
        RecoveryRoleSet(user?: string | null, setTo?: null): RecoveryRoleSetEventFilter;
        "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)"(user?: null, slot?: null, fromValue?: null, toValue?: null): RecoveryStorageSlotSetEventFilter;
        RecoveryStorageSlotSet(user?: null, slot?: null, fromValue?: null, toValue?: null): RecoveryStorageSlotSetEventFilter;
        "RegistrarInitialised(address,bytes32)"(ens?: null, rootNode?: null): RegistrarInitialisedEventFilter;
        RegistrarInitialised(ens?: null, rootNode?: null): RegistrarInitialisedEventFilter;
        "ReputationMinerPenalised(address,uint256)"(miner?: null, tokensLost?: null): ReputationMinerPenalisedEventFilter;
        ReputationMinerPenalised(miner?: null, tokensLost?: null): ReputationMinerPenalisedEventFilter;
        "ReputationMiningCycleComplete(bytes32,uint256)"(hash?: null, nLeaves?: null): ReputationMiningCycleCompleteEventFilter;
        ReputationMiningCycleComplete(hash?: null, nLeaves?: null): ReputationMiningCycleCompleteEventFilter;
        "ReputationMiningInitialised(address)"(inactiveReputationMiningCycle?: null): ReputationMiningInitialisedEventFilter;
        ReputationMiningInitialised(inactiveReputationMiningCycle?: null): ReputationMiningInitialisedEventFilter;
        "ReputationMiningRewardSet(uint256)"(amount?: null): ReputationMiningRewardSetEventFilter;
        ReputationMiningRewardSet(amount?: null): ReputationMiningRewardSetEventFilter;
        "ReputationRootHashSet(bytes32,uint256,address[],uint256)"(newHash?: null, newNLeaves?: null, stakers?: null, reward?: null): ReputationRootHashSetEventFilter;
        ReputationRootHashSet(newHash?: null, newNLeaves?: null, stakers?: null, reward?: null): ReputationRootHashSetEventFilter;
        "ReputationUpdateAddedFromBridge(uint256,address,uint256)"(chainId?: null, colony?: null, updateNumber?: null): ReputationUpdateAddedFromBridgeEventFilter;
        ReputationUpdateAddedFromBridge(chainId?: null, colony?: null, updateNumber?: null): ReputationUpdateAddedFromBridgeEventFilter;
        "ReputationUpdateSentToBridge(address,uint256)"(colony?: null, count?: null): ReputationUpdateSentToBridgeEventFilter;
        ReputationUpdateSentToBridge(colony?: null, count?: null): ReputationUpdateSentToBridgeEventFilter;
        "ReputationUpdateStored(address,uint256)"(colony?: null, count?: null): ReputationUpdateStoredEventFilter;
        ReputationUpdateStored(colony?: null, count?: null): ReputationUpdateStoredEventFilter;
        "ReputationUpdateStoredFromBridge(uint256,address,uint256)"(chainId?: null, colony?: null, updateNumber?: null): ReputationUpdateStoredFromBridgeEventFilter;
        ReputationUpdateStoredFromBridge(chainId?: null, colony?: null, updateNumber?: null): ReputationUpdateStoredFromBridgeEventFilter;
        "SkillAdded(uint256,uint256)"(skillId?: null, parentSkillId?: null): SkillAddedEventFilter;
        SkillAdded(skillId?: null, parentSkillId?: null): SkillAddedEventFilter;
        "SkillAddedFromBridge(uint256)"(skillId?: null): SkillAddedFromBridgeEventFilter;
        SkillAddedFromBridge(skillId?: null): SkillAddedFromBridgeEventFilter;
        "SkillCreationStored(uint256)"(skillId?: null): SkillCreationStoredEventFilter;
        SkillCreationStored(skillId?: null): SkillCreationStoredEventFilter;
        "SkillStoredFromBridge(uint256)"(skillId?: null): SkillStoredFromBridgeEventFilter;
        SkillStoredFromBridge(skillId?: null): SkillStoredFromBridgeEventFilter;
        "TokenAuthorityDeployed(address)"(tokenAuthorityAddress?: null): TokenAuthorityDeployedEventFilter;
        TokenAuthorityDeployed(tokenAuthorityAddress?: null): TokenAuthorityDeployedEventFilter;
        "TokenDeployed(address)"(tokenAddress?: null): TokenDeployedEventFilter;
        TokenDeployed(tokenAddress?: null): TokenDeployedEventFilter;
        "TokenLockingAddressSet(address)"(tokenLocking?: null): TokenLockingAddressSetEventFilter;
        TokenLockingAddressSet(tokenLocking?: null): TokenLockingAddressSetEventFilter;
        "TokenWhitelisted(address,bool)"(token?: null, status?: null): TokenWhitelistedEventFilter;
        TokenWhitelisted(token?: null, status?: null): TokenWhitelistedEventFilter;
        "UserLabelRegistered(address,bytes32)"(user?: string | null, label?: null): UserLabelRegisteredEventFilter;
        UserLabelRegistered(user?: string | null, label?: null): UserLabelRegisteredEventFilter;
    };
    estimateGas: {
        addColonyVersion(_version: BigNumberish, _resolver: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "addColonyVersion(uint256,address)"(_version: BigNumberish, _resolver: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        addExtensionToNetwork(_extensionId: BytesLike, _resolver: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "addExtensionToNetwork(bytes32,address)"(_extensionId: BytesLike, _resolver: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        addPendingReputationUpdate(_chainId: BigNumberish, _colony: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "addPendingReputationUpdate(uint256,address)"(_chainId: BigNumberish, _colony: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        addPendingSkill(_skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "addPendingSkill(uint256)"(_skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        addReputationUpdateLogFromBridge(_colony: string, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _updateNumber: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "addReputationUpdateLogFromBridge(address,address,int256,uint256,uint256)"(_colony: string, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _updateNumber: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        addSkill(_parentSkillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "addSkill(uint256)"(_parentSkillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        addSkillFromBridge(_parentSkillId: BigNumberish, _skillCount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "addSkillFromBridge(uint256,uint256)"(_parentSkillId: BigNumberish, _skillCount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        addr(_node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "addr(bytes32)"(_node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        appendReputationUpdateLog(_user: string, _amount: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "appendReputationUpdateLog(address,int256,uint256)"(_user: string, _amount: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        approveExitRecovery(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "approveExitRecovery()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        bridgeCurrentRootHash(chainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "bridgeCurrentRootHash(uint256)"(chainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        bridgePendingReputationUpdate(_colony: string, _updateNumber: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "bridgePendingReputationUpdate(address,uint256)"(_colony: string, _updateNumber: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        bridgeSkillIfNotMiningChain(skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "bridgeSkillIfNotMiningChain(uint256)"(skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        burnUnneededRewards(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "burnUnneededRewards(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        calculateMinerWeight(_timeStaked: BigNumberish, _submissonIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "calculateMinerWeight(uint256,uint256)"(_timeStaked: BigNumberish, _submissonIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        checkNotAdditionalProtectedVariable(_slot: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "checkNotAdditionalProtectedVariable(uint256)"(_slot: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        claimMiningReward(_recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "claimMiningReward(address)"(_recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "createColony(address)"(_tokenAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "createColony(address,uint256,string,string)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "createColony(address,uint256,string)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "createColony(address,uint256,string,string,bool)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, _orbitdb: string, _useExtensionManager: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        createColonyForFrontend(_tokenAddress: string, _name: string, _symbol: string, _decimals: BigNumberish, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "createColonyForFrontend(address,string,string,uint8,uint256,string,string)"(_tokenAddress: string, _name: string, _symbol: string, _decimals: BigNumberish, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        createMetaColony(_tokenAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "createMetaColony(address)"(_tokenAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        deployTokenAuthority(_token: string, _colony: string, _allowedToTransfer: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "deployTokenAuthority(address,address,address[])"(_token: string, _colony: string, _allowedToTransfer: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        deployTokenViaNetwork(_name: string, _symbol: string, _decimals: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "deployTokenViaNetwork(string,string,uint8)"(_name: string, _symbol: string, _decimals: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        deprecateExtension(_extensionId: BytesLike, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "deprecateExtension(bytes32,bool)"(_extensionId: BytesLike, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        deprecateSkill(_skillId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "deprecateSkill(uint256,bool)"(_skillId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        enterRecoveryMode(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "enterRecoveryMode()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        exitRecoveryMode(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "exitRecoveryMode()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        getBridgedReputationUpdateCount(_chainId: BigNumberish, _colony: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getBridgedReputationUpdateCount(uint256,address)"(_chainId: BigNumberish, _colony: string, overrides?: CallOverrides): Promise<BigNumber>;
        getBridgedSkillCounts(_chainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getBridgedSkillCounts(uint256)"(_chainId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getChildSkillId(_skillId: BigNumberish, _childSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getChildSkillId(uint256,uint256)"(_skillId: BigNumberish, _childSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getColony(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getColony(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getColonyBridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;
        "getColonyBridgeAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
        getColonyCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getColonyCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getColonyCreationSalt(overrides?: CallOverrides): Promise<BigNumber>;
        "getColonyCreationSalt()"(overrides?: CallOverrides): Promise<BigNumber>;
        getColonyVersionResolver(_version: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getColonyVersionResolver(uint256)"(_version: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getCurrentColonyVersion(overrides?: CallOverrides): Promise<BigNumber>;
        "getCurrentColonyVersion()"(overrides?: CallOverrides): Promise<BigNumber>;
        getENSRegistrar(overrides?: CallOverrides): Promise<BigNumber>;
        "getENSRegistrar()"(overrides?: CallOverrides): Promise<BigNumber>;
        getExtensionInstallation(_extensionId: BytesLike, _colony: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getExtensionInstallation(bytes32,address)"(_extensionId: BytesLike, _colony: string, overrides?: CallOverrides): Promise<BigNumber>;
        getExtensionResolver(_extensionId: BytesLike, _version: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getExtensionResolver(bytes32,uint256)"(_extensionId: BytesLike, _version: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeInverse(overrides?: CallOverrides): Promise<BigNumber>;
        "getFeeInverse()"(overrides?: CallOverrides): Promise<BigNumber>;
        getMetaColony(overrides?: CallOverrides): Promise<BigNumber>;
        "getMetaColony()"(overrides?: CallOverrides): Promise<BigNumber>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;
        getMiningChainId(overrides?: CallOverrides): Promise<BigNumber>;
        "getMiningChainId()"(overrides?: CallOverrides): Promise<BigNumber>;
        getMiningDelegator(_delegate: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getMiningDelegator(address)"(_delegate: string, overrides?: CallOverrides): Promise<BigNumber>;
        getMiningResolver(overrides?: CallOverrides): Promise<BigNumber>;
        "getMiningResolver()"(overrides?: CallOverrides): Promise<BigNumber>;
        getMiningStake(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getMiningStake(address)"(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
        getParentSkillId(_skillId: BigNumberish, _parentSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getParentSkillId(uint256,uint256)"(_skillId: BigNumberish, _parentSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getPayoutWhitelist(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getPayoutWhitelist(address)"(_token: string, overrides?: CallOverrides): Promise<BigNumber>;
        getPendingReputationUpdate(_chainId: BigNumberish, _colony: string, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getPendingReputationUpdate(uint256,address,uint256)"(_chainId: BigNumberish, _colony: string, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getPendingSkillAddition(_chainId: BigNumberish, _skillCount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getPendingSkillAddition(uint256,uint256)"(_chainId: BigNumberish, _skillCount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getProfileDBAddress(_node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "getProfileDBAddress(bytes32)"(_node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getReplacementReputationUpdateLogEntry(_reputationMiningCycle: string, _id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getReplacementReputationUpdateLogEntry(address,uint256)"(_reputationMiningCycle: string, _id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getReplacementReputationUpdateLogsExist(_reputationMiningCycle: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getReplacementReputationUpdateLogsExist(address)"(_reputationMiningCycle: string, overrides?: CallOverrides): Promise<BigNumber>;
        getReputationMiningCycle(_active: boolean, overrides?: CallOverrides): Promise<BigNumber>;
        "getReputationMiningCycle(bool)"(_active: boolean, overrides?: CallOverrides): Promise<BigNumber>;
        getReputationMiningCycleReward(overrides?: CallOverrides): Promise<BigNumber>;
        "getReputationMiningCycleReward()"(overrides?: CallOverrides): Promise<BigNumber>;
        getReputationMiningSkillId(overrides?: CallOverrides): Promise<BigNumber>;
        "getReputationMiningSkillId()"(overrides?: CallOverrides): Promise<BigNumber>;
        getReputationRootHash(overrides?: CallOverrides): Promise<BigNumber>;
        "getReputationRootHash()"(overrides?: CallOverrides): Promise<BigNumber>;
        getReputationRootHashNLeaves(overrides?: CallOverrides): Promise<BigNumber>;
        "getReputationRootHashNLeaves()"(overrides?: CallOverrides): Promise<BigNumber>;
        getReputationRootHashNNodes(overrides?: CallOverrides): Promise<BigNumber>;
        "getReputationRootHashNNodes()"(overrides?: CallOverrides): Promise<BigNumber>;
        getSkill(_skillId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "getSkill(uint256)"(_skillId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getSkillCount(overrides?: CallOverrides): Promise<BigNumber>;
        "getSkillCount()"(overrides?: CallOverrides): Promise<BigNumber>;
        getTokenLocking(overrides?: CallOverrides): Promise<BigNumber>;
        "getTokenLocking()"(overrides?: CallOverrides): Promise<BigNumber>;
        initialise(_resolver: string, _version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "initialise(address,uint256)"(_resolver: string, _version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        initialiseReputationMining(miningChainId: BigNumberish, newHash: BytesLike, newNLeaves: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "initialiseReputationMining(uint256,bytes32,uint256)"(miningChainId: BigNumberish, newHash: BytesLike, newNLeaves: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        initialiseRootLocalSkill(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "initialiseRootLocalSkill()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        installExtension(_extensionId: BytesLike, _version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "installExtension(bytes32,uint256)"(_extensionId: BytesLike, _version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        isColony(_colony: string, overrides?: CallOverrides): Promise<BigNumber>;
        "isColony(address)"(_colony: string, overrides?: CallOverrides): Promise<BigNumber>;
        isInRecoveryMode(overrides?: CallOverrides): Promise<BigNumber>;
        "isInRecoveryMode()"(overrides?: CallOverrides): Promise<BigNumber>;
        lookupRegisteredENSDomain(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;
        "lookupRegisteredENSDomain(address)"(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "multicall(bytes[])"(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        numRecoveryRoles(overrides?: CallOverrides): Promise<BigNumber>;
        "numRecoveryRoles()"(overrides?: CallOverrides): Promise<BigNumber>;
        punishStakers(_stakers: string[], _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "punishStakers(address[],uint256)"(_stakers: string[], _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        registerColonyLabel(_colonyName: string, _orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "registerColonyLabel(string,string)"(_colonyName: string, _orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        registerUserLabel(_username: string, _orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "registerUserLabel(string,string)"(_username: string, _orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        removeRecoveryRole(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "removeRecoveryRole(address)"(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        reward(_recipient: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "reward(address,uint256)"(_recipient: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setColonyBridgeAddress(_bridgeAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setColonyBridgeAddress(address)"(_bridgeAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setFeeInverse(_feeInverse: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setFeeInverse(uint256)"(_feeInverse: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setMiningDelegate(_delegate: string, _allowed: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setMiningDelegate(address,bool)"(_delegate: string, _allowed: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setMiningResolver(_miningResolverAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setMiningResolver(address)"(_miningResolverAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setPayoutWhitelist(_token: string, _status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setPayoutWhitelist(address,bool)"(_token: string, _status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setRecoveryRole(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setRecoveryRole(address)"(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setReplacementReputationUpdateLogEntry(_reputationMiningCycle: string, _id: BigNumberish, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _colony: string, _nUpdates: BigNumberish, _nPreviousUpdates: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)"(_reputationMiningCycle: string, _id: BigNumberish, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _colony: string, _nUpdates: BigNumberish, _nPreviousUpdates: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setReputationMiningCycleReward(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setReputationMiningCycleReward(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setReputationRootHash(_newHash: BytesLike, _newNLeaves: BigNumberish, _stakers: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setReputationRootHash(bytes32,uint256,address[])"(_newHash: BytesLike, _newNLeaves: BigNumberish, _stakers: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setReputationRootHashFromBridge(newHash: BytesLike, newNLeaves: BigNumberish, nonce: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setReputationRootHashFromBridge(bytes32,uint256,uint256)"(newHash: BytesLike, newNLeaves: BigNumberish, nonce: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setStorageSlotRecovery(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setStorageSlotRecovery(uint256,bytes32)"(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setTokenLocking(_tokenLockingAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setTokenLocking(address)"(_tokenLockingAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setupRegistrar(_ens: string, _rootNode: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setupRegistrar(address,bytes32)"(_ens: string, _rootNode: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        stakeForMining(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "stakeForMining(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        startNextCycle(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "startNextCycle()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        startTokenAuction(_token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "startTokenAuction(address)"(_token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "supportsInterface(bytes4)"(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        uninstallExtension(_extensionId: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "uninstallExtension(bytes32)"(_extensionId: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        unstakeForMining(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "unstakeForMining(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        updateColonyOrbitDB(_orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "updateColonyOrbitDB(string)"(_orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        updateUserOrbitDB(_orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "updateUserOrbitDB(string)"(_orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        upgradeExtension(_extensionId: BytesLike, _newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "upgradeExtension(bytes32,uint256)"(_extensionId: BytesLike, _newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addColonyVersion(_version: BigNumberish, _resolver: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "addColonyVersion(uint256,address)"(_version: BigNumberish, _resolver: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        addExtensionToNetwork(_extensionId: BytesLike, _resolver: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "addExtensionToNetwork(bytes32,address)"(_extensionId: BytesLike, _resolver: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        addPendingReputationUpdate(_chainId: BigNumberish, _colony: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "addPendingReputationUpdate(uint256,address)"(_chainId: BigNumberish, _colony: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        addPendingSkill(_skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "addPendingSkill(uint256)"(_skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        addReputationUpdateLogFromBridge(_colony: string, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _updateNumber: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "addReputationUpdateLogFromBridge(address,address,int256,uint256,uint256)"(_colony: string, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _updateNumber: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        addSkill(_parentSkillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "addSkill(uint256)"(_parentSkillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        addSkillFromBridge(_parentSkillId: BigNumberish, _skillCount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "addSkillFromBridge(uint256,uint256)"(_parentSkillId: BigNumberish, _skillCount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        addr(_node: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "addr(bytes32)"(_node: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        appendReputationUpdateLog(_user: string, _amount: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "appendReputationUpdateLog(address,int256,uint256)"(_user: string, _amount: BigNumberish, _skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        approveExitRecovery(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "approveExitRecovery()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        bridgeCurrentRootHash(chainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "bridgeCurrentRootHash(uint256)"(chainId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        bridgePendingReputationUpdate(_colony: string, _updateNumber: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "bridgePendingReputationUpdate(address,uint256)"(_colony: string, _updateNumber: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        bridgeSkillIfNotMiningChain(skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "bridgeSkillIfNotMiningChain(uint256)"(skillId: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        burnUnneededRewards(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "burnUnneededRewards(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        calculateMinerWeight(_timeStaked: BigNumberish, _submissonIndex: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "calculateMinerWeight(uint256,uint256)"(_timeStaked: BigNumberish, _submissonIndex: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        checkNotAdditionalProtectedVariable(_slot: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "checkNotAdditionalProtectedVariable(uint256)"(_slot: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        claimMiningReward(_recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "claimMiningReward(address)"(_recipient: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "createColony(address)"(_tokenAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "createColony(address,uint256,string,string)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "createColony(address,uint256,string)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "createColony(address,uint256,string,string,bool)"(_tokenAddress: string, _version: BigNumberish, _colonyName: string, _orbitdb: string, _useExtensionManager: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        createColonyForFrontend(_tokenAddress: string, _name: string, _symbol: string, _decimals: BigNumberish, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "createColonyForFrontend(address,string,string,uint8,uint256,string,string)"(_tokenAddress: string, _name: string, _symbol: string, _decimals: BigNumberish, _version: BigNumberish, _colonyName: string, _metadata: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        createMetaColony(_tokenAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "createMetaColony(address)"(_tokenAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        deployTokenAuthority(_token: string, _colony: string, _allowedToTransfer: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "deployTokenAuthority(address,address,address[])"(_token: string, _colony: string, _allowedToTransfer: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        deployTokenViaNetwork(_name: string, _symbol: string, _decimals: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "deployTokenViaNetwork(string,string,uint8)"(_name: string, _symbol: string, _decimals: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        deprecateExtension(_extensionId: BytesLike, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "deprecateExtension(bytes32,bool)"(_extensionId: BytesLike, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        deprecateSkill(_skillId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "deprecateSkill(uint256,bool)"(_skillId: BigNumberish, _deprecated: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        enterRecoveryMode(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "enterRecoveryMode()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        executeMetaTransaction(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(userAddress: string, payload: BytesLike, sigR: BytesLike, sigS: BytesLike, sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        exitRecoveryMode(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "exitRecoveryMode()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        getBridgedReputationUpdateCount(_chainId: BigNumberish, _colony: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getBridgedReputationUpdateCount(uint256,address)"(_chainId: BigNumberish, _colony: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBridgedSkillCounts(_chainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getBridgedSkillCounts(uint256)"(_chainId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getChildSkillId(_skillId: BigNumberish, _childSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getChildSkillId(uint256,uint256)"(_skillId: BigNumberish, _childSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getColony(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getColony(uint256)"(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getColonyBridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getColonyBridgeAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getColonyCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getColonyCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getColonyCreationSalt(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getColonyCreationSalt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getColonyVersionResolver(_version: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getColonyVersionResolver(uint256)"(_version: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCurrentColonyVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getCurrentColonyVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getENSRegistrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getENSRegistrar()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExtensionInstallation(_extensionId: BytesLike, _colony: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getExtensionInstallation(bytes32,address)"(_extensionId: BytesLike, _colony: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExtensionResolver(_extensionId: BytesLike, _version: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getExtensionResolver(bytes32,uint256)"(_extensionId: BytesLike, _version: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeInverse(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getFeeInverse()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMetaColony(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMetaColony()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMetatransactionNonce(userAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMetatransactionNonce(address)"(userAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMiningChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMiningChainId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMiningDelegator(_delegate: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMiningDelegator(address)"(_delegate: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMiningResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMiningResolver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMiningStake(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMiningStake(address)"(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getParentSkillId(_skillId: BigNumberish, _parentSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getParentSkillId(uint256,uint256)"(_skillId: BigNumberish, _parentSkillIndex: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPayoutWhitelist(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getPayoutWhitelist(address)"(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPendingReputationUpdate(_chainId: BigNumberish, _colony: string, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getPendingReputationUpdate(uint256,address,uint256)"(_chainId: BigNumberish, _colony: string, _updateNumber: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPendingSkillAddition(_chainId: BigNumberish, _skillCount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getPendingSkillAddition(uint256,uint256)"(_chainId: BigNumberish, _skillCount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getProfileDBAddress(_node: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getProfileDBAddress(bytes32)"(_node: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReplacementReputationUpdateLogEntry(_reputationMiningCycle: string, _id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getReplacementReputationUpdateLogEntry(address,uint256)"(_reputationMiningCycle: string, _id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReplacementReputationUpdateLogsExist(_reputationMiningCycle: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getReplacementReputationUpdateLogsExist(address)"(_reputationMiningCycle: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReputationMiningCycle(_active: boolean, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getReputationMiningCycle(bool)"(_active: boolean, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReputationMiningCycleReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getReputationMiningCycleReward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReputationMiningSkillId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getReputationMiningSkillId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReputationRootHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getReputationRootHash()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReputationRootHashNLeaves(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getReputationRootHashNLeaves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReputationRootHashNNodes(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getReputationRootHashNNodes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSkill(_skillId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getSkill(uint256)"(_skillId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSkillCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getSkillCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTokenLocking(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getTokenLocking()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialise(_resolver: string, _version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "initialise(address,uint256)"(_resolver: string, _version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        initialiseReputationMining(miningChainId: BigNumberish, newHash: BytesLike, newNLeaves: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "initialiseReputationMining(uint256,bytes32,uint256)"(miningChainId: BigNumberish, newHash: BytesLike, newNLeaves: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        initialiseRootLocalSkill(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "initialiseRootLocalSkill()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        installExtension(_extensionId: BytesLike, _version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "installExtension(bytes32,uint256)"(_extensionId: BytesLike, _version: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        isColony(_colony: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "isColony(address)"(_colony: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isInRecoveryMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "isInRecoveryMode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lookupRegisteredENSDomain(_addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "lookupRegisteredENSDomain(address)"(_addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "multicall(bytes[])"(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        numRecoveryRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "numRecoveryRoles()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        punishStakers(_stakers: string[], _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "punishStakers(address[],uint256)"(_stakers: string[], _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        registerColonyLabel(_colonyName: string, _orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "registerColonyLabel(string,string)"(_colonyName: string, _orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        registerUserLabel(_username: string, _orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "registerUserLabel(string,string)"(_username: string, _orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        removeRecoveryRole(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "removeRecoveryRole(address)"(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        reward(_recipient: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "reward(address,uint256)"(_recipient: string, _amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setColonyBridgeAddress(_bridgeAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setColonyBridgeAddress(address)"(_bridgeAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setFeeInverse(_feeInverse: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setFeeInverse(uint256)"(_feeInverse: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setMiningDelegate(_delegate: string, _allowed: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setMiningDelegate(address,bool)"(_delegate: string, _allowed: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setMiningResolver(_miningResolverAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setMiningResolver(address)"(_miningResolverAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setPayoutWhitelist(_token: string, _status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setPayoutWhitelist(address,bool)"(_token: string, _status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setRecoveryRole(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setRecoveryRole(address)"(_user: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setReplacementReputationUpdateLogEntry(_reputationMiningCycle: string, _id: BigNumberish, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _colony: string, _nUpdates: BigNumberish, _nPreviousUpdates: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setReplacementReputationUpdateLogEntry(address,uint256,address,int256,uint256,address,uint128,uint128)"(_reputationMiningCycle: string, _id: BigNumberish, _user: string, _amount: BigNumberish, _skillId: BigNumberish, _colony: string, _nUpdates: BigNumberish, _nPreviousUpdates: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setReputationMiningCycleReward(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setReputationMiningCycleReward(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setReputationRootHash(_newHash: BytesLike, _newNLeaves: BigNumberish, _stakers: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setReputationRootHash(bytes32,uint256,address[])"(_newHash: BytesLike, _newNLeaves: BigNumberish, _stakers: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setReputationRootHashFromBridge(newHash: BytesLike, newNLeaves: BigNumberish, nonce: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setReputationRootHashFromBridge(bytes32,uint256,uint256)"(newHash: BytesLike, newNLeaves: BigNumberish, nonce: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setStorageSlotRecovery(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setStorageSlotRecovery(uint256,bytes32)"(_slot: BigNumberish, _value: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setTokenLocking(_tokenLockingAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setTokenLocking(address)"(_tokenLockingAddress: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setupRegistrar(_ens: string, _rootNode: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setupRegistrar(address,bytes32)"(_ens: string, _rootNode: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        stakeForMining(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "stakeForMining(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        startNextCycle(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "startNextCycle()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        startTokenAuction(_token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "startTokenAuction(address)"(_token: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "supportsInterface(bytes4)"(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        uninstallExtension(_extensionId: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "uninstallExtension(bytes32)"(_extensionId: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        unstakeForMining(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "unstakeForMining(uint256)"(_amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        updateColonyOrbitDB(_orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "updateColonyOrbitDB(string)"(_orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        updateUserOrbitDB(_orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "updateUserOrbitDB(string)"(_orbitdb: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        upgradeExtension(_extensionId: BytesLike, _newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "upgradeExtension(bytes32,uint256)"(_extensionId: BytesLike, _newVersion: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
    };
}
