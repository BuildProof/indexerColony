import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IVotingReputation, IVotingReputationInterface } from "../IVotingReputation.js";
export declare class IVotingReputation__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "userAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address payable";
            readonly name: "relayerAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }];
        readonly name: "MetaTransactionExecuted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "motionId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "creator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "domainId";
            readonly type: "uint256";
        }];
        readonly name: "MotionCreated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "motionId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "escalator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "domainId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "newDomainId";
            readonly type: "uint256";
        }];
        readonly name: "MotionEscalated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "motionId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "eventIndex";
            readonly type: "uint256";
        }];
        readonly name: "MotionEventSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "motionId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "action";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "executed";
            readonly type: "bool";
        }];
        readonly name: "MotionFinalized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "motionId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "staker";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "vote";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "MotionRewardClaimed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "motionId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "staker";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "vote";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "MotionStaked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "motionId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "vote";
            readonly type: "uint256";
        }];
        readonly name: "MotionVoteRevealed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "motionId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "voter";
            readonly type: "address";
        }];
        readonly name: "MotionVoteSubmitted";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_permissionDomainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_childSkillIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_staker";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_vote";
            readonly type: "uint256";
        }];
        readonly name: "claimMisalignedReward";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_permissionDomainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_childSkillIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_staker";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_vote";
            readonly type: "uint256";
        }];
        readonly name: "claimReward";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_domainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_childSkillIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_altTarget";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_action";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_key";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_value";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_branchMask";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_siblings";
            readonly type: "bytes32[]";
        }];
        readonly name: "createMotion";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_deprecated";
            readonly type: "bool";
        }];
        readonly name: "deprecate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_newDomainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_childSkillIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_key";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_value";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_branchMask";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_siblings";
            readonly type: "bytes32[]";
        }];
        readonly name: "escalateMotion";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "userAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sigR";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sigS";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint8";
            readonly name: "sigV";
            readonly type: "uint8";
        }];
        readonly name: "executeMetaTransaction";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }];
        readonly name: "failingExecutionAllowed";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_allowed";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }];
        readonly name: "finalizeMotion";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }];
        readonly name: "finalizeMotionWithoutFailure";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "finishUpgrade";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_action";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_altTarget";
            readonly type: "address";
        }];
        readonly name: "getActionSummary";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes4";
                readonly name: "sig";
                readonly type: "bytes4";
            }, {
                readonly internalType: "uint256";
                readonly name: "domainSkillId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "expenditureId";
                readonly type: "uint256";
            }];
            readonly internalType: "struct VotingReputationDataTypes.ActionSummary";
            readonly name: "_summary";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_sig";
            readonly type: "bytes4";
        }];
        readonly name: "getCapabilityRoles";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getColony";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDeprecated";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getEscalationPeriod";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_period";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_structHash";
            readonly type: "bytes32";
        }];
        readonly name: "getExpenditureMotionCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_count";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_expenditureId";
            readonly type: "uint256";
        }];
        readonly name: "getExpenditureMotionLock";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_expenditureId";
            readonly type: "uint256";
        }];
        readonly name: "getExpenditurePastVote";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_vote";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_slotSignature";
            readonly type: "bytes32";
        }];
        readonly name: "getExpenditurePastVotes_DEPRECATED";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_vote";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getMaxVoteFraction";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_fraction";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "userAddress";
            readonly type: "address";
        }];
        readonly name: "getMetatransactionNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nonce";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }];
        readonly name: "getMotion";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64[3]";
                readonly name: "events";
                readonly type: "uint64[3]";
            }, {
                readonly internalType: "bytes32";
                readonly name: "rootHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "domainId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "skillId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "skillRep";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "repSubmitted";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "paidVoterComp";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256[2]";
                readonly name: "pastVoterComp";
                readonly type: "uint256[2]";
            }, {
                readonly internalType: "uint256[2]";
                readonly name: "stakes";
                readonly type: "uint256[2]";
            }, {
                readonly internalType: "uint256[2]";
                readonly name: "votes";
                readonly type: "uint256[2]";
            }, {
                readonly internalType: "bool";
                readonly name: "escalated";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "finalized";
                readonly type: "bool";
            }, {
                readonly internalType: "address";
                readonly name: "altTarget";
                readonly type: "address";
            }, {
                readonly internalType: "bytes4";
                readonly name: "sig";
                readonly type: "bytes4";
            }, {
                readonly internalType: "bytes";
                readonly name: "action";
                readonly type: "bytes";
            }];
            readonly internalType: "struct VotingReputationDataTypes.Motion";
            readonly name: "_motion";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getMotionCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_count";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }];
        readonly name: "getMotionState";
        readonly outputs: readonly [{
            readonly internalType: "enum VotingReputationDataTypes.MotionState";
            readonly name: "_motionState";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRevealPeriod";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_period";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_staker";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_vote";
            readonly type: "uint256";
        }];
        readonly name: "getStake";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_stake";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getStakePeriod";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_period";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_staker";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_vote";
            readonly type: "uint256";
        }];
        readonly name: "getStakerReward";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_reward";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_penalty";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getSubmitPeriod";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_period";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTotalStakeFraction";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_fraction";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getUserMinStakeFraction";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_fraction";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_voterRep";
            readonly type: "uint256";
        }];
        readonly name: "getVoterReward";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_reward";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getVoterRewardFraction";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_fraction";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_voterRep";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_voterAddress";
            readonly type: "address";
        }];
        readonly name: "getVoterRewardRange";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_rewardMin";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_rewardMax";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "identifier";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_totalStakeFraction";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_voterRewardFraction";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_userMinStakeFraction";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_maxVoteFraction";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_stakePeriod";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_submitPeriod";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_revealPeriod";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_escalationPeriod";
            readonly type: "uint256";
        }];
        readonly name: "initialise";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_colony";
            readonly type: "address";
        }];
        readonly name: "install";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "results";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_salt";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_vote";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_key";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_value";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_branchMask";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_siblings";
            readonly type: "bytes32[]";
        }];
        readonly name: "revealVote";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_permissionDomainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_childSkillIndex";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_vote";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_key";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_value";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_branchMask";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_siblings";
            readonly type: "bytes32[]";
        }];
        readonly name: "stakeMotion";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_motionId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_voteSecret";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_key";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_value";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_branchMask";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_siblings";
            readonly type: "bytes32[]";
        }];
        readonly name: "submitVote";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "uninstall";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): IVotingReputationInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IVotingReputation;
}
