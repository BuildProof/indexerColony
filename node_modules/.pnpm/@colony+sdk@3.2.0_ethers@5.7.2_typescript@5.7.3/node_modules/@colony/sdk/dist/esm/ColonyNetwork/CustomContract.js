import { Contract } from 'ethers';
import CustomTxCreator from '../TxCreator/CustomTxCreator.js';
export class CustomContract {
    abi;
    contract;
    address;
    config;
    /**
     * Creates a new instance of a custom contract
     *
     * This is your main entry point to talk to the Colony Network Smart Contracts.
     * From here you should be able to instantiate all the required instances for Colonies and their extensions.
     *
     * @param address - Address of the deployed contract
     * @param abi - JSON ABI of the contract
     * @param config - An instance of a ContractConfig (mind: _not_ ContractOptions!)
     * @returns A CustomContract instance
     */
    constructor(address, abi, config) {
        this.abi = abi;
        this.address = address;
        this.config = config;
        // We do a little bit of casting to make ethers happy with the abitype types
        this.contract = new Contract(address, this.abi, this.config.signerOrProvider);
    }
    /**
     * Creates a new {@link CustomTxCreator} for custom, permissioned transactions or metatransactions
     *
     * @param method - The transaction method to execute on the contract
     * @param args - The arguments for the method
     * @param eventData - A function that extracts the relevant event data from the {@link ContractReceipt}
     * @param txConfig - More configuration options, like {@link MetadataType} if the event contains metadata or if methods are unsupported
     * @returns A {@link CustomTxCreator}
     */
    createTxCreator(method, args, eventData, txConfig) {
        return new CustomTxCreator({
            config: this.config,
            contract: this.contract,
            method,
            args,
            eventData,
            txConfig,
        });
    }
    /**
     * Read a contract value
     *
     * @param method - The pure/view method to read from the contract
     * @param args - The arguments for the method
     * @returns A promise resolving into the specific type for the contract return value
     */
    async read(method, args) {
        // A little typecasting to make ethers happy
        const customArgs = args;
        const contract = this.contract;
        const result = contract[method](...customArgs);
        return result;
    }
}
