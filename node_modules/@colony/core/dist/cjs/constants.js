"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Extension = exports.ColonyRole = exports.FundingPotAssociatedType = exports.DecisionMotionCode = exports.MotionState = exports.Id = exports.Tokens = exports.UserLabelSuffix = exports.ColonyLabelSuffix = exports.ColonyRpcEndpoint = exports.MetaTxBroadCasterEndpoint = exports.ReputationOracleEndpoint = exports.ColonyNetworkAddress = exports.NetworkId = exports.Network = void 0;
/**
 * Supported Ethereum networks. Use `Custom` if you'd like to bring your own deployment (e.g. local)
 */
var Network;
(function (Network) {
    /** Ethereum Mainnet */
    Network["Mainnet"] = "Mainnet";
    /** Use this to specify an own main ColonyNetwork address in the options */
    Network["Custom"] = "Custom";
    /** Gnosis chain */
    Network["Gnosis"] = "Xdai";
    /** Goerli testnet */
    Network["Goerli"] = "Goerli";
    /** Gnosis chain (alias) */
    Network["Xdai"] = "Xdai";
    /** Gnosis chain custom fork */
    Network["XdaiQa"] = "XdaiQa";
    /** Arbitrum One Mainnet */
    Network["ArbitrumOne"] = "ArbitrumOne";
    /** Arbitrum Testnet */
    Network["ArbitrumSepolia"] = "ArbitrumSepolia";
})(Network || (exports.Network = Network = {}));
var NetworkId;
(function (NetworkId) {
    /** Use this to specify an own main ColonyNetwork address in the options */
    NetworkId[NetworkId["Custom"] = 0] = "Custom";
    /** Ethereum Mainnet */
    NetworkId[NetworkId["Mainnet"] = 1] = "Mainnet";
    /** Goerli testnet */
    NetworkId[NetworkId["Goerli"] = 5] = "Goerli";
    /** Gnosis chain */
    NetworkId[NetworkId["Gnosis"] = 100] = "Gnosis";
    /** Gnosis chain (alias) */
    NetworkId[NetworkId["Xdai"] = 100] = "Xdai";
    /** Gnosis chain custom fork */
    NetworkId[NetworkId["XdaiQa"] = 100] = "XdaiQa";
    /** Arbitrum Testnet */
    NetworkId[NetworkId["ArbitrumSepolia"] = 421614] = "ArbitrumSepolia";
    /** Arbitrum One Mainnet */
    NetworkId[NetworkId["ArbitrumOne"] = 42161] = "ArbitrumOne";
})(NetworkId || (exports.NetworkId = NetworkId = {}));
/**
 * Addresses of the deployed ColonyNetwork EtherRouter contracts in all networks
 */
var ColonyNetworkAddress;
(function (ColonyNetworkAddress) {
    /** The ColonyNetwork EtherRouter address on mainnet */
    ColonyNetworkAddress["Mainnet"] = "0x5346D0f80e2816FaD329F2c140c870ffc3c3E2Ef";
    /** The ColonyNetwork EtherRouter address on the Görli testnet */
    ColonyNetworkAddress["Goerli"] = "0x79073fc2117dD054FCEdaCad1E7018C9CbE3ec0B";
    /** The ColonyNetwork EtherRouter address on Gnosis chain */
    ColonyNetworkAddress["Xdai"] = "0x78163f593D1Fa151B4B7cacD146586aD2b686294";
    /** The ColonyNetwork EtherRouter fork address on Gnosis chain */
    ColonyNetworkAddress["XdaiQa"] = "0x78163f593D1Fa151B4B7cacD146586aD2b686294";
    /** Placeholder for a locally deployed EtherRouter address */
    ColonyNetworkAddress["Custom"] = "";
    /** The ColonyNetwork EtherRouter address on Arbitrum One */
    ColonyNetworkAddress["ArbitrumOne"] = "0xcccccdcc0ccf6c708d860e19353c5f9a49accccc";
    /** The ColonyNetwork EtherRouter address on Arbitrum Sepolia testnet */
    ColonyNetworkAddress["ArbitrumSepolia"] = "0x7777494e3d8cce0D3570E21FEf820F9Fee077777";
})(ColonyNetworkAddress || (exports.ColonyNetworkAddress = ColonyNetworkAddress = {}));
/**
 * HTTP endpoint of the official Colony reputation oracle
 */
var ReputationOracleEndpoint;
(function (ReputationOracleEndpoint) {
    ReputationOracleEndpoint["Mainnet"] = "https://colony.io/reputation/mainnet";
    ReputationOracleEndpoint["Goerli"] = "https://colony.io/reputation/goerli";
    ReputationOracleEndpoint["Xdai"] = "https://xdai.colony.io/reputation/xdai";
    ReputationOracleEndpoint["XdaiQa"] = "https://qa-xdai.colony.io/reputation/xdai";
    ReputationOracleEndpoint["Custom"] = "http://localhost:3000";
    ReputationOracleEndpoint["ArbitrumOne"] = "https://app.colony.io/reputation/arbitrum-one";
    ReputationOracleEndpoint["ArbitrumSepolia"] = "https://arbitrum-sepolia.colony.io/reputation/arbitrum-sepolia";
})(ReputationOracleEndpoint || (exports.ReputationOracleEndpoint = ReputationOracleEndpoint = {}));
/**
 * HTTP endpoint of the official Colony MetaTransaction (gasless transaction) broadcaster
 */
var MetaTxBroadCasterEndpoint;
(function (MetaTxBroadCasterEndpoint) {
    /** The metatransaction broadcaster endpoint on mainnet */
    MetaTxBroadCasterEndpoint["Mainnet"] = "";
    /** The metatransaction broadcaster endpoint on the Görli testnet */
    MetaTxBroadCasterEndpoint["Goerli"] = "";
    /** The metatransaction broadcaster endpoint on Gnosis Chain */
    MetaTxBroadCasterEndpoint["Gnosis"] = "https://xdai.colony.io/metatransaction/xdai";
    /** The metatransaction broadcaster endpoint on Gnosis Chain (alias) */
    MetaTxBroadCasterEndpoint["Xdai"] = "https://xdai.colony.io/metatransaction/xdai";
    /** The metatransaction broadcaster endpoint on Gnosis Chain (QA environment) */
    MetaTxBroadCasterEndpoint["XdaiQa"] = "https://xdai.colony.io/metatransaction/xdai";
    /** The metatransaction broadcaster endpoint for a custom network */
    MetaTxBroadCasterEndpoint["Custom"] = "";
    /** The metatransaction broadcaster endpoint on Arbitrum One */
    MetaTxBroadCasterEndpoint["ArbitrumOne"] = "https://app.colony.io/metatransaction/arbitrum-one";
    /** The metatransaction broadcaster endpoint on Arbitrum Sepolia testnet */
    MetaTxBroadCasterEndpoint["ArbitrumSepolia"] = "https://arbitrum-sepolia.colony.io/metatransaction/arbitrum-sepolia";
})(MetaTxBroadCasterEndpoint || (exports.MetaTxBroadCasterEndpoint = MetaTxBroadCasterEndpoint = {}));
/**
 * Official Colony RPC2 endpoint (node)
 */
var ColonyRpcEndpoint;
(function (ColonyRpcEndpoint) {
    /** Colony's own RPC2 endpoint for Mainnet */
    ColonyRpcEndpoint["Mainnet"] = "";
    /** Colony's own RPC2 endpoint for Goerli testnet */
    ColonyRpcEndpoint["Goerli"] = "";
    /** Colony's own RPC2 endpoint for Gnosis chain */
    ColonyRpcEndpoint["Gnosis"] = "https://xdai.colony.io/rpc/";
    /** Colony's own RPC2 endpoint for Gnosis chain (alias) */
    ColonyRpcEndpoint["Xdai"] = "https://xdai.colony.io/rpc/";
    /** Colony's own RPC2 endpoint for Gnosis chain (QA environment) */
    ColonyRpcEndpoint["XdaiQa"] = "https://xdai.colony.io/rpc/";
    /** Colony's own RPC2 endpoint for a custom network */
    ColonyRpcEndpoint["Custom"] = "";
    /** Colony's own RPC2 endpoint for Arbitrum One */
    ColonyRpcEndpoint["ArbitrumOne"] = "https://app.colony.io/public-rpc/";
    /** Colony's own RPC2 endpoint for Arbitrum Sepolia testnet */
    ColonyRpcEndpoint["ArbitrumSepolia"] = "https://arbitrum-sepolia.colony.io/public-rpc/";
})(ColonyRpcEndpoint || (exports.ColonyRpcEndpoint = ColonyRpcEndpoint = {}));
/**
 * ENS label suffix for Colonies
 */
var ColonyLabelSuffix;
(function (ColonyLabelSuffix) {
    ColonyLabelSuffix["Mainnet"] = ".colony.joincolony.eth";
    ColonyLabelSuffix["Goerli"] = ".colony.joincolony.test";
    ColonyLabelSuffix["Gnosis"] = ".colony.joincolony.colonyxdai";
    ColonyLabelSuffix["Xdai"] = ".colony.joincolony.colonyxdai";
    ColonyLabelSuffix["XdaiQa"] = ".colony.joincolony.colonyxdai";
    ColonyLabelSuffix["Custom"] = ".colony.joincolony.test";
    ColonyLabelSuffix["ArbitrumOne"] = ".colony.joincolony.arbitrum";
    ColonyLabelSuffix["ArbitrumSepolia"] = ".colony.joincolony.sepolia";
})(ColonyLabelSuffix || (exports.ColonyLabelSuffix = ColonyLabelSuffix = {}));
/**
 * ENS label suffix for users
 */
var UserLabelSuffix;
(function (UserLabelSuffix) {
    UserLabelSuffix["Mainnet"] = ".user.joincolony.eth";
    UserLabelSuffix["Goerli"] = ".user.joincolony.test";
    UserLabelSuffix["Gnosis"] = ".user.joincolony.colonyxdai";
    UserLabelSuffix["Xdai"] = ".user.joincolony.colonyxdai";
    UserLabelSuffix["XdaiQa"] = ".user.joincolony.colonyxdai";
    UserLabelSuffix["Custom"] = ".user.joincolony.test";
    UserLabelSuffix["ArbitrumOne"] = ".user.joincolony.arbitrum";
    UserLabelSuffix["ArbitrumSepolia"] = ".user.joincolony.sepolia";
})(UserLabelSuffix || (exports.UserLabelSuffix = UserLabelSuffix = {}));
/**
 * Shortcut to common token addresses
 */
// eslint-disable-next-line @typescript-eslint/no-namespace
var Tokens;
(function (Tokens) {
    /** Tokens deployed on Mainnet */
    let Mainnet;
    (function (Mainnet) {
        /** ETH on Mainnet */
        Mainnet["ETH"] = "0x0000000000000000000000000000000000000000";
        /** CLNY on Mainnet */
        Mainnet["CLNY"] = "0x3E828ac5C480069D4765654Fb4b8733b910b13b2";
        /** USDC on Mainnet */
        Mainnet["USDC"] = "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
    })(Mainnet = Tokens.Mainnet || (Tokens.Mainnet = {}));
    /** Tokens deployed on Gnosis Chain */
    let Gnosis;
    (function (Gnosis) {
        /** XDAI on Gnosis Chain */
        Gnosis["XDAI"] = "0x0000000000000000000000000000000000000000";
        /** CLNY on Gnosis Chain */
        Gnosis["CLNY"] = "0xc9B6218AffE8Aba68a13899Cbf7cF7f14DDd304C";
        /** USDC on Gnosis Chain */
        Gnosis["USDC"] = "0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83";
    })(Gnosis = Tokens.Gnosis || (Tokens.Gnosis = {}));
    /** Tokens deployed on Arbitrum One */
    let ArbitrumOne;
    (function (ArbitrumOne) {
        /** ETH on Arbitrum One */
        ArbitrumOne["ETH"] = "0x0000000000000000000000000000000000000000";
        /** CLNY on Arbitrum One */
        ArbitrumOne["CLNY"] = "0xcccccdcc0ccf6c708d860e19353c5f9a49accccc";
        /** USDC on Arbitrum One */
        ArbitrumOne["USDC"] = "0xaf88d065e77c8cC2239327C5EDb3A432268e5831";
    })(ArbitrumOne = Tokens.ArbitrumOne || (Tokens.ArbitrumOne = {}));
})(Tokens || (exports.Tokens = Tokens = {}));
/**
 * Shortcuts to certain IDs within Colony
 */
var Id;
(function (Id) {
    /** The id of the root-domain in all colonies */
    Id[Id["RootDomain"] = 1] = "RootDomain";
    /** Alias of RootDomain */
    Id[Id["RootTeam"] = 1] = "RootTeam";
    /** The id of the root fundig pot in all colonies */
    Id[Id["RootPot"] = 1] = "RootPot";
    /** Ignore the skill id for this method (global skill 0) */
    Id[Id["SkillIgnore"] = 0] = "SkillIgnore";
})(Id || (exports.Id = Id = {}));
/**
 * These are the various states a Motion might find itself in
 */
var MotionState;
(function (MotionState) {
    MotionState[MotionState["Null"] = 0] = "Null";
    MotionState[MotionState["Staking"] = 1] = "Staking";
    MotionState[MotionState["Submit"] = 2] = "Submit";
    MotionState[MotionState["Reveal"] = 3] = "Reveal";
    MotionState[MotionState["Closed"] = 4] = "Closed";
    MotionState[MotionState["Finalizable"] = 5] = "Finalizable";
    MotionState[MotionState["Finalized"] = 6] = "Finalized";
    MotionState[MotionState["Failed"] = 7] = "Failed";
})(MotionState || (exports.MotionState = MotionState = {}));
/**
 * Identifies a motion as a decision
 *
 * Usually there's no need to use this directly.
 */
exports.DecisionMotionCode = '0x12345678';
/**
 * Funding pots can have different types in a colony.
 * See [here](https://github.com/JoinColony/colonyNetwork/blob/develop/docs/_TLDR_Pots.md#types-of-pots) for more details
 */
var FundingPotAssociatedType;
(function (FundingPotAssociatedType) {
    FundingPotAssociatedType[FundingPotAssociatedType["Unassigned"] = 0] = "Unassigned";
    FundingPotAssociatedType[FundingPotAssociatedType["Domain"] = 1] = "Domain";
    FundingPotAssociatedType[FundingPotAssociatedType["Task"] = 2] = "Task";
    FundingPotAssociatedType[FundingPotAssociatedType["Payment"] = 3] = "Payment";
    FundingPotAssociatedType[FundingPotAssociatedType["Expenditure"] = 4] = "Expenditure";
})(FundingPotAssociatedType || (exports.FundingPotAssociatedType = FundingPotAssociatedType = {}));
/**
 * Available roles in the colonyNetwork. Find out more here: https://github.com/JoinColony/colonyNetwork/blob/develop/docs/_Docs_Permissions.md
 */
var ColonyRole;
(function (ColonyRole) {
    ColonyRole[ColonyRole["Recovery"] = 0] = "Recovery";
    ColonyRole[ColonyRole["Root"] = 1] = "Root";
    ColonyRole[ColonyRole["Arbitration"] = 2] = "Arbitration";
    ColonyRole[ColonyRole["Architecture"] = 3] = "Architecture";
    /**
     * @deprecated
     * The `ArchitectureSubdomain` role has been deprecated and should not be used */
    ColonyRole[ColonyRole["ArchitectureSubdomain"] = 4] = "ArchitectureSubdomain";
    ColonyRole[ColonyRole["Funding"] = 5] = "Funding";
    ColonyRole[ColonyRole["Administration"] = 6] = "Administration";
    /** @internal */
    ColonyRole[ColonyRole["LAST_ROLE"] = 7] = "LAST_ROLE";
})(ColonyRole || (exports.ColonyRole = ColonyRole = {}));
/**
 * Extension contract names
 */
var Extension;
(function (Extension) {
    Extension["FundingQueue"] = "FundingQueue";
    // The VotingReputation contract was refactored in flwss3 to also be an interface (akin to IColony)
    Extension["IVotingReputation"] = "IVotingReputation";
    Extension["MultisigPermissions"] = "MultisigPermissions";
    Extension["OneTxPayment"] = "OneTxPayment";
    Extension["ReputationBootstrapper"] = "ReputationBootstrapper";
    Extension["StagedExpenditure"] = "StagedExpenditure";
    Extension["StakedExpenditure"] = "StakedExpenditure";
    Extension["StreamingPayments"] = "StreamingPayments";
    Extension["TokenSupplier"] = "TokenSupplier";
    Extension["VotingReputation"] = "VotingReputation";
})(Extension || (exports.Extension = Extension = {}));
