import type { Log, Provider } from '@ethersproject/abstract-provider';
import type { Interface } from '@ethersproject/abi';
import { BigNumber, type BigNumberish, utils } from 'ethers';
import { ColonyRole, type Extension } from '../constants.js';
import { type CommonColony, type CommonNetwork } from './types.js';
import { type ContractVersion } from '../versions/index.js';
import { type SignerOrProvider } from '../types.js';
/**
 * Check if two addresses are equal
 *
 * Addresses can be displayed using a checksum format which contains uppercase and lowercase characters.
 * This function can compare addresses in either format
 *
 * @param a - Left hand side address
 * @param b - Right hand side address
 *
 * @returns Whether a and b are the same address
 */
export declare const addressesAreEqual: (a: string, b: string) => boolean;
/**
 * Convert any number to ETH (remove 18 zeros)
 *
 * @example
 * ```typescript
 * import { toEth } from '@colony/sdk';
 *
 * const oneEther = BigNumber.from("1000000000000000000");
 * console.log(toEth(oneEther)); // 1.0
 * ```
 */
export declare const toEth: (num: BigNumberish) => string;
/**
 * Convert any number to wei (add 18 zeros)
 *
 * @example
 * ```typescript
 * import { toWei } from '@colony/sdk';
 *
 * const oneEther = '1.0';
 * console.log(toWei(oneEther)); // { BigNumber: "1000000000000000000" }
 * ```
 */
export declare const toWei: (num: string) => BigNumber;
/**
 * Short-hand method to convert a number to wei using JS tagged template strings
 *
 * See also here: http://tc39wiki.calculist.org/es6/template-strings/
 *
 * @remarks
 * This is only useful in contexts where the number is hard-coded (e.g. examples)
 *
 * @example
 * ```typescript
 * import { w } from '@colony/sdk';
 *
 * console.log(w`1.0`); // { BigNumber: "1000000000000000000" }
 * ```
 */
export declare const w: (str: TemplateStringsArray) => BigNumber;
/**
 * Converts Colony Roles to hex. Result is a binary number where the bits are one and the place of the role index. Then converted to hexadecimal, then padded with zeros to a lenghtof 64
 *
 * @example
 * ```typescript
 * // Binary representation: 0b000101010
 * const roles = colonyRoles2Hex([ColonyRole.Root, ColonyRole.Architecture, ColonyRole.Funding]); // '0x000000000000000000000000000000000000000000000000000000000000002a'
 * ```
 *
 * @param roles - An array of Colony roles
 *
 * @returns A hexadecimal string
 */
export declare const colonyRoles2Hex: (roles: ColonyRole[]) => string;
/**
 * Converts a role hex string (typically returned by a Colony contract) to Colony Roles.
 *
 * @example
 * ```typescript
 * // Binary representation: 0b000101010
 * const roles = hex2ColonyRoles('0x2a'); // [1, 3, 5]
 * ```
 *
 * @param hexStr - A (probably padded) hexadecimal string
 *
 * @returns An array of Colony roles
 */
export declare const hex2ColonyRoles: (hexStr: string) => ColonyRole[];
/**
 * Get the child index for a domain inside its corresponding skills parent children array
 *
 * E.g. (the values *will* differ for you!):
 * domainId = 1
 * corresponding skillId = 2
 * parent of skillId 2:
 * ```
 * {
 *  // ...
 *  children: [2]
 * }
 * ```
 * childSkillIndex would be 0 in this case (0-position in children array)
 *
 * @param network - A ColonyNetwork contract
 * @param colony - A Colony contract
 * @param parentDomainId - id of parent domain
 * @param domainId - id of the domain
 *
 * @returns Index in the `children` array (see above)
 */
export declare const getChildIndex: (network: CommonNetwork, colony: CommonColony, parentDomainId: BigNumberish, domainId: BigNumberish) => Promise<BigNumber>;
/**
 * Hashes to identify the colony extension contracts
 *
 * @param extension - A valid Extension name
 *
 * @returns A hash to identify the extension on the contracts
 */
export declare const getExtensionHash: (extension: Extension) => string;
/**
 * Get the associated domain for a pot id
 *
 * @remarks pots can be associated with different types, like domains, payments or tasks
 * See [[`FundingPotAssociatedType`]] for details
 *
 * @param client - Any Colony contract
 * @param potId - The funding pot id
 *
 * @returns The associated domainId
 */
export declare const getPotDomain: (colony: CommonColony, potId: BigNumberish) => Promise<BigNumberish>;
/**
 * Get the JavaScript timestamp for a block
 *
 * @param provider - ethers compatible Provider
 * @param blockHash - Hash of block to get time for
 *
 * @returns block timestamp in ms
 */
export declare const getBlockTime: (blockHash: string, provider: Provider) => Promise<number>;
/**
 * Get the deployed contract's version
 *
 * Only works with compatible contracts, i.e. Colony contracts or their extensions.
 *
 * @param address - Address of the deployed contract
 * @param signerOrProvider - ethers compatible Signer or Provider
 *
 * @returns The version number of the contract
 */
export declare const getContractVersion: (address: string, signerOrProvider: SignerOrProvider) => Promise<ContractVersion>;
/**
 * Try to parse an array of logs with a given interface
 *
 * Will filter out logs that can't be parsed with the given interface
 *
 * @param logs - Array of log entries (usually from a {@link ContractReceipt})
 * @param iface - Ethers compatible contract interface
 *
 * @returns A list of parsed log entries (events)
 */
export declare const parseLogs: (logs: Log[], iface: Interface) => utils.LogDescription[];
