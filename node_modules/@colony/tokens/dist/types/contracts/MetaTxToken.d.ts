import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common.js";
export interface MetaTxTokenInterface extends utils.Interface {
    functions: {
        "DOMAIN_SEPARATOR()": FunctionFragment;
        "PERMIT_TYPEHASH()": FunctionFragment;
        "allowance(address,address)": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "authority()": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "burn(uint256)": FunctionFragment;
        "burn(address,uint256)": FunctionFragment;
        "decimals()": FunctionFragment;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
        "getMetatransactionNonce(address)": FunctionFragment;
        "locked()": FunctionFragment;
        "mint(address,uint256)": FunctionFragment;
        "mint(uint256)": FunctionFragment;
        "name()": FunctionFragment;
        "nonces(address)": FunctionFragment;
        "owner()": FunctionFragment;
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
        "setAuthority(address)": FunctionFragment;
        "setOwner(address)": FunctionFragment;
        "symbol()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transfer(address,uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "unlock()": FunctionFragment;
        "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DOMAIN_SEPARATOR" | "DOMAIN_SEPARATOR()" | "PERMIT_TYPEHASH" | "PERMIT_TYPEHASH()" | "allowance" | "allowance(address,address)" | "approve" | "approve(address,uint256)" | "authority" | "authority()" | "balanceOf" | "balanceOf(address)" | "burn(uint256)" | "burn(address,uint256)" | "decimals" | "decimals()" | "executeMetaTransaction" | "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)" | "getMetatransactionNonce" | "getMetatransactionNonce(address)" | "locked" | "locked()" | "mint(address,uint256)" | "mint(uint256)" | "name" | "name()" | "nonces" | "nonces(address)" | "owner" | "owner()" | "permit" | "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)" | "setAuthority" | "setAuthority(address)" | "setOwner" | "setOwner(address)" | "symbol" | "symbol()" | "totalSupply" | "totalSupply()" | "transfer" | "transfer(address,uint256)" | "transferFrom" | "transferFrom(address,address,uint256)" | "unlock" | "unlock()" | "verify" | "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"): FunctionFragment;
    encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
    encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR()", values?: undefined): string;
    encodeFunctionData(functionFragment: "PERMIT_TYPEHASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "PERMIT_TYPEHASH()", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowance", values: [string, string]): string;
    encodeFunctionData(functionFragment: "allowance(address,address)", values: [string, string]): string;
    encodeFunctionData(functionFragment: "approve", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "approve(address,uint256)", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "authority", values?: undefined): string;
    encodeFunctionData(functionFragment: "authority()", values?: undefined): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(functionFragment: "balanceOf(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "burn(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "burn(address,uint256)", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decimals()", values?: undefined): string;
    encodeFunctionData(functionFragment: "executeMetaTransaction", values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)", values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getMetatransactionNonce", values: [string]): string;
    encodeFunctionData(functionFragment: "getMetatransactionNonce(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "locked", values?: undefined): string;
    encodeFunctionData(functionFragment: "locked()", values?: undefined): string;
    encodeFunctionData(functionFragment: "mint(address,uint256)", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "mint(uint256)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "name()", values?: undefined): string;
    encodeFunctionData(functionFragment: "nonces", values: [string]): string;
    encodeFunctionData(functionFragment: "nonces(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
    encodeFunctionData(functionFragment: "permit", values: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)", values: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "setAuthority", values: [string]): string;
    encodeFunctionData(functionFragment: "setAuthority(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
    encodeFunctionData(functionFragment: "setOwner(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply()", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transfer(address,uint256)", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom(address,address,uint256)", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
    encodeFunctionData(functionFragment: "unlock()", values?: undefined): string;
    encodeFunctionData(functionFragment: "verify", values: [
        string,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike,
        BytesLike,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)", values: [
        string,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike,
        BytesLike,
        BigNumberish
    ]): string;
    decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PERMIT_TYPEHASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PERMIT_TYPEHASH()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance(address,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "authority()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeMetaTransaction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetatransactionNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMetatransactionNonce(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "locked()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonces(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAuthority", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAuthority(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOwner(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom(address,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unlock()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)", data: BytesLike): Result;
    events: {
        "Approval(address,address,uint256)": EventFragment;
        "Burn(address,uint256)": EventFragment;
        "LogSetAuthority(address)": EventFragment;
        "LogSetOwner(address)": EventFragment;
        "MetaTransactionExecuted(address,address,bytes)": EventFragment;
        "Mint(address,uint256)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Approval(address,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Burn(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogSetAuthority(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogSetOwner(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted(address,address,bytes)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Mint(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer(address,address,uint256)"): EventFragment;
}
export interface ApprovalEventObject {
    src: string;
    guy: string;
    wad: BigNumber;
}
export type ApprovalEvent = TypedEvent<[
    string,
    string,
    BigNumber
], ApprovalEventObject>;
export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
export interface BurnEventObject {
    guy: string;
    wad: BigNumber;
}
export type BurnEvent = TypedEvent<[string, BigNumber], BurnEventObject>;
export type BurnEventFilter = TypedEventFilter<BurnEvent>;
export interface LogSetAuthorityEventObject {
    authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<[
    string
], LogSetAuthorityEventObject>;
export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;
export interface LogSetOwnerEventObject {
    owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;
export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;
export interface MetaTransactionExecutedEventObject {
    userAddress: string;
    relayerAddress: string;
    payload: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<[
    string,
    string,
    string
], MetaTransactionExecutedEventObject>;
export type MetaTransactionExecutedEventFilter = TypedEventFilter<MetaTransactionExecutedEvent>;
export interface MintEventObject {
    guy: string;
    wad: BigNumber;
}
export type MintEvent = TypedEvent<[string, BigNumber], MintEventObject>;
export type MintEventFilter = TypedEventFilter<MintEvent>;
export interface TransferEventObject {
    src: string;
    dst: string;
    wad: BigNumber;
}
export type TransferEvent = TypedEvent<[
    string,
    string,
    BigNumber
], TransferEventObject>;
export type TransferEventFilter = TypedEventFilter<TransferEvent>;
export interface MetaTxToken extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MetaTxTokenInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;
        "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;
        PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;
        "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;
        allowance(src: string, guy: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        "allowance(address,address)"(src: string, guy: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        approve(guy: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "approve(address,uint256)"(guy: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        authority(overrides?: CallOverrides): Promise<[string]>;
        "authority()"(overrides?: CallOverrides): Promise<[string]>;
        balanceOf(src: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        "balanceOf(address)"(src: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        "burn(uint256)"(wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "burn(address,uint256)"(guy: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        decimals(overrides?: CallOverrides): Promise<[number]>;
        "decimals()"(overrides?: CallOverrides): Promise<[number]>;
        executeMetaTransaction(_user: string, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(_user: string, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        getMetatransactionNonce(_user: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        "getMetatransactionNonce(address)"(_user: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        locked(overrides?: CallOverrides): Promise<[boolean]>;
        "locked()"(overrides?: CallOverrides): Promise<[boolean]>;
        "mint(address,uint256)"(guy: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "mint(uint256)"(wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        name(overrides?: CallOverrides): Promise<[string]>;
        "name()"(overrides?: CallOverrides): Promise<[string]>;
        nonces(_user: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        "nonces(address)"(_user: string, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        "owner()"(overrides?: CallOverrides): Promise<[string]>;
        permit(owner: string, spender: string, value: BigNumberish, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(owner: string, spender: string, value: BigNumberish, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setAuthority(authority_: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setAuthority(address)"(authority_: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setOwner(owner_: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setOwner(address)"(owner_: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        symbol(overrides?: CallOverrides): Promise<[string]>;
        "symbol()"(overrides?: CallOverrides): Promise<[string]>;
        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;
        transfer(dst: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "transfer(address,uint256)"(dst: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        transferFrom(src: string, dst: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "transferFrom(address,address,uint256)"(src: string, dst: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        unlock(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "unlock()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        verify(_user: string, _nonce: BigNumberish, _chainId: BigNumberish, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;
        "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(_user: string, _nonce: BigNumberish, _chainId: BigNumberish, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;
    };
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;
    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;
    allowance(src: string, guy: string, overrides?: CallOverrides): Promise<BigNumber>;
    "allowance(address,address)"(src: string, guy: string, overrides?: CallOverrides): Promise<BigNumber>;
    approve(guy: string, wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "approve(address,uint256)"(guy: string, wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    authority(overrides?: CallOverrides): Promise<string>;
    "authority()"(overrides?: CallOverrides): Promise<string>;
    balanceOf(src: string, overrides?: CallOverrides): Promise<BigNumber>;
    "balanceOf(address)"(src: string, overrides?: CallOverrides): Promise<BigNumber>;
    "burn(uint256)"(wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "burn(address,uint256)"(guy: string, wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    decimals(overrides?: CallOverrides): Promise<number>;
    "decimals()"(overrides?: CallOverrides): Promise<number>;
    executeMetaTransaction(_user: string, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(_user: string, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    getMetatransactionNonce(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
    "getMetatransactionNonce(address)"(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
    locked(overrides?: CallOverrides): Promise<boolean>;
    "locked()"(overrides?: CallOverrides): Promise<boolean>;
    "mint(address,uint256)"(guy: string, wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "mint(uint256)"(wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    name(overrides?: CallOverrides): Promise<string>;
    "name()"(overrides?: CallOverrides): Promise<string>;
    nonces(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
    "nonces(address)"(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    "owner()"(overrides?: CallOverrides): Promise<string>;
    permit(owner: string, spender: string, value: BigNumberish, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(owner: string, spender: string, value: BigNumberish, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setAuthority(authority_: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setAuthority(address)"(authority_: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setOwner(owner_: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setOwner(address)"(owner_: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    symbol(overrides?: CallOverrides): Promise<string>;
    "symbol()"(overrides?: CallOverrides): Promise<string>;
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;
    transfer(dst: string, wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "transfer(address,uint256)"(dst: string, wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    transferFrom(src: string, dst: string, wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "transferFrom(address,address,uint256)"(src: string, dst: string, wad: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    unlock(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "unlock()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    verify(_user: string, _nonce: BigNumberish, _chainId: BigNumberish, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(_user: string, _nonce: BigNumberish, _chainId: BigNumberish, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
        "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;
        PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;
        "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;
        allowance(src: string, guy: string, overrides?: CallOverrides): Promise<BigNumber>;
        "allowance(address,address)"(src: string, guy: string, overrides?: CallOverrides): Promise<BigNumber>;
        approve(guy: string, wad: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        "approve(address,uint256)"(guy: string, wad: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        authority(overrides?: CallOverrides): Promise<string>;
        "authority()"(overrides?: CallOverrides): Promise<string>;
        balanceOf(src: string, overrides?: CallOverrides): Promise<BigNumber>;
        "balanceOf(address)"(src: string, overrides?: CallOverrides): Promise<BigNumber>;
        "burn(uint256)"(wad: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "burn(address,uint256)"(guy: string, wad: BigNumberish, overrides?: CallOverrides): Promise<void>;
        decimals(overrides?: CallOverrides): Promise<number>;
        "decimals()"(overrides?: CallOverrides): Promise<number>;
        executeMetaTransaction(_user: string, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(_user: string, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: CallOverrides): Promise<string>;
        getMetatransactionNonce(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getMetatransactionNonce(address)"(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
        locked(overrides?: CallOverrides): Promise<boolean>;
        "locked()"(overrides?: CallOverrides): Promise<boolean>;
        "mint(address,uint256)"(guy: string, wad: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "mint(uint256)"(wad: BigNumberish, overrides?: CallOverrides): Promise<void>;
        name(overrides?: CallOverrides): Promise<string>;
        "name()"(overrides?: CallOverrides): Promise<string>;
        nonces(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
        "nonces(address)"(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        "owner()"(overrides?: CallOverrides): Promise<string>;
        permit(owner: string, spender: string, value: BigNumberish, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, overrides?: CallOverrides): Promise<void>;
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(owner: string, spender: string, value: BigNumberish, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, overrides?: CallOverrides): Promise<void>;
        setAuthority(authority_: string, overrides?: CallOverrides): Promise<void>;
        "setAuthority(address)"(authority_: string, overrides?: CallOverrides): Promise<void>;
        setOwner(owner_: string, overrides?: CallOverrides): Promise<void>;
        "setOwner(address)"(owner_: string, overrides?: CallOverrides): Promise<void>;
        symbol(overrides?: CallOverrides): Promise<string>;
        "symbol()"(overrides?: CallOverrides): Promise<string>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(dst: string, wad: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        "transfer(address,uint256)"(dst: string, wad: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        transferFrom(src: string, dst: string, wad: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        "transferFrom(address,address,uint256)"(src: string, dst: string, wad: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        unlock(overrides?: CallOverrides): Promise<void>;
        "unlock()"(overrides?: CallOverrides): Promise<void>;
        verify(_user: string, _nonce: BigNumberish, _chainId: BigNumberish, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(_user: string, _nonce: BigNumberish, _chainId: BigNumberish, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "Approval(address,address,uint256)"(src?: string | null, guy?: string | null, wad?: null): ApprovalEventFilter;
        Approval(src?: string | null, guy?: string | null, wad?: null): ApprovalEventFilter;
        "Burn(address,uint256)"(guy?: string | null, wad?: null): BurnEventFilter;
        Burn(guy?: string | null, wad?: null): BurnEventFilter;
        "LogSetAuthority(address)"(authority?: string | null): LogSetAuthorityEventFilter;
        LogSetAuthority(authority?: string | null): LogSetAuthorityEventFilter;
        "LogSetOwner(address)"(owner?: string | null): LogSetOwnerEventFilter;
        LogSetOwner(owner?: string | null): LogSetOwnerEventFilter;
        "MetaTransactionExecuted(address,address,bytes)"(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
        MetaTransactionExecuted(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
        "Mint(address,uint256)"(guy?: string | null, wad?: null): MintEventFilter;
        Mint(guy?: string | null, wad?: null): MintEventFilter;
        "Transfer(address,address,uint256)"(src?: string | null, dst?: string | null, wad?: null): TransferEventFilter;
        Transfer(src?: string | null, dst?: string | null, wad?: null): TransferEventFilter;
    };
    estimateGas: {
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;
        "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;
        PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;
        "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;
        allowance(src: string, guy: string, overrides?: CallOverrides): Promise<BigNumber>;
        "allowance(address,address)"(src: string, guy: string, overrides?: CallOverrides): Promise<BigNumber>;
        approve(guy: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "approve(address,uint256)"(guy: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        authority(overrides?: CallOverrides): Promise<BigNumber>;
        "authority()"(overrides?: CallOverrides): Promise<BigNumber>;
        balanceOf(src: string, overrides?: CallOverrides): Promise<BigNumber>;
        "balanceOf(address)"(src: string, overrides?: CallOverrides): Promise<BigNumber>;
        "burn(uint256)"(wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "burn(address,uint256)"(guy: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<BigNumber>;
        "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;
        executeMetaTransaction(_user: string, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(_user: string, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        getMetatransactionNonce(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
        "getMetatransactionNonce(address)"(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
        locked(overrides?: CallOverrides): Promise<BigNumber>;
        "locked()"(overrides?: CallOverrides): Promise<BigNumber>;
        "mint(address,uint256)"(guy: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "mint(uint256)"(wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        name(overrides?: CallOverrides): Promise<BigNumber>;
        "name()"(overrides?: CallOverrides): Promise<BigNumber>;
        nonces(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
        "nonces(address)"(_user: string, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        "owner()"(overrides?: CallOverrides): Promise<BigNumber>;
        permit(owner: string, spender: string, value: BigNumberish, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(owner: string, spender: string, value: BigNumberish, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setAuthority(authority_: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setAuthority(address)"(authority_: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setOwner(owner_: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setOwner(address)"(owner_: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        symbol(overrides?: CallOverrides): Promise<BigNumber>;
        "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(dst: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "transfer(address,uint256)"(dst: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        transferFrom(src: string, dst: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "transferFrom(address,address,uint256)"(src: string, dst: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        unlock(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "unlock()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        verify(_user: string, _nonce: BigNumberish, _chainId: BigNumberish, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(_user: string, _nonce: BigNumberish, _chainId: BigNumberish, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowance(src: string, guy: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "allowance(address,address)"(src: string, guy: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        approve(guy: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "approve(address,uint256)"(guy: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "authority()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        balanceOf(src: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "balanceOf(address)"(src: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "burn(uint256)"(wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "burn(address,uint256)"(guy: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executeMetaTransaction(_user: string, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(_user: string, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        getMetatransactionNonce(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getMetatransactionNonce(address)"(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "locked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "mint(address,uint256)"(guy: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "mint(uint256)"(wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nonces(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "nonces(address)"(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        permit(owner: string, spender: string, value: BigNumberish, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(owner: string, spender: string, value: BigNumberish, deadline: BigNumberish, v: BigNumberish, r: BytesLike, s: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setAuthority(authority_: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setAuthority(address)"(authority_: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setOwner(owner_: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setOwner(address)"(owner_: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transfer(dst: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "transfer(address,uint256)"(dst: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        transferFrom(src: string, dst: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "transferFrom(address,address,uint256)"(src: string, dst: string, wad: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        unlock(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "unlock()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        verify(_user: string, _nonce: BigNumberish, _chainId: BigNumberish, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "verify(address,uint256,uint256,bytes,bytes32,bytes32,uint8)"(_user: string, _nonce: BigNumberish, _chainId: BigNumberish, _payload: BytesLike, _sigR: BytesLike, _sigS: BytesLike, _sigV: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
