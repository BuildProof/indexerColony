import type { BaseContract, BigNumber, BigNumberish, BytesLike, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common.js";
export interface IColonyNetworkEventsInterface extends utils.Interface {
    functions: {};
    events: {
        "ColonyNetworkInitialised(address)": EventFragment;
        "TokenLockingAddressSet(address)": EventFragment;
        "MiningCycleResolverSet(address)": EventFragment;
        "NetworkFeeInverseSet(uint256)": EventFragment;
        "ColonyVersionAdded(uint256,address)": EventFragment;
        "MetaColonyCreated(address,address,uint256)": EventFragment;
        "ColonyAdded(uint256,address,address)": EventFragment;
        "SkillAdded(uint256,uint256)": EventFragment;
        "AuctionCreated(address,address,uint256)": EventFragment;
        "ReputationMiningInitialised(address)": EventFragment;
        "ReputationMiningCycleComplete(bytes32,uint256)": EventFragment;
        "ReputationRootHashSet(bytes32,uint256,address[],uint256)": EventFragment;
        "UserLabelRegistered(address,bytes32)": EventFragment;
        "ColonyLabelRegistered(address,bytes32)": EventFragment;
        "RecoveryRoleSet(address,bool)": EventFragment;
        "ExtensionAddedToNetwork(bytes32,uint256)": EventFragment;
        "ExtensionDeprecated(bytes32,address,bool)": EventFragment;
        "ExtensionInstalled(bytes32,address,uint256)": EventFragment;
        "ExtensionUninstalled(bytes32,address)": EventFragment;
        "ExtensionUpgraded(bytes32,address,uint256)": EventFragment;
        "RecoveryModeEntered(address)": EventFragment;
        "RecoveryModeExitApproved(address)": EventFragment;
        "RecoveryModeExited(address)": EventFragment;
        "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)": EventFragment;
        "RegistrarInitialised(address,bytes32)": EventFragment;
        "ReputationMinerPenalised(address,uint256)": EventFragment;
        "ReputationMiningRewardSet(uint256)": EventFragment;
        "TokenWhitelisted(address,bool)": EventFragment;
        "MetaTransactionExecuted(address,address,bytes)": EventFragment;
        "TokenAuthorityDeployed(address)": EventFragment;
        "TokenDeployed(address)": EventFragment;
        "BridgeSet(address)": EventFragment;
        "ReputationUpdateAddedFromBridge(uint256,address,uint256)": EventFragment;
        "ReputationUpdateSentToBridge(address,uint256)": EventFragment;
        "ReputationUpdateStored(address,uint256)": EventFragment;
        "ReputationUpdateStoredFromBridge(uint256,address,uint256)": EventFragment;
        "SkillAddedFromBridge(uint256)": EventFragment;
        "SkillCreationStored(uint256)": EventFragment;
        "SkillStoredFromBridge(uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ColonyNetworkInitialised"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyNetworkInitialised(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenLockingAddressSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenLockingAddressSet(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MiningCycleResolverSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MiningCycleResolverSet(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NetworkFeeInverseSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NetworkFeeInverseSet(uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyVersionAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyVersionAdded(uint256,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaColonyCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaColonyCreated(address,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyAdded(uint256,address,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillAdded(uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AuctionCreated(address,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMiningInitialised"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMiningInitialised(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMiningCycleComplete"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMiningCycleComplete(bytes32,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationRootHashSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationRootHashSet(bytes32,uint256,address[],uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UserLabelRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UserLabelRegistered(address,bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyLabelRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ColonyLabelRegistered(address,bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryRoleSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryRoleSet(address,bool)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionAddedToNetwork"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionAddedToNetwork(bytes32,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionDeprecated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionDeprecated(bytes32,address,bool)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionInstalled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionInstalled(bytes32,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionUninstalled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionUninstalled(bytes32,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionUpgraded(bytes32,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeEntered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeEntered(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeExitApproved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeExitApproved(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeExited"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryModeExited(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryStorageSlotSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RegistrarInitialised"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RegistrarInitialised(address,bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMinerPenalised"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMinerPenalised(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMiningRewardSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationMiningRewardSet(uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenWhitelisted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenWhitelisted(address,bool)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted(address,address,bytes)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenAuthorityDeployed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenAuthorityDeployed(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenDeployed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenDeployed(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BridgeSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BridgeSet(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateAddedFromBridge"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateAddedFromBridge(uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateSentToBridge"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateSentToBridge(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateStored"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateStored(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateStoredFromBridge"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReputationUpdateStoredFromBridge(uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillAddedFromBridge"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillAddedFromBridge(uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillCreationStored"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillCreationStored(uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillStoredFromBridge"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SkillStoredFromBridge(uint256)"): EventFragment;
}
export interface ColonyNetworkInitialisedEventObject {
    resolver: string;
}
export type ColonyNetworkInitialisedEvent = TypedEvent<[
    string
], ColonyNetworkInitialisedEventObject>;
export type ColonyNetworkInitialisedEventFilter = TypedEventFilter<ColonyNetworkInitialisedEvent>;
export interface TokenLockingAddressSetEventObject {
    tokenLocking: string;
}
export type TokenLockingAddressSetEvent = TypedEvent<[
    string
], TokenLockingAddressSetEventObject>;
export type TokenLockingAddressSetEventFilter = TypedEventFilter<TokenLockingAddressSetEvent>;
export interface MiningCycleResolverSetEventObject {
    miningCycleResolver: string;
}
export type MiningCycleResolverSetEvent = TypedEvent<[
    string
], MiningCycleResolverSetEventObject>;
export type MiningCycleResolverSetEventFilter = TypedEventFilter<MiningCycleResolverSetEvent>;
export interface NetworkFeeInverseSetEventObject {
    feeInverse: BigNumber;
}
export type NetworkFeeInverseSetEvent = TypedEvent<[
    BigNumber
], NetworkFeeInverseSetEventObject>;
export type NetworkFeeInverseSetEventFilter = TypedEventFilter<NetworkFeeInverseSetEvent>;
export interface ColonyVersionAddedEventObject {
    version: BigNumber;
    resolver: string;
}
export type ColonyVersionAddedEvent = TypedEvent<[
    BigNumber,
    string
], ColonyVersionAddedEventObject>;
export type ColonyVersionAddedEventFilter = TypedEventFilter<ColonyVersionAddedEvent>;
export interface MetaColonyCreatedEventObject {
    metaColony: string;
    token: string;
    rootSkillId: BigNumber;
}
export type MetaColonyCreatedEvent = TypedEvent<[
    string,
    string,
    BigNumber
], MetaColonyCreatedEventObject>;
export type MetaColonyCreatedEventFilter = TypedEventFilter<MetaColonyCreatedEvent>;
export interface ColonyAddedEventObject {
    colonyId: BigNumber;
    colonyAddress: string;
    token: string;
}
export type ColonyAddedEvent = TypedEvent<[
    BigNumber,
    string,
    string
], ColonyAddedEventObject>;
export type ColonyAddedEventFilter = TypedEventFilter<ColonyAddedEvent>;
export interface SkillAddedEventObject {
    skillId: BigNumber;
    parentSkillId: BigNumber;
}
export type SkillAddedEvent = TypedEvent<[
    BigNumber,
    BigNumber
], SkillAddedEventObject>;
export type SkillAddedEventFilter = TypedEventFilter<SkillAddedEvent>;
export interface AuctionCreatedEventObject {
    auction: string;
    token: string;
    quantity: BigNumber;
}
export type AuctionCreatedEvent = TypedEvent<[
    string,
    string,
    BigNumber
], AuctionCreatedEventObject>;
export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;
export interface ReputationMiningInitialisedEventObject {
    inactiveReputationMiningCycle: string;
}
export type ReputationMiningInitialisedEvent = TypedEvent<[
    string
], ReputationMiningInitialisedEventObject>;
export type ReputationMiningInitialisedEventFilter = TypedEventFilter<ReputationMiningInitialisedEvent>;
export interface ReputationMiningCycleCompleteEventObject {
    hash: string;
    nNodes: BigNumber;
}
export type ReputationMiningCycleCompleteEvent = TypedEvent<[
    string,
    BigNumber
], ReputationMiningCycleCompleteEventObject>;
export type ReputationMiningCycleCompleteEventFilter = TypedEventFilter<ReputationMiningCycleCompleteEvent>;
export interface ReputationRootHashSetEventObject {
    newHash: string;
    newNNodes: BigNumber;
    stakers: string[];
    reward: BigNumber;
}
export type ReputationRootHashSetEvent = TypedEvent<[
    string,
    BigNumber,
    string[],
    BigNumber
], ReputationRootHashSetEventObject>;
export type ReputationRootHashSetEventFilter = TypedEventFilter<ReputationRootHashSetEvent>;
export interface UserLabelRegisteredEventObject {
    user: string;
    label: string;
}
export type UserLabelRegisteredEvent = TypedEvent<[
    string,
    string
], UserLabelRegisteredEventObject>;
export type UserLabelRegisteredEventFilter = TypedEventFilter<UserLabelRegisteredEvent>;
export interface ColonyLabelRegisteredEventObject {
    colony: string;
    label: string;
}
export type ColonyLabelRegisteredEvent = TypedEvent<[
    string,
    string
], ColonyLabelRegisteredEventObject>;
export type ColonyLabelRegisteredEventFilter = TypedEventFilter<ColonyLabelRegisteredEvent>;
export interface RecoveryRoleSetEventObject {
    user: string;
    setTo: boolean;
}
export type RecoveryRoleSetEvent = TypedEvent<[
    string,
    boolean
], RecoveryRoleSetEventObject>;
export type RecoveryRoleSetEventFilter = TypedEventFilter<RecoveryRoleSetEvent>;
export interface ExtensionAddedToNetworkEventObject {
    extensionId: string;
    version: BigNumber;
}
export type ExtensionAddedToNetworkEvent = TypedEvent<[
    string,
    BigNumber
], ExtensionAddedToNetworkEventObject>;
export type ExtensionAddedToNetworkEventFilter = TypedEventFilter<ExtensionAddedToNetworkEvent>;
export interface ExtensionDeprecatedEventObject {
    extensionId: string;
    colony: string;
    deprecated: boolean;
}
export type ExtensionDeprecatedEvent = TypedEvent<[
    string,
    string,
    boolean
], ExtensionDeprecatedEventObject>;
export type ExtensionDeprecatedEventFilter = TypedEventFilter<ExtensionDeprecatedEvent>;
export interface ExtensionInstalledEventObject {
    extensionId: string;
    colony: string;
    version: BigNumber;
}
export type ExtensionInstalledEvent = TypedEvent<[
    string,
    string,
    BigNumber
], ExtensionInstalledEventObject>;
export type ExtensionInstalledEventFilter = TypedEventFilter<ExtensionInstalledEvent>;
export interface ExtensionUninstalledEventObject {
    extensionId: string;
    colony: string;
}
export type ExtensionUninstalledEvent = TypedEvent<[
    string,
    string
], ExtensionUninstalledEventObject>;
export type ExtensionUninstalledEventFilter = TypedEventFilter<ExtensionUninstalledEvent>;
export interface ExtensionUpgradedEventObject {
    extensionId: string;
    colony: string;
    version: BigNumber;
}
export type ExtensionUpgradedEvent = TypedEvent<[
    string,
    string,
    BigNumber
], ExtensionUpgradedEventObject>;
export type ExtensionUpgradedEventFilter = TypedEventFilter<ExtensionUpgradedEvent>;
export interface RecoveryModeEnteredEventObject {
    user: string;
}
export type RecoveryModeEnteredEvent = TypedEvent<[
    string
], RecoveryModeEnteredEventObject>;
export type RecoveryModeEnteredEventFilter = TypedEventFilter<RecoveryModeEnteredEvent>;
export interface RecoveryModeExitApprovedEventObject {
    user: string;
}
export type RecoveryModeExitApprovedEvent = TypedEvent<[
    string
], RecoveryModeExitApprovedEventObject>;
export type RecoveryModeExitApprovedEventFilter = TypedEventFilter<RecoveryModeExitApprovedEvent>;
export interface RecoveryModeExitedEventObject {
    user: string;
}
export type RecoveryModeExitedEvent = TypedEvent<[
    string
], RecoveryModeExitedEventObject>;
export type RecoveryModeExitedEventFilter = TypedEventFilter<RecoveryModeExitedEvent>;
export interface RecoveryStorageSlotSetEventObject {
    user: string;
    slot: BigNumber;
    fromValue: string;
    toValue: string;
}
export type RecoveryStorageSlotSetEvent = TypedEvent<[
    string,
    BigNumber,
    string,
    string
], RecoveryStorageSlotSetEventObject>;
export type RecoveryStorageSlotSetEventFilter = TypedEventFilter<RecoveryStorageSlotSetEvent>;
export interface RegistrarInitialisedEventObject {
    ens: string;
    rootNode: string;
}
export type RegistrarInitialisedEvent = TypedEvent<[
    string,
    string
], RegistrarInitialisedEventObject>;
export type RegistrarInitialisedEventFilter = TypedEventFilter<RegistrarInitialisedEvent>;
export interface ReputationMinerPenalisedEventObject {
    miner: string;
    tokensLost: BigNumber;
}
export type ReputationMinerPenalisedEvent = TypedEvent<[
    string,
    BigNumber
], ReputationMinerPenalisedEventObject>;
export type ReputationMinerPenalisedEventFilter = TypedEventFilter<ReputationMinerPenalisedEvent>;
export interface ReputationMiningRewardSetEventObject {
    amount: BigNumber;
}
export type ReputationMiningRewardSetEvent = TypedEvent<[
    BigNumber
], ReputationMiningRewardSetEventObject>;
export type ReputationMiningRewardSetEventFilter = TypedEventFilter<ReputationMiningRewardSetEvent>;
export interface TokenWhitelistedEventObject {
    token: string;
    status: boolean;
}
export type TokenWhitelistedEvent = TypedEvent<[
    string,
    boolean
], TokenWhitelistedEventObject>;
export type TokenWhitelistedEventFilter = TypedEventFilter<TokenWhitelistedEvent>;
export interface MetaTransactionExecutedEventObject {
    userAddress: string;
    relayerAddress: string;
    payload: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<[
    string,
    string,
    string
], MetaTransactionExecutedEventObject>;
export type MetaTransactionExecutedEventFilter = TypedEventFilter<MetaTransactionExecutedEvent>;
export interface TokenAuthorityDeployedEventObject {
    tokenAuthorityAddress: string;
}
export type TokenAuthorityDeployedEvent = TypedEvent<[
    string
], TokenAuthorityDeployedEventObject>;
export type TokenAuthorityDeployedEventFilter = TypedEventFilter<TokenAuthorityDeployedEvent>;
export interface TokenDeployedEventObject {
    tokenAddress: string;
}
export type TokenDeployedEvent = TypedEvent<[string], TokenDeployedEventObject>;
export type TokenDeployedEventFilter = TypedEventFilter<TokenDeployedEvent>;
export interface BridgeSetEventObject {
    bridgeAddress: string;
}
export type BridgeSetEvent = TypedEvent<[string], BridgeSetEventObject>;
export type BridgeSetEventFilter = TypedEventFilter<BridgeSetEvent>;
export interface ReputationUpdateAddedFromBridgeEventObject {
    chainId: BigNumber;
    colony: string;
    updateNumber: BigNumber;
}
export type ReputationUpdateAddedFromBridgeEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber
], ReputationUpdateAddedFromBridgeEventObject>;
export type ReputationUpdateAddedFromBridgeEventFilter = TypedEventFilter<ReputationUpdateAddedFromBridgeEvent>;
export interface ReputationUpdateSentToBridgeEventObject {
    colony: string;
    count: BigNumber;
}
export type ReputationUpdateSentToBridgeEvent = TypedEvent<[
    string,
    BigNumber
], ReputationUpdateSentToBridgeEventObject>;
export type ReputationUpdateSentToBridgeEventFilter = TypedEventFilter<ReputationUpdateSentToBridgeEvent>;
export interface ReputationUpdateStoredEventObject {
    colony: string;
    count: BigNumber;
}
export type ReputationUpdateStoredEvent = TypedEvent<[
    string,
    BigNumber
], ReputationUpdateStoredEventObject>;
export type ReputationUpdateStoredEventFilter = TypedEventFilter<ReputationUpdateStoredEvent>;
export interface ReputationUpdateStoredFromBridgeEventObject {
    chainId: BigNumber;
    colony: string;
    updateNumber: BigNumber;
}
export type ReputationUpdateStoredFromBridgeEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber
], ReputationUpdateStoredFromBridgeEventObject>;
export type ReputationUpdateStoredFromBridgeEventFilter = TypedEventFilter<ReputationUpdateStoredFromBridgeEvent>;
export interface SkillAddedFromBridgeEventObject {
    skillId: BigNumber;
}
export type SkillAddedFromBridgeEvent = TypedEvent<[
    BigNumber
], SkillAddedFromBridgeEventObject>;
export type SkillAddedFromBridgeEventFilter = TypedEventFilter<SkillAddedFromBridgeEvent>;
export interface SkillCreationStoredEventObject {
    skillId: BigNumber;
}
export type SkillCreationStoredEvent = TypedEvent<[
    BigNumber
], SkillCreationStoredEventObject>;
export type SkillCreationStoredEventFilter = TypedEventFilter<SkillCreationStoredEvent>;
export interface SkillStoredFromBridgeEventObject {
    skillId: BigNumber;
}
export type SkillStoredFromBridgeEvent = TypedEvent<[
    BigNumber
], SkillStoredFromBridgeEventObject>;
export type SkillStoredFromBridgeEventFilter = TypedEventFilter<SkillStoredFromBridgeEvent>;
export interface IColonyNetworkEvents extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IColonyNetworkEventsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {
        "ColonyNetworkInitialised(address)"(resolver?: null): ColonyNetworkInitialisedEventFilter;
        ColonyNetworkInitialised(resolver?: null): ColonyNetworkInitialisedEventFilter;
        "TokenLockingAddressSet(address)"(tokenLocking?: null): TokenLockingAddressSetEventFilter;
        TokenLockingAddressSet(tokenLocking?: null): TokenLockingAddressSetEventFilter;
        "MiningCycleResolverSet(address)"(miningCycleResolver?: null): MiningCycleResolverSetEventFilter;
        MiningCycleResolverSet(miningCycleResolver?: null): MiningCycleResolverSetEventFilter;
        "NetworkFeeInverseSet(uint256)"(feeInverse?: null): NetworkFeeInverseSetEventFilter;
        NetworkFeeInverseSet(feeInverse?: null): NetworkFeeInverseSetEventFilter;
        "ColonyVersionAdded(uint256,address)"(version?: null, resolver?: null): ColonyVersionAddedEventFilter;
        ColonyVersionAdded(version?: null, resolver?: null): ColonyVersionAddedEventFilter;
        "MetaColonyCreated(address,address,uint256)"(metaColony?: null, token?: null, rootSkillId?: null): MetaColonyCreatedEventFilter;
        MetaColonyCreated(metaColony?: null, token?: null, rootSkillId?: null): MetaColonyCreatedEventFilter;
        "ColonyAdded(uint256,address,address)"(colonyId?: BigNumberish | null, colonyAddress?: string | null, token?: null): ColonyAddedEventFilter;
        ColonyAdded(colonyId?: BigNumberish | null, colonyAddress?: string | null, token?: null): ColonyAddedEventFilter;
        "SkillAdded(uint256,uint256)"(skillId?: null, parentSkillId?: null): SkillAddedEventFilter;
        SkillAdded(skillId?: null, parentSkillId?: null): SkillAddedEventFilter;
        "AuctionCreated(address,address,uint256)"(auction?: null, token?: null, quantity?: null): AuctionCreatedEventFilter;
        AuctionCreated(auction?: null, token?: null, quantity?: null): AuctionCreatedEventFilter;
        "ReputationMiningInitialised(address)"(inactiveReputationMiningCycle?: null): ReputationMiningInitialisedEventFilter;
        ReputationMiningInitialised(inactiveReputationMiningCycle?: null): ReputationMiningInitialisedEventFilter;
        "ReputationMiningCycleComplete(bytes32,uint256)"(hash?: null, nNodes?: null): ReputationMiningCycleCompleteEventFilter;
        ReputationMiningCycleComplete(hash?: null, nNodes?: null): ReputationMiningCycleCompleteEventFilter;
        "ReputationRootHashSet(bytes32,uint256,address[],uint256)"(newHash?: null, newNNodes?: null, stakers?: null, reward?: null): ReputationRootHashSetEventFilter;
        ReputationRootHashSet(newHash?: null, newNNodes?: null, stakers?: null, reward?: null): ReputationRootHashSetEventFilter;
        "UserLabelRegistered(address,bytes32)"(user?: string | null, label?: null): UserLabelRegisteredEventFilter;
        UserLabelRegistered(user?: string | null, label?: null): UserLabelRegisteredEventFilter;
        "ColonyLabelRegistered(address,bytes32)"(colony?: string | null, label?: null): ColonyLabelRegisteredEventFilter;
        ColonyLabelRegistered(colony?: string | null, label?: null): ColonyLabelRegisteredEventFilter;
        "RecoveryRoleSet(address,bool)"(user?: string | null, setTo?: null): RecoveryRoleSetEventFilter;
        RecoveryRoleSet(user?: string | null, setTo?: null): RecoveryRoleSetEventFilter;
        "ExtensionAddedToNetwork(bytes32,uint256)"(extensionId?: BytesLike | null, version?: null): ExtensionAddedToNetworkEventFilter;
        ExtensionAddedToNetwork(extensionId?: BytesLike | null, version?: null): ExtensionAddedToNetworkEventFilter;
        "ExtensionDeprecated(bytes32,address,bool)"(extensionId?: BytesLike | null, colony?: string | null, deprecated?: null): ExtensionDeprecatedEventFilter;
        ExtensionDeprecated(extensionId?: BytesLike | null, colony?: string | null, deprecated?: null): ExtensionDeprecatedEventFilter;
        "ExtensionInstalled(bytes32,address,uint256)"(extensionId?: BytesLike | null, colony?: string | null, version?: null): ExtensionInstalledEventFilter;
        ExtensionInstalled(extensionId?: BytesLike | null, colony?: string | null, version?: null): ExtensionInstalledEventFilter;
        "ExtensionUninstalled(bytes32,address)"(extensionId?: BytesLike | null, colony?: string | null): ExtensionUninstalledEventFilter;
        ExtensionUninstalled(extensionId?: BytesLike | null, colony?: string | null): ExtensionUninstalledEventFilter;
        "ExtensionUpgraded(bytes32,address,uint256)"(extensionId?: BytesLike | null, colony?: string | null, version?: null): ExtensionUpgradedEventFilter;
        ExtensionUpgraded(extensionId?: BytesLike | null, colony?: string | null, version?: null): ExtensionUpgradedEventFilter;
        "RecoveryModeEntered(address)"(user?: null): RecoveryModeEnteredEventFilter;
        RecoveryModeEntered(user?: null): RecoveryModeEnteredEventFilter;
        "RecoveryModeExitApproved(address)"(user?: null): RecoveryModeExitApprovedEventFilter;
        RecoveryModeExitApproved(user?: null): RecoveryModeExitApprovedEventFilter;
        "RecoveryModeExited(address)"(user?: null): RecoveryModeExitedEventFilter;
        RecoveryModeExited(user?: null): RecoveryModeExitedEventFilter;
        "RecoveryStorageSlotSet(address,uint256,bytes32,bytes32)"(user?: null, slot?: null, fromValue?: null, toValue?: null): RecoveryStorageSlotSetEventFilter;
        RecoveryStorageSlotSet(user?: null, slot?: null, fromValue?: null, toValue?: null): RecoveryStorageSlotSetEventFilter;
        "RegistrarInitialised(address,bytes32)"(ens?: null, rootNode?: null): RegistrarInitialisedEventFilter;
        RegistrarInitialised(ens?: null, rootNode?: null): RegistrarInitialisedEventFilter;
        "ReputationMinerPenalised(address,uint256)"(miner?: null, tokensLost?: null): ReputationMinerPenalisedEventFilter;
        ReputationMinerPenalised(miner?: null, tokensLost?: null): ReputationMinerPenalisedEventFilter;
        "ReputationMiningRewardSet(uint256)"(amount?: null): ReputationMiningRewardSetEventFilter;
        ReputationMiningRewardSet(amount?: null): ReputationMiningRewardSetEventFilter;
        "TokenWhitelisted(address,bool)"(token?: null, status?: null): TokenWhitelistedEventFilter;
        TokenWhitelisted(token?: null, status?: null): TokenWhitelistedEventFilter;
        "MetaTransactionExecuted(address,address,bytes)"(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
        MetaTransactionExecuted(userAddress?: null, relayerAddress?: null, payload?: null): MetaTransactionExecutedEventFilter;
        "TokenAuthorityDeployed(address)"(tokenAuthorityAddress?: null): TokenAuthorityDeployedEventFilter;
        TokenAuthorityDeployed(tokenAuthorityAddress?: null): TokenAuthorityDeployedEventFilter;
        "TokenDeployed(address)"(tokenAddress?: null): TokenDeployedEventFilter;
        TokenDeployed(tokenAddress?: null): TokenDeployedEventFilter;
        "BridgeSet(address)"(bridgeAddress?: null): BridgeSetEventFilter;
        BridgeSet(bridgeAddress?: null): BridgeSetEventFilter;
        "ReputationUpdateAddedFromBridge(uint256,address,uint256)"(chainId?: null, colony?: null, updateNumber?: null): ReputationUpdateAddedFromBridgeEventFilter;
        ReputationUpdateAddedFromBridge(chainId?: null, colony?: null, updateNumber?: null): ReputationUpdateAddedFromBridgeEventFilter;
        "ReputationUpdateSentToBridge(address,uint256)"(colony?: null, count?: null): ReputationUpdateSentToBridgeEventFilter;
        ReputationUpdateSentToBridge(colony?: null, count?: null): ReputationUpdateSentToBridgeEventFilter;
        "ReputationUpdateStored(address,uint256)"(colony?: null, count?: null): ReputationUpdateStoredEventFilter;
        ReputationUpdateStored(colony?: null, count?: null): ReputationUpdateStoredEventFilter;
        "ReputationUpdateStoredFromBridge(uint256,address,uint256)"(chainId?: null, colony?: null, updateNumber?: null): ReputationUpdateStoredFromBridgeEventFilter;
        ReputationUpdateStoredFromBridge(chainId?: null, colony?: null, updateNumber?: null): ReputationUpdateStoredFromBridgeEventFilter;
        "SkillAddedFromBridge(uint256)"(skillId?: null): SkillAddedFromBridgeEventFilter;
        SkillAddedFromBridge(skillId?: null): SkillAddedFromBridgeEventFilter;
        "SkillCreationStored(uint256)"(skillId?: null): SkillCreationStoredEventFilter;
        SkillCreationStored(skillId?: null): SkillCreationStoredEventFilter;
        "SkillStoredFromBridge(uint256)"(skillId?: null): SkillStoredFromBridgeEventFilter;
        SkillStoredFromBridge(skillId?: null): SkillStoredFromBridgeEventFilter;
    };
    estimateGas: {};
    populateTransaction: {};
}
