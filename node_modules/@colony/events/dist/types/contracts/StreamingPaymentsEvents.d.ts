import type { BaseContract, BigNumber, BigNumberish, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common.js";
export interface StreamingPaymentsEventsInterface extends utils.Interface {
    functions: {};
    events: {
        "ExtensionInitialised()": EventFragment;
        "LogSetAuthority(address)": EventFragment;
        "LogSetOwner(address)": EventFragment;
        "MetaTransactionExecuted(address,address,bytes)": EventFragment;
        "PaymentTokenUpdated(address,uint256,address,uint256)": EventFragment;
        "PaymentTokenUpdated(address,uint256,uint256)": EventFragment;
        "PaymentTokenUpdated(address,uint256,uint256,uint256)": EventFragment;
        "StreamingPaymentClaimed(address,uint256,address,uint256)": EventFragment;
        "StreamingPaymentCreated(address,uint256)": EventFragment;
        "ClaimWaived(address,uint256)": EventFragment;
        "EndTimeSet(address,uint256,uint256)": EventFragment;
        "StartTimeSet(address,uint256,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ExtensionInitialised"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExtensionInitialised()"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogSetAuthority"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogSetAuthority(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogSetOwner"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogSetOwner(address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted(address,address,bytes)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentTokenUpdated(address,uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentTokenUpdated(address,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentTokenUpdated(address,uint256,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StreamingPaymentClaimed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StreamingPaymentClaimed(address,uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StreamingPaymentCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StreamingPaymentCreated(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ClaimWaived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ClaimWaived(address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EndTimeSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EndTimeSet(address,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StartTimeSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StartTimeSet(address,uint256,uint256)"): EventFragment;
}
export interface ExtensionInitialisedEventObject {
}
export type ExtensionInitialisedEvent = TypedEvent<[
], ExtensionInitialisedEventObject>;
export type ExtensionInitialisedEventFilter = TypedEventFilter<ExtensionInitialisedEvent>;
export interface LogSetAuthorityEventObject {
    authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<[
    string
], LogSetAuthorityEventObject>;
export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;
export interface LogSetOwnerEventObject {
    owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;
export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;
export interface MetaTransactionExecutedEventObject {
    user: string;
    relayerAddress: string;
    functionSignature: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<[
    string,
    string,
    string
], MetaTransactionExecutedEventObject>;
export type MetaTransactionExecutedEventFilter = TypedEventFilter<MetaTransactionExecutedEvent>;
export interface PaymentTokenUpdated_address_uint256_address_uint256_EventObject {
    agent: string;
    streamingPaymentId: BigNumber;
    token: string;
    amount: BigNumber;
}
export type PaymentTokenUpdated_address_uint256_address_uint256_Event = TypedEvent<[
    string,
    BigNumber,
    string,
    BigNumber
], PaymentTokenUpdated_address_uint256_address_uint256_EventObject>;
export type PaymentTokenUpdated_address_uint256_address_uint256_EventFilter = TypedEventFilter<PaymentTokenUpdated_address_uint256_address_uint256_Event>;
export interface PaymentTokenUpdated_address_uint256_uint256_EventObject {
    agent: string;
    streamingPaymentId: BigNumber;
    amount: BigNumber;
}
export type PaymentTokenUpdated_address_uint256_uint256_Event = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], PaymentTokenUpdated_address_uint256_uint256_EventObject>;
export type PaymentTokenUpdated_address_uint256_uint256_EventFilter = TypedEventFilter<PaymentTokenUpdated_address_uint256_uint256_Event>;
export interface PaymentTokenUpdated_address_uint256_uint256_uint256_EventObject {
    agent: string;
    streamingPaymentId: BigNumber;
    amount: BigNumber;
    interval: BigNumber;
}
export type PaymentTokenUpdated_address_uint256_uint256_uint256_Event = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    BigNumber
], PaymentTokenUpdated_address_uint256_uint256_uint256_EventObject>;
export type PaymentTokenUpdated_address_uint256_uint256_uint256_EventFilter = TypedEventFilter<PaymentTokenUpdated_address_uint256_uint256_uint256_Event>;
export interface StreamingPaymentClaimedEventObject {
    agent: string;
    streamingPaymentId: BigNumber;
    token: string;
    amount: BigNumber;
}
export type StreamingPaymentClaimedEvent = TypedEvent<[
    string,
    BigNumber,
    string,
    BigNumber
], StreamingPaymentClaimedEventObject>;
export type StreamingPaymentClaimedEventFilter = TypedEventFilter<StreamingPaymentClaimedEvent>;
export interface StreamingPaymentCreatedEventObject {
    agent: string;
    streamingPaymentId: BigNumber;
}
export type StreamingPaymentCreatedEvent = TypedEvent<[
    string,
    BigNumber
], StreamingPaymentCreatedEventObject>;
export type StreamingPaymentCreatedEventFilter = TypedEventFilter<StreamingPaymentCreatedEvent>;
export interface ClaimWaivedEventObject {
    agent: string;
    streamingPaymentId: BigNumber;
}
export type ClaimWaivedEvent = TypedEvent<[
    string,
    BigNumber
], ClaimWaivedEventObject>;
export type ClaimWaivedEventFilter = TypedEventFilter<ClaimWaivedEvent>;
export interface EndTimeSetEventObject {
    agent: string;
    streamingPaymentId: BigNumber;
    endTime: BigNumber;
}
export type EndTimeSetEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], EndTimeSetEventObject>;
export type EndTimeSetEventFilter = TypedEventFilter<EndTimeSetEvent>;
export interface StartTimeSetEventObject {
    agent: string;
    streamingPaymentId: BigNumber;
    startTime: BigNumber;
}
export type StartTimeSetEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], StartTimeSetEventObject>;
export type StartTimeSetEventFilter = TypedEventFilter<StartTimeSetEvent>;
export interface StreamingPaymentsEvents extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: StreamingPaymentsEventsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {
        "ExtensionInitialised()"(): ExtensionInitialisedEventFilter;
        ExtensionInitialised(): ExtensionInitialisedEventFilter;
        "LogSetAuthority(address)"(authority?: string | null): LogSetAuthorityEventFilter;
        LogSetAuthority(authority?: string | null): LogSetAuthorityEventFilter;
        "LogSetOwner(address)"(owner?: string | null): LogSetOwnerEventFilter;
        LogSetOwner(owner?: string | null): LogSetOwnerEventFilter;
        "MetaTransactionExecuted(address,address,bytes)"(user?: null, relayerAddress?: null, functionSignature?: null): MetaTransactionExecutedEventFilter;
        MetaTransactionExecuted(user?: null, relayerAddress?: null, functionSignature?: null): MetaTransactionExecutedEventFilter;
        "PaymentTokenUpdated(address,uint256,address,uint256)"(agent?: null, streamingPaymentId?: BigNumberish | null, token?: null, amount?: null): PaymentTokenUpdated_address_uint256_address_uint256_EventFilter;
        "PaymentTokenUpdated(address,uint256,uint256)"(agent?: null, streamingPaymentId?: BigNumberish | null, amount?: null): PaymentTokenUpdated_address_uint256_uint256_EventFilter;
        "PaymentTokenUpdated(address,uint256,uint256,uint256)"(agent?: null, streamingPaymentId?: BigNumberish | null, amount?: null, interval?: null): PaymentTokenUpdated_address_uint256_uint256_uint256_EventFilter;
        "StreamingPaymentClaimed(address,uint256,address,uint256)"(agent?: null, streamingPaymentId?: BigNumberish | null, token?: null, amount?: null): StreamingPaymentClaimedEventFilter;
        StreamingPaymentClaimed(agent?: null, streamingPaymentId?: BigNumberish | null, token?: null, amount?: null): StreamingPaymentClaimedEventFilter;
        "StreamingPaymentCreated(address,uint256)"(agent?: null, streamingPaymentId?: null): StreamingPaymentCreatedEventFilter;
        StreamingPaymentCreated(agent?: null, streamingPaymentId?: null): StreamingPaymentCreatedEventFilter;
        "ClaimWaived(address,uint256)"(agent?: null, streamingPaymentId?: BigNumberish | null): ClaimWaivedEventFilter;
        ClaimWaived(agent?: null, streamingPaymentId?: BigNumberish | null): ClaimWaivedEventFilter;
        "EndTimeSet(address,uint256,uint256)"(agent?: null, streamingPaymentId?: BigNumberish | null, endTime?: null): EndTimeSetEventFilter;
        EndTimeSet(agent?: null, streamingPaymentId?: BigNumberish | null, endTime?: null): EndTimeSetEventFilter;
        "StartTimeSet(address,uint256,uint256)"(agent?: null, streamingPaymentId?: BigNumberish | null, startTime?: null): StartTimeSetEventFilter;
        StartTimeSet(agent?: null, streamingPaymentId?: BigNumberish | null, startTime?: null): StartTimeSetEventFilter;
    };
    estimateGas: {};
    populateTransaction: {};
}
