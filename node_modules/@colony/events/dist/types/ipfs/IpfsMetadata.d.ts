import type IpfsAdapter from './IpfsAdapter.js';
import { MetadataType } from './constants.js';
import { type DataTypeMap, type Metadata, type MetadataTypeMap } from './types.js';
export declare const IpfsMetadataEvents: {
    readonly annotation: "Annotation(address,bytes32,string)";
    readonly colony: "ColonyMetadata(address,string)";
    readonly decision: "Annotation(address,bytes32,string)";
    readonly domain: "DomainMetadata(address,uint256,string)";
    readonly misc: "";
    readonly default: "";
};
export type MetadataEvent<K extends MetadataType> = (typeof IpfsMetadataEvents)[K];
/**
 * IpfsMetadata
 *
 * This is part of the {@link ColonyNetwork} and {@link ColonyEventManager} classes and not to be meant to instantiated directly.
 * You can find an instance of this under `colonyNetwork.ipfs` or `eventManager.ipfs`
 *
 */
export declare class IpfsMetadata {
    private adapter;
    constructor(adapter?: IpfsAdapter);
    static eventSupportsMetadata(eventName: string): boolean;
    getMetadata<K extends MetadataType>(cid: string, type?: K): Promise<MetadataTypeMap[K]>;
    getMetadataForEvent<T extends MetadataType, E extends MetadataEvent<T>>(eventName: E, cid: string): Promise<MetadataTypeMap[T]>;
    getRawMetadata(cid: string): Promise<Metadata>;
    uploadMetadata<T extends MetadataType>(type: T, input: DataTypeMap[T]): Promise<string>;
}
