"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const COLONY_IPFS_PINATA_TOKEN = typeof global != 'undefined' && global.process
    ? global.process.env.COLONY_IPFS_PINATA_TOKEN
    : undefined;
/**
 * A Colony SDK IPFS adapter for Pinata (https://pinata.cloud)
 *
 * In order to use this, sign up for Pinata (if you haven't already) and generate a token. Then either supply this token when instantiating the class (example below) or provide it via the environment variable `COLONY_IPFS_PINATA_TOKEN` (when using NodeJS). Then provide an instance of this class to the {@link ColonyNetwork} or {@link ColonyEventManager} classes (depending on your needs).
 *
 * :::danger Tokens are sensitive data
 * Do not check in your Pinata token into version control and **DO NOT EMBED IT INTO YOUR FRONTEND BUNDLE**.
 * :::
 *
 * @example
 * ```typescript
 * import { ColonyNetwork, PinataAdapter } from '@colony/sdk';
 * const pinataAdapter = new PinataAdapter('[YOUR_PINANTA_JWT_TOKEN]');
 * // Immediately executing async function
 * (async function() {
 *   const colonyNetwork = ColonyNetwork.init(signerOrProvider, { ipfsAdapter: pinataAdapter });
 * })();
 * ```
 */
class PinataAdapter {
    constructor(pinataToken) {
        this.PINATA_GATEWAY_ENDPOINT = 'https://gateway.pinata.cloud/ipfs';
        this.name = 'PINATA';
        const token = pinataToken || COLONY_IPFS_PINATA_TOKEN;
        if (!token) {
            throw new Error(`Cannot find pinata token. Please supply it as an argument to the class or as "process.env.COLONY_IPFS_PINATA_TOKEN (in NodeJS)"`);
        }
        this.token = token;
    }
    getIpfsUrl(cid) {
        return `${this.PINATA_GATEWAY_ENDPOINT}/${cid}`;
    }
    uploadJson(jsonString) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield fetch('https://api.pinata.cloud/pinning/pinJSONToIPFS', {
                method: 'POST',
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${this.token}`,
                },
                body: JSON.stringify({
                    pinataContent: JSON.parse(jsonString),
                }),
            });
            const parsed = yield res.json();
            return parsed.IpfsHash;
        });
    }
}
exports.default = PinataAdapter;
